@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:GetUserCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Group>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:query "create";
	msg:type "application/xhtml+xml";
	msg:transform </callimachus/layout.ttl#TransformXhtml>;
	msg:realm </accounts>;
	msg:imports <user-create.xhtml>;
	msg:script """
		return user_create_xhtml.calliConstruct(this, "create");
	""".

rdfs:label a rdf:Property.
rdfs:comment a rdf:Property.

:PostUserCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Group>];
	rdfs:subClassOf [owl:onProperty msg:objectSet; owl:maxCardinality "1"^^xsd:nonNegativeInteger];
	msg:method "POST";
	msg:query "create";
	msg:realm </accounts>;
	msg:expect "303-see-other";
	msg:imports <User>;
	msg:imports </user/>;
	msg:imports </accounts>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	msg:imports <java:java.net.URLEncoder>;
	msg:script """
		if (!form.get("label"))
			throw new BadRequest("Missing label");
		if (!form.get("name"))
			throw new BadRequest("Missing name");
		if (!form.get("email"))
			throw new BadRequest("Missing email");
		if (!form.get("subject"))
			throw new BadRequest("Missing subject");
		if (!form.get("message"))
			throw new BadRequest("Missing message");
		//# read form
		var label = form.get("label")[0];
		var username = form.get("name")[0];
		var email = form.get("email")[0];
		var subject = form.get("subject")[0];
		var body = form.get("message")[0];
		//# assign id
		var uri = user + URLEncoder.encode(username).replace(/%20/g, "+").toLowerCase();
		var newUser = this.objectConnection.getObject(uri);
		if (newUser instanceof User)
			throw new Conflict("User already exists: " + newUser);
		newUser = this.objectConnection.addDesignation(newUser, User);
		newUser = this.objectConnection.addDesignation(newUser, "http://callimachusproject.org/rdf/2009/framework#Party");
		newUser = this.objectConnection.addDesignation(newUser, "http://callimachusproject.org/rdf/2009/framework#User");
		newUser.calliName = username;
		newUser.calliEmail = email;
		newUser.rdfsLabels.add(label);
		newUser.calliAdministrators.addAll(this.calliAdministrators);
		this.calliMembers.add(newUser);
		if (form.get("comment")) {
			newUser.rdfsComments.add(form.get("comment")[0]);
		}
		//# generate and save a password
		var password = newUser.generatePassword();
		var token = username + ":" + accounts.calliAuthName + ":" + password;
		newUser.calliAlgorithm = "MD5";
		newUser.calliEncoded = DigestUtils.md5(new java.lang.String(token).getBytes("UTF-8"));
		//# email the password to the email address provided
		var fromUser = accounts.findCredential(authorization);
		body = body.replace(/@@PASSWORD@@/g, password);
		fromUser.sendMessage(subject + '\\n' + body, label + " <" + email + ">");
		return this;
	""".

:form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :PostUserCreate;
	rdfs:range <java:java.util.Map>;
	msg:type "application/x-www-form-urlencoded".

:authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :PostUserCreate;
	rdfs:range xsd:string;
	msg:header "Authorization".

