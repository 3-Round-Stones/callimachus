@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

<> a </callimachus/SchemaGraph>.

:Lookup rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <../lookup>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:type "application/sparql-results+xml";
	msg:header "cache-control:no-store";
	msg:transform :TransformLookup;
	msg:sparql  """
		SELECT DISTINCT (max(?label) as ?label) (max(?comment) as ?comment) (max(?icon) as ?icon) ?url (max(?modified) as ?modified)
		WHERE {
			{
				?url calli:soundex $soundex
			} OPTIONAL {
				?url skos:prefLabel ?label
			} OPTIONAL {
				?url foaf:name ?label
			} OPTIONAL {
				?url rdfs:label ?label
			} OPTIONAL {
				?url skosxl:literalForm ?label
			}
			FILTER (isIRI(?url))
			FILTER (EXISTS {
				{
					?url rdfs:label ?string
				} UNION {
					?url foaf:name ?string
				} UNION {
					?url skos:prefLabel ?string
				} UNION {
					?url skos:altLabel ?string
				} UNION {
					?url skos:hiddenLabel ?string
				} UNION {
					?url skosxl:literalForm ?string
				}
				FILTER (regex(str(?string), $regex, "i"))
			})
			OPTIONAL { ?url a [calli:icon ?icon] }
			OPTIONAL { ?url rdfs:comment ?comment }
			OPTIONAL { ?url audit:revision ?revision
				OPTIONAL { ?revision audit:committedOn ?modified }
			}
		}
		GROUP BY ?url
		ORDER BY ?label ?url ?icon
		LIMIT 100
	""".

:soundex a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :Lookup;
	rdfs:range xsd:string;
	msg:query "q";
	msg:transform calli:asSoundex.

:regex a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :Lookup;
	rdfs:range xsd:string;
	msg:query "q";
	msg:transform calli:regexStartsWith.

:TransformLookup rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <../lookup>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:type "application/xml";
	msg:transform <../styles/TransformLayout>;
	msg:xslt <lookup.xsl>.

:inputStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :TransformLookup;
	rdfs:range <java:java.io.InputStream>.

