# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <PathSegment>.

<PathSegment> a <Creatable>, owl:Class;
    rdfs:subClassOf <Composite>, <Purl>, calli:PathSegment;
    rdfs:label "Path Segment";
    rdfs:comment "A container of resources.";
    owl:equivalentClass </callimachus/Folder>, </callimachus/1.0/types/Folder>, </callimachus/1.3/types/Folder>, </callimachus/1.4/types/Folder>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/folder.png>;
    calli:thumbnail <../images/folder.svg>;
    calli:view <../templates/path-view.xhtml>;
    calli:edit <../templates/path-edit.xhtml>;
    calli:create <../templates/path-create.xhtml>.

# when a Folder is created
:ValidateFolder owl:intersectionOf (<serviceable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>]);
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:script """
        var uri = this.toString();
        if (uri.lastIndexOf('/') != uri.length - 1)
            throw new BadRequest("Folders must end with a slash");
        return proceed();
    """.

################################
# List folder contents
################################

:GetFolderFeed rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:method "GET";
    msg:path "?contents";
    calli:rel "contents";
    calli:requires calli:subscriber;
    msg:type "application/atom+xml;q=0.9";
    msg:header "cache-control:no-cache";
    calli:copy "../pipelines/path-contents-atom.xpl?results&target={this}".

################################
# Recent Changes
################################

:GetFolderChanges rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    msg:method "GET";
    msg:path "?changes";
    calli:rel "alternate";
    calli:requires calli:subscriber;
    msg:type "text/html";
    msg:header "cache-control:no-store";
    calli:copy "../pipelines/path-changes-html.xpl?results&target={this}".

:GetFolderChangeAtom rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:method "GET";
    msg:path "?changes";
    calli:rel "alternate";
    calli:requires calli:subscriber;
    msg:type "application/atom+xml;q=0.9";
    msg:header "cache-control:no-store";
    calli:copy "../pipelines/path-changes-atom.xpl?results&target={this}".

################################
# Export folder contents
################################

:DownloadFolderComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "GET";
    msg:path "?archive";
    calli:rel calli:archive;
    calli:requires calli:administrator;
    msg:header "cache-control:no-store";
    calli:script """
        var baseURI = this.toString();
        if (this.calliHasComponent.isEmpty() || baseURI.charAt(baseURI.length - 1) != '/')
            return null;
        var component = this;
        var name = this.resource.localName;
        var filename = this.toUri().path.substring(1).replace(/\\//g, '-') + this.toUri().authority.replace(/:.*/,'') + '.car';
        return {
            status: 200, message: "OK",
            headers:{"Content-Disposition":'attachment;filename="' + filename + '"', "content-type":"application/zip"},
            body: this.exportFolder()
        };
    """.

:GetRdfFolderDescription rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            $this a <PathSegment>, calli:PathSegment;
                rdfs:label ?label;
                calli:describedby ?describedby;
                calli:reader ?reader;
                calli:subscriber ?subscriber;
                calli:editor ?editor;
                calli:administrator ?administrator.
        } WHERE {
            $this a <PathSegment>
            {
                $this rdfs:label ?label
            } UNION {
                $this calli:describedby ?describedby
            } UNION {
                $this calli:reader ?reader
            } UNION {
                $this calli:subscriber ?subscriber
            } UNION {
                $this calli:editor ?editor
            } UNION {
                $this calli:administrator ?administrator
            }
        }
    """.

################################
# Import folder contents
################################

:GetFolderUploadPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :folder_import_xhtml; owl:hasValue <../pages/path-import.xhtml>];
    msg:method "GET";
    msg:path "?import";
    calli:requires calli:administrator;
    msg:type "text/html";
    msg:header "cache-control:no-cache";
    calli:script """
        return folder_import_xhtml.Construct(this, 'import');
    """.

:folder_import_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetFolderUploadPage.

rdfs:label a rdf:Property.

:ImportFolderComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    rdfs:subClassOf [owl:onProperty :webapp; owl:hasValue <../>];
    msg:method "POST";
    msg:path "?import";
    calli:requires calli:administrator;
    calli:imports <PathSegment>;
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:script """
        var folder;
        var bio = new org.openrdf.http.object.io.LatencyInputStream(formData);
        var multipart = new org.callimachusproject.io.MultipartParser(bio);
        var inputStream = multipart.next();
        if (multipart.headers.get("content-type")) {
            //# replacing this folders contents
            folder = this;
        } else {
            //# creating a new folder
            var name = new java.util.Scanner(inputStream).useDelimiter('\\n').next();
            inputStream.close();
            inputStream = multipart.next();
            var resolved = this.resolve(name);
            if (resolved.indexOf(this.toString()) !== 0)
                throw new BadRequest("Subfolder must be within " + this.toString());
            folder = this.designateAsFolder(resolved, PathSegment);
        }
        try {
            println("Importing folder content from " + multipart.headers.get("content-disposition"));
            folder.importComponents(inputStream, webapp.toString());
            println("Imported folder content for: " + this);
            return {
                status: 302, message: "See Other",
                headers: {
                    "Content-Type": "text/uri-list",
                    "Location": folder.toString()
                },
                body: folder.toString()
            };
        } finally {
            inputStream.close();
        }
    """.

:formData a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :ImportFolderComponents;
    rdfs:range <java:java.io.InputStream>;
    msg:type "multipart/form-data".

:webapp a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :ImportFolderComponents.

:DeleteFolderContents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <PathSegment>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "DELETE";
    msg:path "?archive";
    calli:requires calli:administrator;
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var dependency = this.getComponentsWithExternalDependent();
        this.DeleteComponents(); //# remove existing components
        var iter = dependency.iterator();
        while (iter.hasNext()) {
            var stmts = con.getStatements(null, null, vf.createURI(iter.next()), true, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    var pred = st.predicate;
                    if ("http://www.w3.org/1999/02/22-rdf-syntax-ns#".equals(pred.namespace))
                        continue;
                    if ("http://www.w3.org/ns/prov#".equals(pred.namespace))
                        continue;
                    var subj = st.subject;
                    if (subj instanceof org.openrdf.model.URI)
                        throw new BadRequest(this +" contents cannot be deleted as they are required by at least: " + subj);
                    throw new BadRequest(this + " contents cannot be deleted as they are required by other resources");
                }
            } finally {
                stmts.close();
            }
        }
    """.

