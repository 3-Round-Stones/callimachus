# 
#    Copyright (c) 2011 Talis Inc., Steve Battle and James Leigh, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix callimachus:<.>.
@prefix :<#>.

<> a </callimachus/SchemaGraph>.

<Image> a <Creatable>, owl:Class;
	rdfs:subClassOf foaf:Image, <File>;
	rdfs:label "Image" ;
	rdfs:isDefinedBy </callimachus>;
	calli:icon <image.png>;
	calli:view <image-view.xhtml> ;
	calli:edit <image-edit.xhtml> ;
	calli:create <file-create.xhtml>.

<AnimatedGraphic> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Animated Graphic" ;
	rdfs:isDefinedBy </callimachus>;
	calli:icon <image.png>;
	calli:create <file-create.xhtml>;
	calli:type "image/gif".

<IconGraphic> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Icon Graphic" ;
	rdfs:isDefinedBy </callimachus>;
	calli:icon <image.png>;
	calli:create <file-create.xhtml>;
	calli:type "image/vnd.microsoft.icon".

<NetworkGraphic> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Network Graphic" ;
	rdfs:isDefinedBy </callimachus>;
	calli:icon <image.png>;
	calli:create <file-create.xhtml>;
	calli:type "image/png".

<VectorGraphic> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Vector Graphic" ;
	rdfs:isDefinedBy </callimachus>;
	calli:icon <image.png>;
	calli:create <file-create.xhtml>;
	calli:type "image/svg+xml".

# GET /image.gif
:GetAnimatedGraphic rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <AnimatedGraphic>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:type "image/gif";
	calli:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# GET /image.ico
:GetIconGraphic rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <IconGraphic>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:type "image/vnd.microsoft.icon";
	calli:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# GET /image.png
:GetNetworkGraphic rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <NetworkGraphic>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:type "image/png";
	calli:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# GET /image.svg
:GetVectorGraphic rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <VectorGraphic>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:type "image/svg+xml";
	calli:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# POST ?create=/callimachus/File
:LookupImageFile owl:intersectionOf (</callimachus/toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <File>]);
	msg:script """
		var uri = null;
		if (type == "image/x-png" || type == "image/png") {
			uri = this.toUri().resolve("/callimachus/NetworkGraphic");
		} else if (type == "image/svg+xml") {
			uri = this.toUri().resolve("/callimachus/VectorGraphic");
		} else if (type == "image/vnd.microsoft.icon") {
			uri = this.toUri().resolve("/callimachus/IconGraphic");
		} else if (type == "image/gif") {
			uri = this.toUri().resolve("/callimachus/AnimatedGraphic");
		}
		if (uri) {
			return this.objectConnection.getObject(uri.toString());
		}
		return proceed();
	""".

# POST ?create=/callimachus/Image
:LookupImage owl:intersectionOf (</callimachus/toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <Image>]);
	msg:script """
		var uri = null;
		if (type == "image/x-png" || type == "image/png") {
			uri = this.toUri().resolve("/callimachus/NetworkGraphic");
		} else if (type == "image/svg+xml") {
			uri = this.toUri().resolve("/callimachus/VectorGraphic");
		} else if (type == "image/vnd.microsoft.icon") {
			uri = this.toUri().resolve("/callimachus/IconGraphic");
		} else if (type == "image/gif") {
			uri = this.toUri().resolve("/callimachus/AnimatedGraphic");
		}
		if (uri) {
			return this.objectConnection.getObject(uri.toString());
		}
		return proceed();
	""".

# POST ?create=/callimachus/ImageGraphic
:PostImageCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:allValuesFrom [owl:oneOf (<NetworkGraphic> <VectorGraphic> <IconGraphic> <AnimatedGraphic>)] ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.callimachusproject.server.exceptions.Conflict>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <File>;
	msg:imports foaf:Image ;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();

		//# image resource
		if (location instanceof File) {
			location = location.RemoveFile();
		}
		var obj = location;
		if (!obj)
			throw new BadRequest("Missing location");

		//# designate as foaf:Image
		obj = con.addDesignation(obj, this.toString()) ;
		obj = con.addDesignation(obj, Image);

		//# add the image label
		var fileName = location.resource.localName;
		var label = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		con.add(obj.resource, RDFS.LABEL, vf.createLiteral(label), []);

		//# load image data
		var out = obj.PutImage(body) ;

		return obj;
	""".

:PutImage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Image> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:script """
		var out = this.openOutputStream() ;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var read;
		try {
			while ((read = imageStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:imageStream a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PutImage ;
	rdfs:range <java:java.io.InputStream> ;
	calli:type "application/octet-stream" .

