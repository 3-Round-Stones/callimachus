# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

# all common modification operations must be authorized
calli:get-copy http:realm <authority>.
calli:post-copy http:realm <authority>.
calli:get-edit http:realm <authority>.
calli:post-edit http:realm <authority>.
calli:delete http:realm <authority>.
calli:post-discussion http:realm <authority>.

# Transcation operations must be authorized
audit:Transaction http:realm <authority>.

:authorize-credential rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue <authority>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:boolean];
	obj:name "calliAuthorizeCredential".

:authorize-credential-arg1 a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :authorize-credential;
	obj:name "credential".

:authorize-credential-arg2 a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :authorize-credential;
	rdfs:range xsd:string;
	obj:name "method".

:authorize-credential-arg3 a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :authorize-credential;
	obj:name "subject".

:authorize-credential-arg4 a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :authorize-credential;
	rdfs:range xsd:string;
	obj:name "qs".

:authorize-maintainer owl:equivalentClass :authorize-credential;
	obj:sparql """
		ASK {
			{
				$subject calli:reviewer $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST" && $qs = "discussion")
				FILTER ($qs = "view" || $qs = "discussion" || $qs = "history" || !bound($qs))
			} UNION {
				$subject calli:scribe $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:curator $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject a [calli:conservator $credential]
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST" && ($qs = "edit" || $qs = "discussion"))
				FILTER ($qs = "view" || $qs = "edit" || $qs = "discussion" || $qs = "history" || !bound($qs))
			} UNION {
				$subject calli:maintainer $credential
			}
		}
	""".

:authorize-member owl:equivalentClass :authorize-credential;
	obj:sparql """
		ASK {
			?group calli:member $credential
			{
				$subject calli:reviewer ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST" && $qs = "discussion")
				FILTER ($qs = "view" || $qs = "discussion" || $qs = "history" || !bound($qs))
			} UNION {
				$subject calli:scribe ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:curator ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject a [calli:conservator ?group]
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST" && ($qs = "edit" || $qs = "discussion"))
				FILTER ($qs = "view" || $qs = "edit" || $qs = "discussion" || $qs = "history" || !bound($qs))
			} UNION {
				$subject calli:maintainer ?group
			}
		}
	""".

# anybody with credentials can login and are welcome
:login-authorize owl:equivalentClass :authorize-credential;
	obj:sparql """
		ASK {
			$subject calli:authenticates [calli:member $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($subject = <authority>)
			FILTER ($qs = "login" || $qs = "welcome")
		}
	""".

# transcations are authorized by the subject they modified
:transaction-view-authorize owl:equivalentClass :authorize-credential;
	obj:sparql """
		ASK {
			$subject a audit:Transaction
			{
				GRAPH $subject { ?subj ?pred ?obj }
			} UNION {
				GRAPH $subject { [rdf:subject ?subj] }
			} UNION {
				$subject audit:contained [rdf:subject ?subj]
			}
			{
				?subj calli:reviewer $credential
			} UNION {
				?subj calli:maintainer $credential
			} UNION {
				?subj calli:reviewer [calli:member $credential]
			} UNION {
				?subj calli:maintainer [calli:member $credential]
			}
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($qs = "view" || $qs = "describe" || !bound($qs))
		}
	""".

