# 
#    Copyright (c) 2011 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<Photo> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Photo" ;
	calli:icon <photo.png>;
	calli:view <photo.xhtml> ;
	calli:edit <photo-edit.xhtml> ;
	calli:create <photo-create.xhtml>.

# GET /image.jpg
:GetPhoto rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:type "image/jpeg";
	msg:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# POST ?create=/callimachus/File
:PostPhotoFile owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:allValuesFrom [owl:oneOf (<Image> <File>)] ]);
	msg:script """
		if (type == "image/pjpeg" || type == "image/jpeg") {
			var uri = this.toUri().resolve("/callimachus/Photo").toString();
			var factory = this.objectConnection.getObject(uri);
			return factory.PostCreate(body, location, type);
		}
		return proceed();
	""".

# POST ?create=/callimachus/Photo
:PostPhotoCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Photo> ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports foaf:Image ;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();

		//# image resource
		var obj = location;
		if (!obj)
			throw new BadRequest("Missing location");
		if (obj instanceof Image)
			throw new Conflict("A photo with that file name has already been uploaded: " + obj) ;

		//# designate as <Image> and the relevant mimetype
		obj = con.addDesignation(obj, this.toString()) ;
		obj = con.addDesignation(obj, Image) ;

		//# add the image label
		var fileName = location.resource.localName;
		var label = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		con.add(obj.resource, RDFS.LABEL, vf.createLiteral(label), []);

		this.objectConnection.commit();

		//# load image data
		var out = obj.PutPhoto(body) ;

		return obj;
	""".

:local a calli:LocalRealm.

:PutPhoto rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT" ;
	msg:realm :local ;
	msg:script """
		var out = this.openOutputStream() ;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var read;
		try {
			while ((read = imageStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:imageStream a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PutPhoto ;
	rdfs:range <java:java.io.InputStream> ;
	msg:type "application/octet-stream" .

################################
# Resize Photo
################################

:GetPhotoLarge rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.ByteArrayOutputStream>];
	msg:method "GET";
	msg:query "large";
	msg:type "image/png";
	msg:imports <java:java.awt>;
	msg:imports <java:java.awt.image.BufferedImage>;
	msg:imports <java:javax.imageio.ImageIO>;
	msg:imports <java:java.io.ByteArrayOutputStream>;
	msg:script """
		var originalImage = ImageIO.read(this.openInputStream());
		var width = 1024;
		var height = originalImage.getHeight() * width / originalImage.getWidth();
		if (height > 768) {
			height = 768;
			width = originalImage.getWidth() * height / originalImage.getHeight();
		}
		if (width > originalImage.getWidth()) {
			width = originalImage.getWidth();
		}
		if (height > originalImage.getHeight()) {
			height = originalImage.getHeight();
		}
		var resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		var g = resizedImage.createGraphics();
		g.drawImage(originalImage, 0, 0, width, height, null);
		g.dispose();
		g.setComposite(AlphaComposite.Src);
	
		var out = new ByteArrayOutputStream();
		ImageIO.write(resizedImage, "png", out);
		return out;
	""".

:GetPhotoMedium rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.ByteArrayOutputStream>];
	msg:method "GET";
	msg:query "medium";
	msg:type "image/png";
	msg:imports <java:java.awt>;
	msg:imports <java:java.awt.image.BufferedImage>;
	msg:imports <java:javax.imageio.ImageIO>;
	msg:imports <java:java.io.ByteArrayOutputStream>;
	msg:script """
		var originalImage = ImageIO.read(this.openInputStream());
		var width = 640;
		var height = originalImage.getHeight() * width / originalImage.getWidth();
		if (height > 480) {
			height = 480;
			width = originalImage.getWidth() * height / originalImage.getHeight();
		}
		if (width > originalImage.getWidth()) {
			width = originalImage.getWidth();
		}
		if (height > originalImage.getHeight()) {
			height = originalImage.getHeight();
		}
		var resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		var g = resizedImage.createGraphics();
		g.drawImage(originalImage, 0, 0, width, height, null);
		g.dispose();
		g.setComposite(AlphaComposite.Src);
	
		var out = new ByteArrayOutputStream();
		ImageIO.write(resizedImage, "png", out);
		return out;
	""".

:GetPhotoSmall rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.ByteArrayOutputStream>];
	msg:method "GET";
	msg:query "small";
	msg:type "image/png";
	msg:imports <java:java.awt>;
	msg:imports <java:java.awt.image.BufferedImage>;
	msg:imports <java:javax.imageio.ImageIO>;
	msg:imports <java:java.io.ByteArrayOutputStream>;
	msg:script """
		var originalImage = ImageIO.read(this.openInputStream());
		var height = 150;
		var width = originalImage.getWidth() * height / originalImage.getHeight();
		if (width < 150) {
			width = 150;
			height = originalImage.getHeight() * width / originalImage.getWidth();
		}
		if (width > originalImage.getWidth()) {
			width = originalImage.getWidth();
		}
		if (height > originalImage.getHeight()) {
			height = originalImage.getHeight();
		}
		var resizedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
		var g = resizedImage.createGraphics();
		g.drawImage(originalImage, 0, 0, width, height, null);
		g.dispose();
		g.setComposite(AlphaComposite.Src);
	
		var out = new ByteArrayOutputStream();
		ImageIO.write(resizedImage, "png", out);
		return out;
	""".

# Users can view resized images or photos if they can view the image itself
:AuthorizeImageResize rdfs:subClassOf calli:IsAuthorized;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo>];
	msg:script  """
		if (query == "large" || query == "medium" || query == "small") {
			if (method == "GET" || method == "HEAD") {
				if (this.calliIsAuthorized(credential, method, null))
					return true;
			}
		}
		return proceed();
	""".

