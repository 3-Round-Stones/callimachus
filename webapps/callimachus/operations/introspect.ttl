# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

calli:introspect rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.ByteArrayOutputStream>];
	http:operation "introspect";
	http:type "application/xml";
	http:transform <../layout.ttl#template-xsl>;
	obj:imports <java:javax.xml.stream.XMLOutputFactory>;
	obj:imports <java:org.openrdf.repository.object.annotations.iri>;
	obj:script """
		var stream = new java.io.ByteArrayOutputStream();
		var out = XMLOutputFactory.newInstance().createXMLStreamWriter(stream);

		function printName(name1, method) {
			out.writeStartElement("a");
			if (method.isAnnotationPresent(iri)) {
				out.writeAttribute("href", method.getAnnotation(iri).value());
			}
			out.writeAttribute("name", name1);
			out.writeAttribute("id", name1);
			out.writeCharacters(name1);
			out.writeEndElement();
		}

		function printValue(key, value) {
			out.writeStartElement("li");
			out.writeStartElement("label");
			out.writeCharacters(key);
			out.writeEndElement();
			out.writeCharacters(" ");
			out.writeStartElement("span");
			out.writeCharacters(value);
			out.writeEndElement();
			out.writeEndElement();
		}

		function printProperty(pname, method) {
			var type = method.getGenericReturnType();
			var value = method.invoke(this, []);
			printName(pname, method);
			out.writeStartElement("ul");
			printValue("return type", type);
			printValue("has value", value);
			out.writeEndElement();
		}

		function printMethod(method) {
			var name1 = method.getName();
			var type = method.getGenericReturnType();
			printName(name1, method);
			out.writeCharacters("(");
			var panns = method.getParameterAnnotations();
			for (var i = 0; i < panns.length; i++) {
				if (i > 0) {
					out.writeCharacters(", ");
				}
				var href = null;
				var title = null;
				var pname = null;
				for (var j = 0; j < panns[i].length; j++) {
					if (panns[i][j].annotationType().equals(iri)) {
						href = panns[i][j].value();
					} else if (panns[i][j].annotationType().equals(org.openrdf.repository.object.annotations.name)) {
						pname = panns[i][j].value()[0];
					} else if (panns[i][j].annotationType().equals(org.openrdf.http.object.annotations.type)) {
						title = panns[i][j].value()[0];
					}
				}
				out.writeStartElement("a");
				if (href) {
					out.writeAttribute("href", href);
				}
				if (title) {
					out.writeAttribute("title", title);
				}
				if (pname) {
					out.writeCharacters(pname);
				} else if (href) {
					out.writeCharacters(href.replaceAll(".*[:/#](?=[^:/#]*$)", ""));
				} else {
					out.writeCharacters("arg" + (i + 1));
				}
				out.writeEndElement();
			}
			out.writeCharacters(")");
			out.writeStartElement("ul");
			var params = method.getGenericParameterTypes();
			for (var i = 0; i < params.length; i++) {
				printValue("parameter type", params[i]);
			}
			printValue("return type", type);
			out.writeEndElement();
		}

		var info = java.beans.Introspector.getBeanInfo(this.getClass(), java.lang.Object);
		var methods = info.getMethodDescriptors().concat();
		methods.sort(function(a,b){
			if (a.getName() < b.getName()) return -1;
			if (a.getName() > b.getName()) return 1;
			return 0;
		});
		var properties = info.getPropertyDescriptors().concat();
		properties.sort(function(a,b){
			if (a.getName() < b.getName()) return -1;
			if (a.getName() > b.getName()) return 1;
			return 0;
		});
		var operations = [];
		for (var i = methods.length - 1; i >= 0; i--) {
			var m = methods[i].getMethod();
			if (m.isAnnotationPresent(org.openrdf.http.object.annotations.method)
					|| m.isAnnotationPresent(org.openrdf.http.object.annotations.operation)) {
				operations.push(methods[i]);
				methods.splice(i, 1);
			}
		}
		for (var p = properties.length - 1; p >= 0; p--) {
			var read = properties[p].getReadMethod();
			var write = properties[p].getWriteMethod();
			if (read && write) {
				for (var i = 0; i < methods.length; i++) {
					var m = methods[i].getMethod();
					if (read.equals(m) || write.equals(m)) {
						methods.splice(i, 1);
					}
				}
			} else {
				properties.splice(p, 1);
			}
		}

		out.writeStartDocument();
		out.writeStartElement("html");
		out.writeStartElement("head");
		out.writeStartElement("title");
		out.writeCharacters(this.resource.localName + " Introspection");
		out.writeEndElement();
		out.writeStartElement("base");
		out.writeAttribute("href", this.resource);
		out.writeEndElement();
		out.writeEndElement();
		out.writeStartElement("body");

		out.writeStartElement("ul");
		out.writeAttribute("class", "aside");
		out.writeStartElement("li");
		out.writeStartElement("label");
		out.writeCharacters("Operations");
		out.writeEndElement();
		out.writeStartElement("ul");
		for (var o = 0; o < operations.length; o++) {
			out.writeStartElement("li");
			out.writeStartElement("a");
			out.writeAttribute("href", "#" + operations[o].getName());
			out.writeCharacters(operations[o].getName());
			out.writeEndElement();
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEndElement();
		out.writeStartElement("li");
		out.writeStartElement("label");
		out.writeCharacters("Properties");
		out.writeEndElement();
		out.writeStartElement("ul");
		for (var p = 0; p < properties.length; p++) {
			var name1 = properties[p].getName();
			var method = properties[p].getReadMethod();
			out.writeStartElement("li");
			out.writeStartElement("a");
			out.writeAttribute("href", "#" + name1);
			out.writeCharacters(name1);
			out.writeEndElement();
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEndElement();
		out.writeStartElement("li");
		out.writeStartElement("label");
		out.writeCharacters("Methods");
		out.writeEndElement();
		out.writeStartElement("ul");
		for (var m = 0; m < methods.length; m++) {
			out.writeStartElement("li");
			out.writeStartElement("a");
			out.writeAttribute("href", "#" + methods[m].getName());
			out.writeCharacters(methods[m].getName());
			out.writeEndElement();
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEndElement();
		out.writeEndElement();

		out.writeStartElement("ul");
		for (var o = 0; o < operations.length; o++) {
			out.writeStartElement("li");
			printMethod.call(this, operations[o].getMethod());
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEmptyElement("hr");
		out.writeStartElement("ul");
		for (var p = 0; p < properties.length; p++) {
			var name1 = properties[p].getName();
			var method = properties[p].getReadMethod();
			out.writeStartElement("li");
			printProperty.call(this, name1, method);
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEmptyElement("hr");
		out.writeStartElement("ul");
		for (var m = 0; m < methods.length; m++) {
			out.writeStartElement("li");
			printMethod.call(this, methods[m].getMethod());
			out.writeEndElement();
		}
		out.writeEndElement();
		out.writeEndElement();
		out.writeEndElement();
		out.writeEndDocument();
		return stream;
	""".

