# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix :<#>.

################################
# Authorize Transaction
################################

# Transaction operations must be authenticated
audit:Transaction a owl:Class; msg:realm </accounts>.

# transcations are authorized by the user that made the change
:AuthorizeTransaction rdfs:subClassOf calli:IsAuthorized;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom [msg:matching </change/*>]];
	msg:sparql  """
		ASK {
			{
				# they created this transaction
				$this audit:contributor $credential
			} UNION {
				# they administer the user that did this
				$this audit:contributor [calli:administrator $credential]
			} UNION {
				# they are part of a group that administers the user that did this
				$this audit:contributor [calli:administrator [calli:member $credential]]
			}
		}
	""".

# transcations are authorized by the objects modified
:AuthorizeTransactionView rdfs:subClassOf calli:IsAuthorized;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom [msg:matching </change/*>]];
	msg:imports <java:org.openrdf.http.object.annotations.realm>;
	msg:script """
		function findAnnotatedClass(klass, ann) {
			if (klass.isAnnotationPresent(ann)) {
				return [klass];
			}
			var result = [];
			if (klass.getSuperclass()) {
				result = findAnnotatedClass(klass.getSuperclass(), ann);
			}
			var interfaces = klass.getInterfaces();
			for (var i = interfaces.length; i--;) {
				var face = findAnnotatedClass(interfaces[i], ann);
				for (var f = face.length; f--;) {
					for (var r = result.length; r--;) {
						if (result[r].isAssignableFrom(face[f])) {
							result.splice(r, 1); //# annotation overridden
						}
					}
					result.push(face[f]);
				}
			}
			return result;
		}
		if (proceed())
			return true;
		var reading = (method == "GET" || method == "HEAD" || method == "POST" && query == "discussion")
			&& (query == null || query == "view" || query == "discussion" || query == "history"
				|| query == "whatlinkshere" || query == "relatedchanges");
		if (!reading)
			reurn false;
		var iter = this.ListSubjectsOfTransaction().iterator();
		while (iter.hasNext()) {
			var subject = iter.next();
			if (!findAnnotatedClass(subject.getClass(), realm).length)
				continue; // class is not protected
			if (!subject.IsAuthorized(credential, "GET", "describe"))
				return false;
		}
		// if they can view the RDF of all of the subjects they can view this transaction
		return true;
	""".

# called from :AuthorizeTransactionView
:ListSubjectsOfTransaction rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom [msg:matching </change/*>]];
	msg:sparql  """
		SELECT DISTINCT ?subj
		WHERE {
			$this a audit:Transaction
			{
				GRAPH $this { ?subj ?pred ?obj }
			} UNION {
				GRAPH $this { [rdf:subject ?subj] }
			} UNION {
				$this audit:contained [rdf:subject ?subj]
			}
			OPTIONAL { ?subj a ?trans FILTER(?trans = audit:Transaction) }
			FILTER (!bound(?trans))
		}
	""".

