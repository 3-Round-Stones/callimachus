# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Composite>.

<Composite> a owl:Class;
    rdfs:label "Composite";
    rdfs:subClassOf <Serviceable>, calli:Composite;
    owl:equivalentClass </callimachus/Composite>, </callimachus/1.0/types/Composite>, </callimachus/1.3/types/Composite>;
    rdfs:isDefinedBy <../../ontology>.

################################
# GET describedby
################################

:GetRdfContainerDescription owl:intersectionOf ( <serviceable.ttl#GetRdfDescription>
        [owl:onProperty msg:target; owl:allValuesFrom <Composite>]);
    calli:title "RDF Describe";
    calli:rel "describedby";
    calli:method "GET";
    calli:query "describe";
    calli:requires calli:reader;
    calli:type "text/turtle", "application/ld+json;q=0.5", "application/rdf+xml;q=0.4";
    calli:header "Link:<http://www.w3.org/ns/ldp#IndirectContainer>;rel=\"type\"";
    calli:imports <java:org.callimachusproject.io.DescribeResult>;
    calli:imports <java:org.callimachusproject.io.FilteredGraphResult>;
    calli:script """
        var con = this.objectConnection;
        if (preferDescription && preferDescription.match(/^ *return *= *representation *;/)) {
            var m = preferDescription.match(/; *(include|omit) *= *"([^"]*)"/);
            if (m && m[1] == 'include') {
                var inc = m[2];
                var result = new FilteredGraphResult();
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMinimalContainer") >= 0) {
                    result.addResult(new DescribeResult(this.resource, con))
                        .addResult(this.FindMinimalContainer());
                } else if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMembership") >= 0) {
                    result.addResult(this.FindMembershipTriples());
                }
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMembership") < 0) {
                    result.omitPredicate(con.valueFactory.createURI("http://callimachusproject.org/rdf/2009/framework#hasComponent"));
                }
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferContainment") >= 0) {
                    result.addResult(this.FindContainmentTriples());
                }
                return result;
            } else if (m && m[1] == 'omit') {
                var omit = m[2];
                var result = new FilteredGraphResult();
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMinimalContainer") < 0) {
                    result.addResult(new DescribeResult(this.resource, con))
                        .addResult(this.FindMinimalContainer());
                } else if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMembership") < 0) {
                    result.addResult(this.FindMembershipTriples());
                }
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMembership") >= 0) {
                    result.omitPredicate(con.valueFactory.createURI("http://callimachusproject.org/rdf/2009/framework#hasComponent"));
                }
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferContainment") < 0) {
                    result.addResult(this.FindContainmentTriples());
                }
                return result;
            }
        }
        return new FilteredGraphResult()
            .addResult(new DescribeResult(this.resource, con))
            .addResult(this.FindMinimalContainer())
            .addResult(this.FindContainmentTriples());
    """.

:FindMinimalContainer rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX dcterms: <http://purl.org/dc/terms/>
        PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
        PREFIX ldp: <http://www.w3.org/ns/ldp#>
        PREFIX foaf:<http://xmlns.com/foaf/0.1/>
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            ?container foaf:primaryTopic $this;
                a ldp:IndirectContainer;
                dcterms:title ?label;
                ldp:membershipResource $this;
                ldp:hasMemberRelation calli:hasComponent;
                ldp:insertedContentRelation foaf:primaryTopic
        } WHERE {
            BIND (iri(concat(str($this), "?describe")) AS ?container)
            OPTIONAL {
                $this dcterms:title ?label
            } OPTIONAL {
                $this rdfs:label ?label
            } OPTIONAL {
                $this skos:prefLabel ?label
            } OPTIONAL {
                $this foaf:name ?label
            }
        }
    """.

:FindContainmentTriples rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX ldp: <http://www.w3.org/ns/ldp#>
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            ?container ldp:contains ?member
        } WHERE {
            $this calli:hasComponent ?component
            BIND (iri(concat(str($this), "?describe")) AS ?container)
            BIND (iri(concat(str(?component), "?describe")) AS ?member)
        }
    """.

:FindMembershipTriples rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            $this calli:hasComponent ?component
        } WHERE {
            $this calli:hasComponent ?component
        }
    """.

################################
# POST RDF
################################

:PostRdfData rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "POST";
    calli:query "describe";
    calli:requires calli:administrator;
    calli:expect "201-created";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.form.helpers.TripleInserter>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <Editable>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        //# Insert RDF DATA
        var local = rdfSlug && encodeURI(rdfSlug).replace(/%25(\\w\\w)/g, '%$1').replace(/%20/g, '+');
        var newCopy = this.insertComponentGraph(rdfData, rdfType, local);
        if (this.calliHasComponent.contains(newCopy))
            throw new Conflict("Resource " + newCopy + " already exists");
        if (!(newCopy instanceof Editable))
            throw new BadRequest("Resource is not Editable: " + newCopy);

        //# Add permissions and component membership
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.calliReader);
        newCopy.calliSubscriber.addAll(this.calliSubscriber);
        newCopy.calliEditor.addAll(this.calliEditor);
        newCopy.calliAdministrator.addAll(this.calliAdministrator);
        this.calliHasComponent.add(newCopy);

        var iter = this.FindCreator(newCopy).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            var jter = this.FindCreatablesOf(newCopy).iterator();
            if (!jter.hasNext())
                throw new Forbidden("You are not permitted to create this type of resource");
            while (jter.hasNext()) {
                var cls = jter.next();
                if (!this.isAuthorized(user.toString(), cls, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                    throw new Forbidden(user + " is not permitted to create " + cls + " resources");
                cls.VerifyCreate(newCopy);
            }
        }
        return newCopy + '?describe';
    """.

:rdfData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostRdfData;
    rdfs:range <java:java.io.InputStream>;
    calli:type "text/turtle", "application/ld+json;q=0.5", "application/rdf+xml;q=0.4".

:rdfSlug a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostRdfData;
    rdfs:range xsd:string;
    calli:header "Slug";
    calli:type "text/plain".

:rdfType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostRdfData;
    rdfs:range xsd:string;
    calli:header "Content-Type";
    calli:type "text/plain".

################################
# POST INSERT DATA
################################

:PostInsertData owl:intersectionOf ( <serviceable.ttl#PostDeleteInsert>
        [owl:onProperty msg:target; owl:allValuesFrom <Composite>]);
    calli:method "POST";
    calli:query "describe";
    calli:requires calli:administrator;
    calli:expect "201-created";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.form.helpers.EntityUpdater>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <Editable>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        //# Parse INSERT DATA
        var updater = new EntityUpdater(this.resource, true);
        var string = updater.parseUpdate(insertData);
        
        //# Verify input
        var location = updater.subject;
        if (location == this.resource) {
            //# PATCH itself
            updater.executeUpdate(string, con);
            this.touchRevision();
            //# FIXME we shouldn't need to touch anything
            var parent = this.SelectParentComposite();
            if (parent) {
                parent.touchRevision();
            }
            return null;
        }
        var newCopy = of.createObject(location, updater.getTypes(location));
        if (this.calliHasComponent.contains(newCopy))
            throw new Conflict("Resource " + newCopy + " already exists");
        if (!(newCopy instanceof Editable))
            throw new BadRequest("Resource is not Editable");

        //# Execute input
        updater.executeUpdate(string, con);

        //# Add permissions and component membership
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.calliReader);
        newCopy.calliSubscriber.addAll(this.calliSubscriber);
        newCopy.calliEditor.addAll(this.calliEditor);
        newCopy.calliAdministrator.addAll(this.calliAdministrator);
        this.calliHasComponent.add(newCopy);

        var iter = this.FindCreator(newCopy).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            var jter = this.FindCreatablesOf(newCopy).iterator();
            if (!jter.hasNext())
                throw new Forbidden("You are not permitted to create this type of resource");
            while (jter.hasNext()) {
                var cls = jter.next();
                if (!this.isAuthorized(user.toString(), cls, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                    throw new Forbidden(user + " is not permitted to create " + cls + " resources");
                cls.VerifyCreate(newCopy);
            }
        }
        var iter = updater.partners.iterator();
        while (iter.hasNext()) {
            var partner = iter.next();
            if (!partner.toString().equals(this.toString())) {
                con.getObject(partner).touchRevision(); // FIXME this shouldn't be needed
            }
        }
        return newCopy + '?describe';
    """.

################################
# Create
################################

:GetCreatorPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:query "create";
    calli:requires calli:contributor;
    calli:type "text/html";
    calli:imports <Creatable>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!(create instanceof Creatable)) {
            var createAlternate = this.FindCreatableVersion(create);
            if (!(createAlternate instanceof Creatable))
                throw new BadRequest("Cannot create: " + create);
            create = createAlternate;
        }
        return create.GetCreatePage(this);
    """.

:PostFactoryCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "create";
    calli:requires calli:contributor;
    calli:type "message/x-response";
    calli:imports <Creatable>;
    calli:imports <java:org.callimachusproject.io.MultipartParser>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.xml.XMLEventReaderFactory>;
    calli:script """
        if (!(create instanceof Creatable)) {
            var createAlternate = this.FindCreatableVersion(create);
            if (!(createAlternate instanceof Creatable))
                throw new BadRequest("Cannot create: " + create);
            create = createAlternate;
        }
        var ftype = type;
        var documentTag = null;
        var bio = new org.callimachusproject.io.LatencyInputStream(body);
        try {
            if (type && type.indexOf("multipart/form-data") == 0) {
                bio.mark(65536);
                var parser = new MultipartParser(bio);
                var file = parser.next();
                var headers = parser.getHeaders();
                var disposition = headers.get("content-disposition");
                if (disposition && disposition.indexOf("filename=") >= 0 && disposition.indexOf('filename="blob"') < 0) {
                    ftype = headers.get("content-type");
                    var fileName = disposition.replace(/.*filename="/g, '').replace(/".*/g, '');
                    var xml = ftype.indexOf("text/xml") == 0 || ftype.indexOf("application/xml") == 0;
                    if (xml || ftype.indexOf("application/octet-stream") == 0 || ftype.indexOf("application/x-") == 0) {
                        var mimetypes = new javax.activation.MimetypesFileTypeMap();
                        var mtype = mimetypes.getContentType(fileName);
                        if (!"application/octet-stream".equals(mtype)) {
                            ftype = mtype;
                        }
                    }
                    if (fileName && !location) {
                        var ns = this.toString();
                        if (ns.lastIndexOf('/') < ns.length - 1) {
                            ns = ns + '/';
                        }
                        var local = encodeURI(fileName).replace(/%25(\\w\\w)/g, '%$1').replace(/%20/g, '-');
                        location = this.objectConnection.objectFactory.createObject(ns + local);
                    }
                    bio = new org.callimachusproject.io.LatencyInputStream(file);
                } else { // not a file upload
                    bio.reset();
                }
            } else if (!ftype && location) {
                var mimetypes = new javax.activation.MimetypesFileTypeMap();
                ftype = mimetypes.getContentType(location.toString());
            }
            if (!ftype) {
                ftype = "application/octet-stream";
            } else if (ftype.indexOf("text/xml") == 0 || ftype.indexOf("application/xml") == 0 ||
                    ftype.indexOf("+xml") > 0) {
                bio.mark(65536);
                var xmlFactory = XMLEventReaderFactory.newInstance();
                var xml = xmlFactory.createXMLEventReader(createdUri, bio);
                if (!xml)
                    throw new BadRequest("Document cannot be empty");
                while (!xml.peek().isStartElement()) {
                    xml.next();
                }
                var qname = xml.nextTag().name;
                if (qname.namespaceURI) {
                    var ns = qname.namespaceURI;
                    if (ns.indexOf('#') < 0 && ns.lastIndexOf('/') < ns.length - 1 && ns.lastIndexOf(':') < ns.length - 1) {
                        ns = ns + '#';
                    }
                    var of = this.objectConnection.objectFactory;
                    documentTag = of.createObject(ns + qname.localPart);
                }
                bio.reset();
            }
            if (!location && (ftype.indexOf("application/rdf+xml") == 0
                    || ftype.indexOf("text/turtle") == 0)) {
                //# try to read location from RDF
                var subject = this.peekAtStatementSubject(bio, ftype, this.toString());
                if (subject && subject.indexOf('#') >= 0) {
                    subject = subject.substring(0, subject.indexOf('#'));
                }
                if (subject) {
                    location = this.objectConnection.objectFactory.createObject(subject);
                }
            }
        } catch (e if e.javaException) {
            throw new BadRequest(e.javaException);
        }
        if (!location)
            throw new BadRequest("No resource location provided");
        var creatorUri = this.toString();
        var createdUri = location.toString();
        var dest = createdUri.substring(0, createdUri.lastIndexOf('/', createdUri.length - 2) + 1);
        if (creatorUri != dest && creatorUri != dest.substring(0, dest.length - 1))
            throw new BadRequest("Resource " + createdUri + " URI must be nested under " + creatorUri);
        if (createdUri.search(/[\\s\\#\\?]/) >= 0 || createdUri.search(/^\\w+:\\/\\/\\S+/) != 0)
            throw new BadRequest("Fragement or name resources are not supported: " + createdUri);
        if (this.calliHasComponent.contains(location))
            throw new Conflict("Resource " + location + " already exists");
        var construct = create.LookupConstructor(documentTag, ftype.replace(/\\s*;.*/,''));
        var newCopy = construct.PostCreate(bio, location, ftype);
        if (!newCopy) throw new InternalServerError("Could not create " + location + " using " + construct);
        if (newCopy != location && this.calliHasComponent.contains(newCopy))
            throw new Conflict("Resource " + newCopy + " already exists");
        var iter = this.FindCreator(newCopy).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (!this.isAuthorized(user.toString(), construct, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                throw new Forbidden(user + " is not permitted to create " + construct + " resources");
        }
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.calliReader);
        newCopy.calliSubscriber.addAll(this.calliSubscriber);
        newCopy.calliEditor.addAll(this.calliEditor);
        newCopy.calliAdministrator.addAll(this.calliAdministrator);
        if (intermediate) {
            var revision = this.provWasGeneratedBy;
            this.calliHasComponent.add(newCopy);
            this.provWasGeneratedBy = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(newCopy);
        }
        construct.VerifyCreate(location);
        return { status:201, message:'Created', headers:{ location:newCopy.toString(), 'content-type':'text/plain' }, body:[newCopy.toString()] };
    """.

:body a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:create a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:GetCreatorPage :PostFactoryCreate :FindCreatableVersion)];
    calli:query "create";
    calli:type "text/uri-list".

:intermediate a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range xsd:boolean;
    calli:query "intermediate".

:location a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFactoryCreate;
    calli:query "resource";
    calli:type "text/uri-list".

:type a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range xsd:string;
    calli:header "Content-Type";
    calli:type "text/plain".

################################
# Delete
################################

:DeleteComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <java:org.openrdf.model.BNode>;
    calli:imports <java:org.openrdf.model.URI>;
    calli:imports <java:javax.tools.FileObject>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.getValueFactory();
        function removeTriples(subject, hash) {
            var stmts = con.getStatements(subject, null, null, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    con.remove(st.subject, st.predicate, st.object, []);
                    if (st.object instanceof BNode && !st.object.equals(subject)) {
                        removeTriples(st.object, hash);
                    } else if (st.object instanceof URI && !st.object.equals(subject)) {
                        if (st.object.stringValue().indexOf(hash) == 0) {
                            removeTriples(st.object, hash);
                        } else {
                            con.getObjectFactory().createObject(st.object).touchRevision();
                        }
                    }
                }
            } finally {
                stmts.close();
            }
        }
        //# delete subfolder contents first incase subfolders are in an index.ttl graph
        var components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component.DeleteComponents) {
                component.DeleteComponents();
            }
        }
        components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component.Delete) {
                component.Delete();
            } else {
                con.clear([component.resource]); //# clear graph
                removeTriples(component.resource, component.resource.stringValue() + '#'); //# follow blank and hash references
                if (component instanceof FileObject) {
                    component['delete'](); //# remove document
                }
            }
            components.remove();
        }
    """.

:DeleteComposite owl:intersectionOf ( <editable.ttl#DeleteIfNotUsed>
        [owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (<Editable> <Composite>)]]);
    calli:method "DELETE";
    calli:query "edit", "describe";
    calli:requires calli:editor;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:script """
        var size = this.calliHasComponent.size();
        if (size == 1)
            throw new Conflict(this.calliHasComponent.iterator().next() + " must be deleted first");
        if (size)
            throw new Conflict("The " + size + " child resources must be deleted first");
        return proceed();
    """.

################################
# Helper Messages
################################

:FindCreatablesOf rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        SELECT REDUCED ?creatable {
            $of a [rdfs:subClassOf* ?cls] .
            ?creatable owl:equivalentClass* ?cls .
            ?creatable a [rdfs:subClassOf* </callimachus/1.4/types/Creatable>]
        }
    """.

:of a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreatablesOf.

:FindCreatableVersion rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        SELECT ?creatable {
            ?creatable owl:equivalentClass* $create .
            ?creatable a [rdfs:subClassOf* </callimachus/1.4/types/Creatable>]
        } LIMIT 1
    """.

# find the user that will create $thing
:FindCreator rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
        }
    """.

:thing a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreator.

# find the user that created $thing if they are not otherwise editors
:FindContributor rdfs:subClassOf :FindCreator;
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
            FILTER NOT EXISTS {
                {
                    $this ?editor ?contributor
                } UNION {
                    $this ?editor [calli:member ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor [calli:member ?contributor]]
                }
                FILTER (?editor = calli:editor || ?editor = calli:administrator)
            }
        }
    """.
