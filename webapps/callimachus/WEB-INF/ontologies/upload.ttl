# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:PutContentType rdfs:subClassOf obj:Message.

:contentType a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain :PutContentType;
	rdfs:range xsd:string;
	http:header "Content-Type".

################################
# RDF Graph
################################

calli:NamedGraph a owl:Class.

:PutGraphDocument rdfs:subClassOf :PutContentType;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:realm calli:nobody;
	obj:imports <java:org.openrdf.rio.RDFFormat>;
	obj:imports calli:NamedGraph;
	obj:script """
		this.calliDeleteWebResource();
		var type = contentType;
		if (type.indexOf(';') > 0) {
			type = type.substring(0, type.indexOf(';'));
		}
		this.objectConnection.addDesignation(this, NamedGraph);
		this.objectConnection.add(rdfStream, this.toString(), RDFFormat.forMIMEType(type), [resource]);
	""".

:rdfStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutGraphDocument;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml;q=0.1", "text/turtle;q=0.1", "application/x-turtle;q=0.1".

################################
# Text File
################################

:PutTextDocument rdfs:subClassOf :PutContentType;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:realm calli:nobody;
	obj:imports calli:Template;
	obj:script """
		this.calliDeleteWebResource();
		var type = "urn:mimetype:" + contentType;
		if (type.indexOf(';') > 0) {
			type = type.substring(0, type.indexOf(';'));
		}
		this.objectConnection.addDesignation(this, type);
		var read;
		var cbuf = java.lang.reflect.Array.newInstance(java.lang.Character.TYPE, 1024);
		var out = this.openWriter();
		try {
			while ((read = textReader.read(cbuf)) >= 0) {
				out.write(cbuf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:textReader a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutTextDocument;
	rdfs:range <java:java.io.Reader>;
	http:type "text/html;q=0.1", "text/css;q=0.1", "text/javascript;q=0.1", "text/plain;q=0.1".

################################
# Binary File
################################

:PutBinaryDocument rdfs:subClassOf :PutContentType;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:cache-control "cache-range";
	http:realm calli:nobody;
	obj:script """
		this.calliDeleteWebResource();
		var type = "urn:mimetype:" + contentType;
		if (type.indexOf(';') > 0) {
			type = type.substring(0, type.indexOf(';'));
		}
		this.objectConnection.addDesignation(this, type);
		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = binaryStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:binaryStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutBinaryDocument;
	rdfs:range <java:java.io.InputStream>;
	http:type "image/png;q=0.1", "image/jpeg;q=0.1", "image/gif;q=0.1", "image/vnd.microsoft.icon;q=0.1", "application/pdf;q=0.1".

################################
# XSL File
################################

:PutXslDocument rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:cache-control "cache-range";
	http:realm calli:nobody;
	obj:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	obj:script """
		this.calliDeleteWebResource();
		this.objectConnection.addDesignation(this, "urn:mimetype:text/xsl");
		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = xslStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		HTTPObjectServer.resetAllCache();
	""".

:xslStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutXslDocument;
	rdfs:range <java:java.io.InputStream>;
	http:type "text/xsl;q=0.1".

################################
# Template File
################################

:PutXmlDocument rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:cache-control "cache-range";
	http:realm calli:nobody;
	obj:imports calli:Template;
	obj:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	obj:script """
		this.calliDeleteWebResource();
		this.objectConnection.addDesignation(this, Template);
		this.objectConnection.addDesignation(this, "urn:mimetype:application/xml");
		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = xmlStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		HTTPObjectServer.resetAllCache();
	""".

:xmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutXmlDocument;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/xml;q=0.1".

:PutXhtmlDocument rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:operation "calliwebapps";
	http:cache-control "cache-range";
	http:realm calli:nobody;
	obj:imports calli:Template;
	obj:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	obj:script """
		this.calliDeleteWebResource();
		this.objectConnection.addDesignation(this, Template);
		this.objectConnection.addDesignation(this, "urn:mimetype:application/xhtml+xml");
		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = xhtmlStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		HTTPObjectServer.resetAllCache();
	""".

:xhtmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PutXhtmlDocument;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/xhtml+xml;q=0.1".

################################
# DELETE
################################

calli:DeleteWebResource rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "DELETE";
	http:operation "calliwebapps";
	http:realm calli:nobody;
	obj:imports <java:org.openrdf.model.BNode>;
	obj:imports <java:org.openrdf.model.URI>;
	obj:script """
		var con = this.objectConnection;
		function removeTriples(subject) {
			var stmts = con.getStatements(subject, null, null, []);
			try {
				while (stmts.hasNext()) {
					var st = stmts.next();
					if (st.object instanceof BNode && !st.object.equals(subject)) {
						removeTriples(st.object);
					} else if (st.object instanceof URI && !st.object.equals(subject)) {
						var subj = subject.stringValue();
						var obj = st.object.stringValue();
						if (obj.startsWith(subj) && obj.charAt(subj.length()) == "#") {
							removeTriples(st.object);
						}
					}
					con.remove(st, []);
				}
			} finally {
				stmts.close();
			}
		}
		con.clear([this.resource]); //# clear graph
		removeTriples(this.resource); //# follow blank and hash references
		this['delete'](); //# remove document
	""".

