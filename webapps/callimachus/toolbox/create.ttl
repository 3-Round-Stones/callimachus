# 
#    Portions Copyright (c) 2011 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <../SchemaGraph>.

<../Creatable> a owl:Class;
    rdfs:label "Creatable";
    rdfs:subClassOf <../Serviceable>;
    rdfs:isDefinedBy </callimachus>.

:GetCreatePage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:javax.xml.stream.XMLEventReader>];
    calli:method "GET";
    calli:query "create";
    calli:realm </>;
    calli:type "application/xhtml+xml";
    calli:transform <../transforms/TransformPage>;
    calli:script """
        importClass(Packages.org.callimachusproject.server.exceptions.InternalServerError);
        if (!this.calliCreate || this.calliCreate.isEmpty())
            throw new InternalServerError("No create template");
        if (this.calliCreate.size() != 1)
            throw new InternalServerError("Multiple create templates");
        return this.calliCreate.iterator().next().calliConstructTemplate(this);
    """.

:GetCreatorPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:javax.xml.stream.XMLEventReader>];
    calli:method "GET";
    calli:query "create";
    calli:realm </>;
    calli:type "application/xhtml+xml";
    calli:transform <../transforms/TransformPage>;
    calli:imports <../Creatable>;
    calli:script """
        importClass(Packages.org.callimachusproject.server.exceptions.InternalServerError);
        importClass(Packages.org.callimachusproject.server.exceptions.BadRequest);
        if (!(create instanceof Creatable))
            throw new BadRequest("Cannot create this class here: " + create);
        if (!create.calliCreate || create.calliCreate.isEmpty())
            throw new InternalServerError("No create template");
        if (create.calliCreate.size() != 1)
            throw new InternalServerError("Multiple create templates");
        return create.calliCreate.iterator().next().calliConstructTemplate(this);
    """.

:PostFactoryCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <../Serviceable>];
    calli:method "POST";
    calli:query "create";
    calli:realm </>;
    calli:expect "201-created";
    calli:type "text/plain";
    calli:imports <../Creatable>;
    calli:script """
        importClass(Packages.org.callimachusproject.io.MultipartParser);
        importClass(Packages.org.callimachusproject.server.exceptions.BadRequest);
        importClass(Packages.org.callimachusproject.server.exceptions.Forbidden);
        if (!location)
            throw new BadRequest("No location provided");
        if (!(create instanceof Creatable))
            throw new BadRequest("Cannot create: " + create);
        var creatorUri = this.toString();
        var createdUri = location.toString();
        var dest = createdUri.substring(0, createdUri.lastIndexOf('/', createdUri.length - 2) + 1);
        if (creatorUri != dest && creatorUri != dest.substring(0, dest.length - 1))
            throw new BadRequest("Location URI must be nested");
        if (createdUri.search(/[\\s\\#\\?]/) >= 0 || createdUri.search(/^\\w+:\\/\\/\\S+/) != 0)
            throw new BadRequest("Fragement or name resources are not supported");
        var ftype = type;
        var bio = new org.callimachusproject.io.LatencyInputStream(body);
        if (type && type.indexOf("multipart/form-data") == 0) {
            bio.mark(1024);
            var parser = new MultipartParser(bio);
            var file = parser.next();
            var headers = parser.getHeaders();
            var disposition = headers.get("content-disposition");
            if (disposition && disposition.indexOf("filename=") >= 0) {
                ftype = headers.get("content-type");
                var xml = ftype == "text/xml" || ftype == "application/xml";
                if (xml || ftype == "application/octet-stream" || ftype.indexOf("application/x-") == 0) {
                    var fileName = disposition.replace(/.*filename="/g, '').replace(/".*/g, '');
                    var mimetypes = new javax.activation.MimetypesFileTypeMap();
                    var mtype = mimetypes.getContentType(fileName);
                    if (!"application/octet-stream".equals(mtype)) {
                        ftype = mtype;
                    }
                }
                bio = file;
            } else { // not a file upload
                bio.reset();
            }
        } else if (!ftype) {
            var mimetypes = new javax.activation.MimetypesFileTypeMap();
            ftype = mimetypes.getContentType(location.toString());
        }
        if (!ftype) {
            ftype = "application/octet-stream";
        }
        var construct = create.LookupConstructor(ftype);
        var newCopy = construct.PostCreate(bio, location, ftype);
        var iter = this.FindCreator(newCopy).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (!construct.calliIsAuthorized(user, "POST", "create"))
                throw new Forbidden("You are not permitted to create " + construct + " resources");
        }
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.SelectAllReaders());
        newCopy.calliEditor.addAll(this.SelectAllEditors());
        newCopy.calliAdministrator.addAll(this.SelectAllAdministrators());
        if (intermediate) {
            var revision = this.auditRevision;
            this.calliHasComponent.add(newCopy);
            this.auditRevision = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(newCopy);
        }
        return newCopy;
    """.

# POST ?create=/callimachus/File
:LookupConstructor rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <../Creatable>];
    msg:sparql """
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?class {
            {
                ?class rdfs:subClassOf+ $this; calli:type $type
                BIND (1 AS ?preference)
            } UNION {
                ?class rdfs:subClassOf+ $this; calli:type ?typ2
                FILTER (
                    (
                        (sameTerm($type,"application/javascript") || sameTerm($type,"text/javascript"))
                        && (sameTerm(?typ2,"application/javascript") || sameTerm(?typ2,"text/javascript"))
                    ) || (
                        (sameTerm($type,"application/xslt+xml") || sameTerm($type,"text/xsl"))
                        && (sameTerm(?typ2,"application/xslt+xml") || sameTerm(?typ2,"text/xsl"))
                    ) || (
                        (sameTerm($type,"image/x-png") || sameTerm($type,"image/png"))
                        && (sameTerm(?typ2,"image/x-png") || sameTerm(?typ2,"image/png"))
                    ) || (
                        (sameTerm($type,"image/pjpeg") || sameTerm($type,"image/jpeg"))
                        && (sameTerm(?typ2,"image/pjpeg") || sameTerm(?typ2,"image/jpeg"))
                    )
                )
                BIND (2 AS ?preference)
            } UNION {
                # boot strap graphs before calli:type triples are loaded
                BIND (<../GraphDocument> AS ?class)
                FILTER sameTerm($type,"text/turtle")
                BIND (3 AS ?preference)
            } UNION {
                BIND ($this AS ?class)
                BIND (4 AS ?preference)
            }
        } ORDER BY ?preference LIMIT 1
    """.

# override this method for subclass create methods
:PostCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <../Serviceable>];
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.UnsupportedMediaType>;
    calli:script """
        var template = this.calliCreate.iterator().next();
        if (!template)
            throw new InternalServerError("Cannot create " + this.toString() + " with " + type);
        if (type != "application/rdf+xml" && type.indexOf("application/rdf+xml;") != 0)
            throw new UnsupportedMediaType("File format is not recognized: " + type + " for " + location);
        var newCopy = template.calliCreateResource(body, this.toString(), location);
        newCopy = newCopy.objectConnection.addDesignation(newCopy, this.toString());
        return newCopy;
    """.

:body a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain [owl:unionOf (:PostCreate :PostFactoryCreate)];
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:create a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:GetCreatorPage :PostFactoryCreate)];
    rdfs:range <../Creatable>;
    calli:query "create".

:intermediate a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range xsd:boolean;
    calli:query "intermediate".

:location a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:PostCreate :PostFactoryCreate)];
    calli:query "location".

:type a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:LookupConstructor :PostCreate :PostFactoryCreate)];
    rdfs:range xsd:string;
    calli:header "Content-Type".

# find the user that will create $thing
:FindCreator rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
        }
    """.

:thing a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreator.

# find the user that created $thing if they are not otherwise editors
:FindContributor rdfs:subClassOf :FindCreator;
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            ?activity prov:used $thing; prov:wasAssociatedWith ?contributor
            FILTER NOT EXISTS {
                {
                    $this ?editor ?contributor
                } UNION {
                    $this ?editor [calli:member ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor [calli:member ?contributor]]
                }
                FILTER (?editor = calli:editor || ?editor = calli:administrator)
            }
        }
    """.

:SelectAllReaders rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?reader
        WHERE {
            {
                $this calli:reader ?reader
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:reader ?reader
            }
        }
    """.

:SelectAllEditors rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?editor
        WHERE {
            {
                $this calli:editor ?editor
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:editor ?editor
            }
        }
    """.

:SelectAllAdministrators rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?admin
        WHERE {
            {
                $this calli:administrator ?admin
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:administrator ?admin
            }
        }
    """.

