@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<local> a calli:LocalRealm;
	calli:origin </>;
	calli:domain </group/>.

:HasNoMaintainer rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom <Group>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:boolean];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality 1];
	obj:sparql """
		ASK {
			# this group is maintained by its members
			$this calli:maintainer $this

			# there are no members to maintain this
			OPTIONAL { $this calli:member ?member } FILTER (!bound(?member))

			# there is no user assigned to maintain this
			OPTIONAL { $this calli:maintainer [calli:name ?user] } FILTER (!bound(?user))

			# there is no member of another group that can maintain this
			OPTIONAL { $this calli:maintainer [calli:member ?adimn] } FILTER (!bound(?admin))
		}
	""".

:GetUserSetup rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom <Group>];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.InputStream>];
	http:method "GET";
	http:operation "usersetup";
	http:type "application/xhtml+xml";
	http:transform </callimachus/layout.ttl#TransformXhtml>;
	http:realm <local>;
	obj:imports <user-setup.xhtml>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:script """
		if (!this.HasNoMaintainer())
			throw new BadRequest("This service has already been setup");
		return user_setup_xhtml.calliConstruct(this, 'copy');
	""".

:PostUserSetup rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom <Group>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:method "POST";
	http:operation "usersetup";
	http:realm <local>;
	http:expect "201-created";
	obj:imports </user/>;
	obj:imports <../user/User>;
	obj:imports </accounts>;
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	obj:imports <java:org.apache.commons.codec.binary.Hex>;
	obj:imports <java:java.net.URLEncoder>;
	obj:script """
		if (!this.HasNoMaintainer())
			throw new BadRequest("This service has already been setup");
		if (!form.get("label"))
			throw new BadRequest("Missing label");
		if (!form.get("name"))
			throw new BadRequest("Missing name");
		if (!form.get("algorithm"))
			throw new BadRequest("Missing algorithm");
		if (!form.get("encoded"))
			throw new BadRequest("Missing encoded");
		var label = form.get("label")[0];
		var username = form.get("name")[0];
		var algorithm = form.get("algorithm")[0];
		var encoded = form.get("encoded")[0];
		if (algorithm != "MD5")
			throw new BadRequest("Unsupported algorithm");
		if (!encoded || encoded.length() < 32)
			throw new BadRequest("Invalid MD5 sum");
		var decoded = Hex.decodeHex(encoded.toCharArray());
		var uri = user + URLEncoder.encode(username).replaceAll("%20", "+").toLowerCase();
		var user = objectConnection.getObject(uri);
		if (user instanceof User)
			throw new Conflict("User already exists");
		user = objectConnection.addDesignation(user, User);
		user.calliName = username;
		user.calliAlgorithm = algorithm;
		user.calliEncoded = decoded;
		user.rdfsLabels.add(label);
		this.calliMembers.add(user);
		return uri;
	""".

:form a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :PostUserSetup;
	rdfs:range <java:java.util.Map>;
	http:type "application/x-www-form-urlencoded".

