@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

################################
# Realm
################################

<authority> a calli:DigestRealm;
	calli:origin <../>;
	calli:authName <../>;
	calli:domain <../>;
	calli:unauthorized <unauthorized.xhtml>;
	calli:forbidden <forbidden.xhtml>.

################################
# login
################################

# A generic URL that requires authorization
# Available to user when not logged in
:login rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue <authority>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:operation "login";
	http:realm <authority>;
	http:expect "303-see-other";
	http:type "text/uri-list";
	obj:script "if (referer) return referer".

:login-referer a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :login;
	rdfs:range xsd:string;
	http:header "Referer";
	obj:name "referer".

################################
# logout
################################

# Prompts the browser to login using different credentials
# Available to user when logged in
:logout rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue <authority>];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	http:operation "logout";
	http:type "message/x-response";
	obj:imports <java:org.apache.http.ProtocolVersion>;
	obj:imports <java:org.apache.http.message.BasicHttpResponse>;
	obj:script """
		var ver = new ProtocolVersion("HTTP", 1, 1);
		if (!authorization) { //# the browser must send invalid credentials to logout
			var resp = new BasicHttpResponse(ver, 401, "Unauthorized");
			var hd = 'Digest realm="' + calliAuthName + '", domain="' + protectionDomain()
				+ '", nonce="invalid", algorithm="MD5", qop="auth,auth-int"';
			resp.setHeader('WWW-Authenticate', hd);
			return resp;
		}
		var resp = new BasicHttpResponse(ver, 303, "See Other");
		var credential = findCredential(authorization);
		if (!credential && referer) { //# invalid credentials recieved
			resp.setHeader("Location", referer);
			return resp;
		} else if (!credential) { //# invalid credentials received
			resp.setHeader("Location", "/");
			return resp;
		}
		if (from == null) { //# valid credentials, still need to logout
			resp.setHeader("Location", this + "?logout&from=" + credential);
		} else if (from.equals(credential)) { //# no longer accepted
			return unauthorized(from);
		} else if (referer) { //# logged in using a different account
			resp.setHeader("Location", referer)
		} else { //# logged in using a different account
			resp.setHeader("Location", credential.toString())
		}
		return resp;
	""".

:logout-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :logout;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

:logout-referer a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :logout;
	rdfs:range xsd:string;
	http:header "Referer";
	obj:name "referer".

:logout-user a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :logout;
	rdfs:range calli:Credential;
	http:parameter "from";
	http:type "text/uri-list";
	obj:name "from".

################################
# authenticated
################################

# Redirection to the authorized user
# Used to display the currently authorized user
:authenticated rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue <authority>];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom calli:Credential];
	http:operation "authenticated";
	http:expect "303-see-other";
	http:type "text/uri-list";
	http:cache-control "max-age:3600";
	obj:script "return findCredential(authorization)".

:authenticated-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :authenticated;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

################################
# welcome
################################

# Redirection to the authorized user
# Used to welcome new users
:welcome rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue <authority>];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom calli:Credential];
	http:operation "welcome";
	http:realm <authority>;
	http:expect "303-see-other";
	http:type "text/uri-list";
	http:cache-control "max-age:3600";
	obj:script "return findCredential(authorization)".

:welcome-authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :welcome;
	rdfs:range xsd:string;
	http:header "Authorization";
	obj:name "authorization".

