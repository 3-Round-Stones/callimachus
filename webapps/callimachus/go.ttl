@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

:LookupAndGo rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <go>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:expect "302-see-other";
	msg:header "cache-control:no-store";
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <lookup>;
	msg:imports </diverted>;
	msg:script """
		function parseAbsoluteURI(string) {
			try {
				if (string.indexOf(":") > 0) {
					var uri = java.net.URI.create(string);
					if (uri.isAbsolute())
						return uri;
				}
			} catch (e) {
				return null;
			}
		}

		function redirectURL(uri) {
			uri = canonicalize(uri);
			var origin = uri.authority ? new java.net.URI(uri.scheme, uri.authority, "/", null, null).toString() : null;
			var iri = uri.toString();
			var present = con.hasStatement(vf.createURI(iri), null, null, []);
			var hosted = con.hasStatement(null, null, vf.createURI(origin + "diverted"), []);
			if (present && hosted && (uri.query || uri.fragment)) { //# self resolving IRI
				var url = origin + "diverted;" + URLEncoder.encode(q);
				if (query) {
					url = url + '?' + query;
				}
				return url;
			} else if (present && (uri.query || uri.fragment)) { //# IRI present in this RDF store
				var url = diverted.toString() + ";" + URLEncoder.encode(q);
				if (query) {
					url = url + '?' + query;
				}
				return url;
			} else { //# self resolving URL or unknown resource
				var url = q;
				if (query && url.indexOf('?') < 0 && url.indexOf('#') < 0) {
					url = url + '?' + query;
				}
				return url;
			}
		}

		function canonicalize(uri) {
			uri = uri.normalize();
			var sch = uri.scheme.toLowerCase();
			var frag = uri.fragment;
			if (uri.isOpaque()) {
				return new java.net.URI(sch, uri.schemeSpecificPart, frag);
			} else {
				var auth = uri.authority.toLowerCase();
				return new java.net.URI(sch, auth, uri.path, uri.query, frag);
			}
		}

		var con = this.objectConnection;
		var vf = con.valueFactory;
		var uri = parseAbsoluteURI(q);
		if (uri) { //# absolute URI redirect
			return redirectURL(uri);
		}
		var stmts = con.getStatements(null, RDFS.LABEL, vf.createLiteral(q), []);
		try { //# check if there is a resource with this exact label
			if (stmts.hasNext()) {
				var uri = stmts.next().subject;
				while (!(uri instanceof org.openrdf.model.URI) && stmts.hasNext()) {
					uri = stmts.next().subject;
				}
				if (uri instanceof org.openrdf.model.URI && !stmts.hasNext())
					return uri.stringValue();
			}
		} finally {
			stmts.close();
		}
		return lookup + "?q=" + URLEncoder.encode(q); //# list resources by label prefix
	""".

:q a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :LookupAndGo;
	rdfs:range xsd:string;
	msg:query "q".

:query a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :LookupAndGo;
	rdfs:range xsd:string;
	msg:query "query".

