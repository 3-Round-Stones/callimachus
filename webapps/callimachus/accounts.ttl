@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

################################
# Realm
################################

<AccountManager> rdfs:subClassOf <Viewable>, calli:AccountManager;
	rdfs:isDefinedBy </callimachus>;
	calli:view <accounts-view.xhtml>.

################################
# login
################################

:GetAuthorization rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <AccountManager>].

:authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :GetAuthorization;
	rdfs:range xsd:string;
	msg:header "Authorization".

# Redirection to the authorized user
# Used to login
:GetLoginPage rdfs:subClassOf :GetAuthorization;
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:query "login", "settings", "contributions";
	msg:realm </callimachus/manifest>;
	msg:expect "302-found";
	msg:header "cache-control:max-age:3600";
	msg:script """
		if ("settings" == query)
			return this.findCredential(authorization) + "?edit";
		if ("contributions" == query)
			return this.findCredential(authorization) + "?contributions";
		return this.findCredential(authorization).toString();
	""".

:query a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :GetLoginPage;
	rdfs:range xsd:string;
	msg:query "*".

# anybody with credentials can login and is welcome
:AuthorizeLoginPage owl:intersectionOf (calli:IsAuthorized
		[owl:onProperty msg:target; owl:allValuesFrom <AccountManager>]);
	msg:sparql  """
		ASK {
			$this calli:authNamespace [calli:hasComponent $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($query = "login" || $query = "settings" || $query = "contributions")
		}
	""".

################################
# logout
################################

# Prompts the browser to login using bogus credentials (to forget legitimate onces)
# Available to user when logged in
:GetLogout rdfs:subClassOf :GetAuthorization;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:query "logout";
	msg:type "message/x-response";
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:script """
		var ver = new ProtocolVersion("HTTP", 1, 1);
		if (authorization && authorization.indexOf('username="logout"') > 0) {
			//# bogus credentials received
			var resp = new BasicHttpResponse(ver, 303, "See Other");
			resp.setHeader("Location", "/");
			return resp;
		}
		//# the browser must send invalid credentials to logout
		var resp = new BasicHttpResponse(ver, 401, "Unauthorized");
		var hd = 'Digest realm="' + this.calliAuthName + '", domain="'
			+ this.protectionDomain() + '", nonce="logout", algorithm="MD5", qop="auth"';
		resp.setHeader('WWW-Authenticate', hd);
		return resp;
	""".

################################
# User forgot password
################################

:anybody a calli:AnybodyRealm.

# Linked from request password email
:GetForgotPasswordPage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <AccountManager>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:query "forgotpassword";
	msg:type "text/html";
	msg:header "cache-control:no-store";
	msg:realm :anybody;
	msg:imports <pages/forgot-password.xhtml>;
	msg:script """
		return forgot_password_xhtml.calliConstructHTML(this);
	""".

# Sends request for password reset emails
# Submitted by form in the unauthorized page
:PostForgotPassword rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <AccountManager>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "POST";
	msg:query "forgotpassword";
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	msg:imports <pages/mail-request-password.xhtml>;
	msg:imports <java:java.io.CharArrayWriter>;
	msg:imports <java:java.util.Random>;
	msg:imports <java:java.lang.Integer>;
	msg:imports <java:java.lang.System>;
	msg:script """
		if (!formEmail)
			throw new BadRequest("Missing Email");
		var iter = this.FindUsersByEmail(formEmail).iterator();
		if (!iter.hasNext()) {
			java.lang.System.err.println("No users with email " + formEmail + " found");
		}
		while (iter.hasNext()) {
			var user = iter.next();
			var ha1 = DigestUtils.md5Hex(user.calliEncoded);
			var nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt());
			var ha2 = DigestUtils.md5Hex(user.toString());
			var token = DigestUtils.md5Hex(ha1 + ":" + nonce + ":" + ha2);
			var qs = "?resetpassword&amp;nonce=" + nonce + "&amp;token=" + token;
			var body = mail_request_password_xhtml.calliConstructHTML(user);
			body = body.replace(/\\?resetpassword/g, qs);
			user.sendMessage(body, user.rdfsLabel.iterator().next() + " <" + formEmail + ">");
			java.lang.Thread.sleep(new java.util.Random().nextInt() % 2000 + 2000);
		}
	""".

:formEmail a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :PostForgotPassword;
	rdfs:range xsd:string;
	msg:type "text/plain".

# Looks up user by email address
# Used to request password reset
:FindUsersByEmail rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <AccountManager>];
	rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:User];
	msg:sparql  """
		SELECT REDUCED ?user
		WHERE {
			$this calli:authNamespace [calli:hasComponent ?user] .
			?user calli:email $email .
		}
	""".

:email a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :FindUsersByEmail;
	rdfs:range xsd:string.

