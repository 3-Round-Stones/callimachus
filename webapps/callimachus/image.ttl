# 
#    Copyright (c) 2011 Steve Battle and James Leigh, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix callimachus:<.>.
@prefix :<#>.

<Image> rdfs:subClassOf foaf:Image, calli:Viewable, calli:Editable ;
	calli:view <image.xhtml> ;
	calli:edit <image-edit.xhtml> ;
	calli:curator </group/admin> .

:GetImageCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <Image> ];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET" ;
	msg:query "create" ;
	msg:imports <image-create.xhtml> ;
	msg:script """
		return image_create_xhtml.calliConstructHTML(this, "copy");
	""".

:PostImageCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <Image> ];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "POST" ;
	msg:query "create" ;
	msg:expect "303-see-also" ;
	msg:type "text/uri-list";
	msg:realm </accounts> ;
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:imports <Image> ;
	msg:script """
		//# image and caption input (see below)
		var ds = new ByteArrayDataSource(input, "multipart/form-data") ;
		var multipart = new MimeMultipart(ds);
		var img = multipart.getBodyPart(0) ;
		var caption = multipart.getBodyPart(1).content ;

		//# image resource
		var local = ("" + URLEncoder.encode(img.fileName, "UTF-8")).replace(/%20/g, "+") ;
		var uri = this.toUri().resolve("/image/") + local ;
		var obj = this.objectConnection.getObject(uri) ;
		if (obj instanceof Image) throw new Conflict("Image already exists: " + uri) ;

		//# designate as <Image> and the relevant mimetype
		obj = this.objectConnection.addDesignation(obj, Image) ;
		obj = this.objectConnection.addDesignation(obj, "http://xmlns.com/foaf/0.1/Image") ;
		var type = img.contentType;
		if (type == "image/pjpeg") { //# IE
			type = "image/jpeg";
		}
		if (type == "image/x-png") { //# IE
			type = "image/png";
		}
		if (type != "image/png" && type != "image/jpeg" && type != "image/gif" && type != "image/vnd.microsoft.icon") {
			throw new BadRequest("Unsupported format: " + type);
		}
		obj = this.objectConnection.addDesignation(obj, "urn:mimetype:" + type) ;

		//# add the image label
		obj.rdfsLabels.add(img.fileName) ;

		//# add the image caption
		if (caption!="") obj.rdfsComments.add(caption);

		this.objectConnection.commit();

		//# load image data
		var file = img.getInputStream();
		var out = obj.PutImage(file) ;

		return obj + "?view";
	""".

:input a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PostImageCreate ;
	rdfs:range <java:java.io.InputStream> ;
	msg:type "multipart/form-data".

:local a calli:LocalRealm;
	calli:domain </image/>.

:PutImage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Image> ];
	rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom owl:Nothing];
	msg:method "PUT" ;
	msg:realm :local ;
	msg:script """
		this.calliMaintainers.addAll(this.FindContributors());
		var out = this.openOutputStream() ;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var read;
		try {
			while ((read = imageStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:imageStream a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PutImage ;
	rdfs:range <java:java.io.InputStream> ;
	msg:type "application/octet-stream" .

# find the user that created $this
:FindContributors rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Image>];
	msg:sparql  """
		SELECT DISTINCT ?scribe
		WHERE {
			GRAPH ?graph { $this a ?type }
			?graph audit:contributor ?scribe
		}
	""".

