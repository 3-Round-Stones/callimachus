# 
#    Copyright (c) 2012 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Book> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>;
    rdfs:label "Book";
    rdfs:comment "New books can be created from a folder";
    owl:equivalentClass </callimachus/Book>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/book.png>;
    calli:edit <../templates/book-edit.xhtml>;
    calli:create <../templates/book-create.xhtml>;
    calli:mediaType "application/docbook+xml";
    calli:documentTag <http://docbook.org/ns/docbook#book>.

# GET /books/main-article.docbook
:GetBookSource rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Book>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/docbook+xml";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# GET /books/main-article.docbook?docbook
:GetBookTransclusion rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Book>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:query "docbook";
    calli:rel "alternate";
    calli:requires calli:reader;
    calli:type "application/docbook+xml";
    calli:header "cache-control:no-cache";
    calli:post "../pipelines/docbook-inclusion.xpl?results\nContent-Location: {+0}\nContent-Type: application/docbook+xml".

# GET /books/main-article.docbook?view
:GetPage owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Book>]);
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:post "../pipelines/book-view.xpl?results\nContent-Location: {+0}\nContent-Type: application/docbook+xml".

# POST ?create=/callimachus/Book
:CreateBook owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Book> ]);
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/[_\\-\\+\\s]+/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Document);

        created.UploadBook(body);
        return created;
    """.

# PUT /books/main-article.docbook
:UploadBook rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Book>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:imports foaf:Document;
    calli:script """
        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = docbookStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        try {
            this.ValidateBook();
            this.CheckBook();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }
        this.touchRevision();
    """.

:docbookStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadBook;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/docbook+xml".

:ValidateBook rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Book>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:post "../schemas/docbookxi.rng?validate\nContent-Location: {+0}\nContent-Type: application/docbook+xml".

:CheckBook rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Book>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:post "../schemas/docbook.sch?validate\nContent-Location: {+0}\nContent-Type: application/docbook+xml".

