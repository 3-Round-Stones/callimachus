# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

<> a </callimachus/SchemaGraph>.

<Folder> a <Creatable>, owl:Class;
	rdfs:subClassOf <Composite>, <Viewable>, <Editable>, calli:Folder;
	rdfs:label "Folder";
	rdfs:comment "A folder of resources";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <folder.png>;
	calli:view <folder-view.xhtml>;
	calli:edit <folder-edit.xhtml>;
	calli:create <folder-create.xhtml>.

:RedirectToIndex rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:type "message/x-response";
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:script """
		var http11 = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(http11, 303, "Directory Index");
		var target = this.calliDescribedBy;
		if (target) {
			resp.addHeader("Location", target.toString());
		} else {
			resp.addHeader("Location", this.toString() + "?view");
		}
		return resp;
	""".

################################
# List folder contents
################################

:GetFolderFeed rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:query "feed";
	msg:type "application/sparql-results+xml";
	msg:header "cache-control:no-cache";
	msg:transform :TransformIntoAtom;
	msg:sparql """
		SELECT DISTINCT ?id ?totalResults ?title ?icon ?summary ?updated
				?author_uri ?author_name ?reader_uri ?reader_name ?contributor_uri ?contributor_name
				?editor_uri ?editor_name ?administrator_uri ?administrator_name
				(if(bound(?folder), ?id, ?folder) as ?link_href) # TODO append '?feed' to ?id
				(if(bound(?folder), "alternate", ?folder) as ?link_rel)
				(if(bound(?folder), "application/atom+xml", ?folder) as ?link_type)
				(?id as ?content_src)
				?content_type {
			{
				{
					SELECT ($this as ?id) (count(?part) as ?totalResults) {
						$this calli:hasComponent ?part
					} GROUP BY $this
				}
			} UNION {
				$this calli:hasComponent ?id
				FILTER (isIRI(?id))
			} OPTIONAL {
				?id skos:prefLabel ?title
			} OPTIONAL {
				?id foaf:name ?title
			} OPTIONAL {
				?id rdfs:label ?title
			} OPTIONAL {
				?id skosxl:literalForm ?title
			} OPTIONAL {
				?id dcterms:title ?title
			} OPTIONAL {
				?id rdfs:comment ?summary
			} OPTIONAL {
				?id a [calli:icon ?icon]
			} OPTIONAL {
				?id audit:revision ?revision . ?revision audit:committedOn ?updated
				OPTIONAL {
					?revision audit:contributor ?author_uri
					OPTIONAL {
						?author_uri rdfs:label ?author_name
					}
				}
			} OPTIONAL {
				?id calli:reader ?reader_uri
				OPTIONAL {
					?reader_uri rdfs:label ?reader_name
				}
			} OPTIONAL {
				?id calli:contributor ?contributor_uri
				OPTIONAL {
					?contributor_uri rdfs:label ?contributor_name
				}
			} OPTIONAL {
				?id calli:editor ?editor_uri
				OPTIONAL {
					?editor_uri rdfs:label ?editor_name
				}
			} OPTIONAL {
				?id calli:administrator ?administrator_uri
				OPTIONAL {
					?administrator_uri rdfs:label ?administrator_name
				}
			} OPTIONAL {
				?id a [calli:type ?content_type]
			} OPTIONAL {
				?id a ?folder
				FILTER (?folder = <Folder>)
			}
		} ORDER BY desc(?totalResults) ?id LIMIT 101 # itself + 100 components
	""".

:TransformIntoAtom rdfs:subClassOf msg:Message;
   rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
   rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
   msg:type "application/atom+xml";
   msg:xslt <styles/sparql-results-atom.xsl>.

:sparqlResult a owl:FunctionalProperty, owl:ObjectProperty;
   rdfs:domain :TransformIntoAtom;
   rdfs:range <java:java.io.InputStream>;
   msg:type "application/sparql-results+xml".

################################
# Export folder contents
################################

:DownloadFolderComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:query "export";
	msg:realm </callimachus/manifest>;
	msg:type "message/x-response";
	msg:header "cache-control:no-cache";
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:imports <java:org.apache.http.entity.InputStreamEntity>;
	msg:script """
		var http11 = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(http11, 200, "OK");
		var name = this.resource.localName;
		var filename = this.toUri().path.substring(1).replace(/\\//g, '-') + this.toUri().authority.replace(/:.*/,'') + '.car';
		resp.setHeader("Content-Disposition", 'attachment;filename="' + filename + '"');
		var baseURI = this.toString();
		if (this.calliHasComponent.isEmpty() || baseURI.charAt(baseURI.length - 1) != '/')
			return null;
		var component = this;
		var entity = new InputStreamEntity(new org.openrdf.http.object.util.ProducerStream(function(outputStream) {
			var carStream = new org.callimachusproject.io.CarOutputStream(outputStream);
			component.ExportComponents(baseURI, carStream);
			carStream.finish();
		}), -1);
		entity.contentType = "application/zip";
		resp.setEntity(entity);
		return resp;
	""".

:ExportComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:imports <Folder>;
	msg:imports <Composite>;
	msg:imports <File>;
	msg:imports <Class>;
	msg:script """
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var xf = new org.callimachusproject.io.RDFXMLStreamWriterFactory();
		function writeTo(triples, entryStream) {
			try {
				var writer = xf.createWriter(entryStream, component.toString());
				writer.startRDF();
				var namespaces = component.objectConnection.getNamespaces();
				while (namespaces.hasNext()) {
					var ns = namespaces.next();
					writer.handleNamespace(ns.getPrefix(), ns.getName());
				}
				while (triples.hasNext()) {
					var st = triples.next();
					var pred = st.predicate.toString();
					if (pred != "http://www.openrdf.org/rdf/2009/auditing#revision"
							&& pred != "http://www.openrdf.org/rdf/2011/keyword#phone") {
						writer.handleStatement(st);
					}
				}
				writer.endRDF();
			} finally {
				entryStream.close();
			}
		}
		var components = this.calliHasComponent.iterator();
		while (components.hasNext()) {
			var component = components.next();
			if (component.toString().indexOf(baseURI) != 0 || !component.auditRevision)
				continue;
			var name = component.toString().substring(baseURI.length);
			var time = component.auditRevision.getCommittedOn().toGregorianCalendar().getTimeInMillis();
			if (name.lastIndexOf('/') == name.length - 1 && component instanceof Folder) {
				//# Export Folder
				carStream.writeFolderEntry(name, time).close();
			} else if (component instanceof File) {
				//# Export File
				var content = component.openInputStream();
				if (content) {
					try {
						var entryStream = carStream.writeFileEntry(name, time, component.GetFileContentType());
						try {
							var read;
							while ((read = content.read(buf)) >= 0) {
								entryStream.write(buf, 0, read);
							}
						} finally {
							entryStream.close();
						}
					} finally {
						content.close();
					}
				} else if (component.objectConnection.hasStatement(null, null, null, false, [component.resource])) {
					//# Export Graph
					var triples = component.objectConnection.getStatements(null, null, null, false, [component.resource]);
					try {
						writeTo(triples, carStream.writeFileEntry(name, time, "application/rdf+xml"));
					} finally {
						triples.close();
					}
				}
			} else if (component instanceof Class) {
				//# Export Schema
				var triples = component.GetDescription();
				try {
					writeTo(triples, carStream.writeSchemaEntry(name, time, "application/rdf+xml"));
				} finally {
					triples.close();
				}
			} else {
				//# Export Triples
				var triples = component.GetDescription();
				try {
					writeTo(triples, carStream.writeResourceEntry(name, time, "application/rdf+xml"));
				} finally {
					triples.close();
				}
			}
			//# Export nested components
			if (component instanceof Composite) {
				component.ExportComponents(baseURI, carStream);
			}
		}
	""".

:baseURI a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :ExportComponents;
	rdfs:range xsd:string.

:carStream a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :ExportComponents;
	rdfs:range <java:org.callimachusproject.io.CarOutputStream>.

################################
# Import folder contents
################################

:GetFolderUploadPage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:query "import";
	msg:type "text/html";
	msg:header "cache-control:no-cache";
	msg:realm </callimachus/manifest>;
	msg:imports <pages/folder-import.xhtml>;
	msg:script """
		return folder_import_xhtml.calliConstructHTML(this, "import");
	""".

:UploadFolderComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
	msg:method "POST";
	msg:query "import";
	msg:realm </callimachus/manifest>;
	msg:expect "302-see-other";
	msg:imports <Composite>;
	msg:imports </callimachus>;
	msg:imports <java:org.openrdf.rio.RDFFormat>;
	msg:imports <java:org.openrdf.model.vocabulary.RDF>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.repository.object.annotations.iri>;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();
		function readFrom(entryStream, uri, graphs) {
			var inserter = new org.openrdf.repository.util.RDFInserter(con);
			inserter.enforceContext(graphs);
			var tracker = new org.callimachusproject.helpers.SubjectTracker(inserter, vf);
			var parser = new org.openrdf.rio.rdfxml.RDFXMLParser();
			parser.setValueFactory(vf);
			parser.setRDFHandler(tracker);
			parser.parse(entryStream, uri);
			if (tracker.isEmpty())
				throw new BadRequest("Missing resource information for: " + uri);
			if (!tracker.isSingleton())
				throw new BadRequest("Multiple resources for: " + uri);
			if (tracker.getSubject().toString() != uri)
				throw new BadRequest("Wrong subject for: " + uri);
		}
		var baseURI = this.toString();
		if (baseURI.lastIndexOf('/') != baseURI.length - 1) {
			baseURI = baseURI + '/';
		}
		var File = con.getObject(callimachus.toUri().resolve("/callimachus/File").toString());
		var SchemaGraph = vf.createURI(callimachus.toUri().resolve("/callimachus/SchemaGraph").toString());
		var bio = new java.io.BufferedInputStream(payload, 65536);
		var multipart = new org.callimachusproject.io.MultipartParser(bio);
		var inputStream;
		var dependency = new java.util.HashSet(this.FindComponentsWithExternalDependent());
		this.DeleteComponents(); //# remove existing components
		var iter = dependency.iterator();
		while (iter.hasNext()) {
			if (!con.hasStatement(null, null, iter.next().resource, true, []))
				iter.remove(); //# no longer a dependency 
		}
		while (inputStream = multipart.next()) {
			try {
				println("Importing folder content from: " + multipart.headers.get("content-disposition"));
				var name;
				var carStream = new org.callimachusproject.io.CarInputStream(inputStream);
				while (name = carStream.readEntryName()) {
					var uri = baseURI + name;
					var location = con.getObject(uri);
					var folder = null;
					var container = this.FindExistingContainer(location);
					if (!container) {
						container = folder = con.getObject(uri.substring(0, uri.lastIndexOf('/', uri.length - 2) + 1));
						if (!(container instanceof Composite)) {
							container = folder = this.DesignateAsFolder(container);
						}
					}
					var entryStream = carStream.getEntryStream();
					try {
						if (carStream.isFolderEntry()) {
							this.DesignateAsFolder(location);
							dependency.remove(location);
						} else if (carStream.isFileEntry()) {
							var type = carStream.getEntryType();
							container.PostFactoryCreate(entryStream, File, null, location, type);
							dependency.remove(location);
						} else if (carStream.isResourceEntry()) {
							readFrom(entryStream, uri, []);
							if (folder) {
								folder.calliHasComponent.add(location);
							}
							dependency.remove(location);
						} else if (carStream.isSchemaEntry()) {
							var graphURI = vf.createURI(uri + ".owl");
							con.clear([graphURI]);
							con.add(graphURI, RDF.TYPE, SchemaGraph, [graphURI]);
							readFrom(entryStream, uri, [graphURI]);
							if (folder) {
								folder.calliHasComponent.add(location);
							}
							dependency.remove(location);
						}
					} finally {
						entryStream.close();
					}
				}
			} finally {
				inputStream.close();
			}
		}
		if (!dependency.isEmpty())
			throw new BadRequest(dependency.size() + " required resource(s) not present: " + dependency.iterator().next());
		return this;
	""".

:payload a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :UploadFolderComponents;
	rdfs:range <java:java.io.InputStream>;
	msg:type "multipart/form-data".

:FindComponentsWithExternalDependent rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Local>];
	msg:sparql """
		SELECT ?component {
			$this calli:hasComponent+ ?component .
			?external ?dependent ?component
			FILTER (!isIRI(?external) || !regex(str(?external), str($this))) # TODO replace with strstarts
		}
	""".

:DeleteComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:imports <Composite>;
	msg:imports <java:org.openrdf.model.BNode>;
	msg:imports <java:org.openrdf.model.URI>;
	msg:imports <java:javax.tools.FileObject>;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();
		function removeTriples(subject, hash) {
			var stmts = con.getStatements(subject, null, null, []);
			try {
				while (stmts.hasNext()) {
					var st = stmts.next();
					if (st.object instanceof BNode && !st.object.equals(subject)) {
						removeTriples(st.object, hash);
					} else if (st.object instanceof URI && !st.object.equals(subject)) {
						if (st.object.stringValue().indexOf(hash) == 0) {
							removeTriples(st.object, hash);
						} else {
							con.getObjectFactory().createObject(st.object).touchRevision();
						}
					}
					con.remove(st, []);
				}
			} finally {
				stmts.close();
			}
		}
		var components = this.calliHasComponent.iterator();
		while (components.hasNext()) {
			var component = components.next();
			if (component instanceof Composite) {
				component.DeleteComponents();
			}

			con.clear([component.resource]); //# clear graph
			removeTriples(component.resource, component.resource.stringValue() + '#'); //# follow blank and hash references
			if (component instanceof FileObject) {
				component['delete'](); //# remove document
			}
			components.remove();
		}
	""".

:FindExistingContainer rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Composite>];
	msg:sparql """
		SELECT ?composite {
			?composite calli:hasComponent $component
		}
	""".

:component a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :FindExistingContainer.

:DesignateAsFolder rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Folder>];
	msg:imports <Folder>;
	msg:imports <Composite>;
	msg:script """
		var con = this.objectConnection;
		if (nonFolder instanceof Folder)
			return nonFolder;
		var uri = nonFolder.toString();
		var container = this.FindExistingContainer(nonFolder);
		if (!container) {
			container = con.getObject(uri.substring(0, uri.lastIndexOf('/', uri.length - 2) + 1));
			if (!(container instanceof Folder)) {
				container = this.DesignateAsFolder(container);
			}
		}
		var label = decodeURI(uri.substring(uri.lastIndexOf('/', uri.length - 2) + 1, uri.length - 1)).replace(/-/g, ' ');
		var rdfxml = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:calli="http://callimachusproject.org/rdf/2009/framework#"><calli:Folder rdf:about="' + uri.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;') + '"><rdfs:label>' + label.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;') + '</rdfs:label></calli:Folder></rdf:RDF>';
		var stream = new java.io.ByteArrayInputStream(new java.lang.String(rdfxml).getBytes());
		var folder = con.getObject(this.toUri().resolve("/callimachus/Folder").toString());
		return container.PostFactoryCreate(stream, folder, null, nonFolder, "application/rdf+xml");
	""".

:nonFolder a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :DesignateAsFolder.

