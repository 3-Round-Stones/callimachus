@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix keyword:<http://www.openrdf.org/rdf/2011/keyword#>.
@prefix :<#>.

<> a <../SchemaGraph>.

# anybody with credentials can look something up
# TODO change this to require calli:reader access
:AuthorizeSearchFolder owl:intersectionOf (calli:IsAuthorized
		[owl:onProperty msg:target; owl:allValuesFrom <../Realm>]);
	msg:sparql  """
		ASK {
			?accounts calli:authNamespace [calli:hasComponent $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER (substr($query,1,2) = "q=")
		}
	""".

:SearchDescription rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Realm>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "search";
	calli:rel "search";
	calli:type "application/opensearchdescription+xml";
	msg:script """
		var sb = [];
		sb.push('<?xml version="1.0" encoding="UTF-8"?>');
		sb.push('<OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/">');
		sb.push('<ShortName>' + this.rdfsLabel + '</ShortName>');
		sb.push('<Url type="application/atom+xml" template="' + this + '?q={searchTerms}"/>');
		sb.push('</OpenSearchDescription>');
		var xml = sb.join('\\n');
		return new java.io.ByteArrayInputStream(new java.lang.String(xml).getBytes("UTF-8"));
	""".

:SearchFolder rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Realm>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "q";
	calli:realm </>;
	calli:type "application/sparql-results+xml;q=0.1";
	calli:header "cache-control:no-store";
	calli:transform :TransformSearchFolder;
	calli:transform <../transforms/TransformIntoAtom>;
	msg:sparql  """
		SELECT * {
			{
				$this rdfs:label ?title
				BIND (concat(str($this),"?q=",encode_for_uri($q)) as ?id)
				BIND ("feed" as ?type)
			} UNION {
				$this audit:revision [audit:committedOn ?updated]
				BIND (concat(str($this),"?q=",encode_for_uri($q)) as ?id)
				BIND ("feed" as ?type)
			} UNION {
				{
					SELECT DISTINCT (max(?label) as ?title) (max(?comment) as ?summary) (max(?icon) as ?icon) (?url as ?id) (max(?modified) as ?updated) (max(?content_type) as ?content_type)
					WHERE {
						{
							?url keyword:phone ?soundex
							FILTER sameTerm(?soundex, keyword:soundex($q))
							FILTER (isIRI(?url))
							FILTER (
								strstarts(str(?url), str($this)) ||
								$this = </> && (
									EXISTS {
										{
											?realm a <../Origin>
											FILTER strstarts(str(?url), str(?realm))
										} UNION {
											?realm a <../Realm>
											FILTER strstarts(str(?url), str(?realm))
										} UNION {
											<../Serviceable> owl:equivalentClass rdfs:Resource
										}
									}
								)
							)
						} OPTIONAL {
							?url skos:prefLabel ?label
						} OPTIONAL {
							?url foaf:name ?label
						} OPTIONAL {
							?url rdfs:label ?label
						} OPTIONAL {
							?url skosxl:literalForm ?label
						} OPTIONAL {
							?url dcterms:title ?label
						}
						FILTER EXISTS {
							?url ?p ?string
							FILTER regex(?string, keyword:regex($q))
						}
						OPTIONAL { ?url a [calli:icon ?icon] }
						OPTIONAL { ?url rdfs:comment ?comment }
						OPTIONAL { ?url audit:revision ?revision
							OPTIONAL { ?revision audit:committedOn ?modified }
						} OPTIONAL {
							?id a [calli:type ?content_type]
						}
					}
					GROUP BY ?url
					ORDER BY ?title ?id ?icon
					LIMIT 100
				}
				FILTER (bound(?id))
				BIND ("entry" as ?type)
				BIND (concat(str(?id),"?view") as ?link_href)
				BIND ("alternate" as ?link_rel)
				BIND ("text/html" as ?link_type)
				BIND (?id as ?content_src)
			}
		}
	""".

:q a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :SearchFolder;
	rdfs:range xsd:string;
	calli:query "q".

:TransformSearchFolder rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Realm>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:type "application/xhtml+xml";
	calli:transform <../transforms/TransformLayout>;
	msg:xslt <search.xsl>.

:inputStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :TransformSearchFolder;
	rdfs:range <java:java.io.InputStream>;
	calli:type "application/sparql-results+xml".

