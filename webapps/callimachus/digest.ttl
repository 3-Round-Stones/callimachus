@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

################################
# Realm
################################

<DigestManager> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:DigestManager;
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/admin>;
    calli:view <digest-view.xhtml>;
    calli:edit <digest-edit.xhtml>;
    calli:create <digest-create.xhtml>.

################################
# login
################################

:GetLoginPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_login_xhtml; owl:hasValue <pages/digest-login.xhtml>];
    calli:method "GET";
    calli:query "login";
    calli:type "text/html";
    calli:script """
        return digest_login_xhtml.Construct(this, 'login');
    """.

:digest_login_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetLoginPage.

# Used to login
:GetLoginSuccessPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "login";
    calli:realm </>;
    calli:type "message/x-response";
    calli:script """
        return {
            status:303, statusText:"See Other",
            headers:{location:"/","content-type":"text/plain"},
            body:["welcome"]
        };
    """.

# anybody with credentials can login and is welcome
:AuthorizeLoginPage owl:intersectionOf (calli:IsAuthorized
        [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>]);
    msg:sparql  """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        ASK {
            $this calli:authNamespace [calli:hasComponent $credential]
            FILTER ($method = "GET" || $method = "HEAD")
            FILTER ($query = "login")
        }
    """.

################################
# Registration
################################

# link from invite email
:GetRegisterDigestUserPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_register_xhtml; owl:hasValue <pages/digest-register.xhtml>];
    calli:method "GET";
    calli:query "register";
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        var iter = this.FindUsersByEmail(registeringUserEmail).iterator();
        while (iter.hasNext()) {
            var registeringUser = iter.next();
            if (token == registeringUser.GetSecretToken(nonce))
                return digest_register_xhtml.Construct(this, 'register');
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:nonce a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "nonce".

:token a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "token".

:registeringUserEmail a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "email".

:digest_register_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetRegisterDigestUserPage.

# subitted from the user-register.xhtml page
:PostDigestUserRegistration rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "POST";
    calli:query "register";
    calli:script """
        var nonce = regForm.get("nonce") ? regForm.get("nonce")[0] : null;
        var token = regForm.get("token") ? regForm.get("token")[0] : null;
        var email = regForm.get("email") ? regForm.get("email")[0] : null;
        var password = regForm.get("password") ? regForm.get("password")[0] : null;
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        var iter = this.FindUsersByEmail(email).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (token == user.GetSecretToken(nonce)) {
                var uuid = java.util.UUID.randomUUID().toString();
                if (!user.calliPasswordDigest) {
                    user.calliPasswordDigest = this.objectConnection.getObject("urn:uuid:" + uuid);
                }
                //# write to blob identified by the uuid
                var out = user.calliPasswordDigest.openWriter();
                try {
                    out.write(password);
                } finally {
                    out.close();
                }
                user.GenerateNewSecret(); // invalid this invitation
                return;
            }
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:regForm a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostDigestUserRegistration;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

################################
# User forgot password
################################

# Linked from request password email
:GetForgotPasswordPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :forgot_password_xhtml; owl:hasValue <pages/forgot-password.xhtml>];
    calli:method "GET";
    calli:query "forgotpassword";
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:script """
        return forgot_password_xhtml.Construct(this, 'forgotpassword');
    """.

:forgot_password_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetForgotPasswordPage.

# Sends request for password reset emails
# Submitted by form in the unauthorized page
:PostForgotPassword rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    rdfs:subClassOf [owl:onProperty :mail_request_password_xhtml; owl:hasValue <pages/mail-request-password.xhtml>];
    calli:method "POST";
    calli:query "forgotpassword";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:java.io.CharArrayWriter>;
    calli:imports <java:java.util.Random>;
    calli:imports <java:java.lang.Integer>;
    calli:imports <java:java.lang.System>;
    calli:script """
        if (!formEmail)
            throw new BadRequest("Missing Email");
        var iter = this.FindUsersByEmail(formEmail).iterator();
        if (!iter.hasNext()) {
            println("No users with email " + formEmail + " found");
        }
        while (iter.hasNext()) {
            var user = iter.next();
            var ha1 = DigestUtils.md5Hex(user.calliEncoded);
            var nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt());
            var ha2 = DigestUtils.md5Hex(user.toString());
            var token = DigestUtils.md5Hex(ha1 + ":" + nonce + ":" + ha2);
            var qs = "?resetpassword&amp;nonce=" + nonce + "&amp;token=" + token + "&amp;username=" + user.calliName;
            var body = mail_request_password_xhtml.Construct(user);
            body = body.replace(/\\?resetpassword/g, qs);
            user.sendMessage(body, user.rdfsLabel.iterator().next() + " <" + formEmail + ">");
        }
        java.lang.Thread.sleep(new java.util.Random().nextInt() % 2000 + 2000);
    """.

:formEmail a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :PostForgotPassword;
    rdfs:range xsd:string;
    calli:type "text/plain".

:mail_request_password_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostForgotPassword.

# Looks up user by email address
# Used to request password reset
:FindUsersByEmail rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:User];
    msg:sparql  """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?user
        WHERE {
            $this calli:authNamespace [calli:hasComponent ?user] .
            ?user calli:email $email .
        }
    """.

:email a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :FindUsersByEmail;
    rdfs:range xsd:string.

################################
# User reset password
################################

# Linked from request password email
:GetResetPassword rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :reset_password_xhtml; owl:hasValue <pages/reset-password.xhtml>];
    calli:method "GET";
    calli:query "resetpassword";
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!nonce || !token || !username)
            throw new BadRequest("Missing nonce and/or token and/or username");
        var user = this.objectConnection.getObject(this.calliAuthNamespace + username);
        var ha1 = DigestUtils.md5Hex(user.calliEncoded);
        var ha2 = DigestUtils.md5Hex(user.toString());
        var hex = DigestUtils.md5Hex(ha1 + ":" + nonce + ":" + ha2);
        if (token != hex)
            throw new BadRequest("Request is No Longer Valid");
        return reset_password_xhtml.Construct(user, 'resetpassword');
    """.

:nonce a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetResetPassword;
    rdfs:range xsd:string;
    calli:query "nonce".

:token a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetResetPassword;
    rdfs:range xsd:string;
    calli:query "token".

:username a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetResetPassword;
    rdfs:range xsd:string;
    calli:query "username".

:reset_password_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetResetPassword.

# Confirms token and resets their password
:PostResetPassword rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    rdfs:subClassOf [owl:onProperty :mail_password_xhtml; owl:hasValue <pages/mail-password.xhtml>];
    calli:method "POST";
    calli:query "resetpassword";
    calli:header "cache-control:no-store";
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:java.io.CharArrayWriter>;
    calli:imports <java:java.util.Random>;
    calli:imports <java:java.lang.Integer>;
    calli:script """
        if (!resetForm.get('nonce') || !resetForm.get("token") || !resetForm.get("username"))
            throw new BadRequest("Missing nonce and/or token and/or username");
        var user = this.objectConnection.getObject(this.calliAuthNamespace + resetForm.get('username')[0]);
        var ha1 = DigestUtils.md5Hex(user.calliEncoded);
        var nonce = resetForm.get('nonce')[0];
        var ha2 = DigestUtils.md5Hex(user.toString());
        var token = DigestUtils.md5Hex(ha1 + ":" + nonce + ":" + ha2);
        if (token != resetForm.get("token")[0])
            throw new BadRequest("Request is No Longer Valid");
        var password = this.generatePassword();
        var decoded = user.calliName + ":" + this.calliAuthName + ":" + password;
        user.calliAlgorithm = "MD5";
        user.calliEncoded = DigestUtils.md5(new java.lang.String(decoded).getBytes("UTF-8"));
        var body = mail_password_xhtml.Construct(user);
        body = body.replace(/@@USERNAME@@/g, user.calliName);
        body = body.replace(/@@PASSWORD@@/g, password);
        user.sendMessage(body, user.rdfsLabel.iterator().next() + " <" + user.calliEmail + ">");
    """.

:resetForm a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostResetPassword;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

:mail_password_xhtml a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostResetPassword.

