# 
#    Portions Copyright (c) 2011 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:GetCreatePage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom [owl:unionOf (calli:Creator calli:Creatable)]];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:javax.xml.stream.XMLEventReader>];
	msg:method "GET";
	msg:query "create";
	msg:realm </callimachus/manifest>;
	msg:type "application/xhtml+xml";
	msg:transform </callimachus/styles/styles.ttl#TransformXhtml>;
	msg:header "cache-control:no-cache";
	msg:script <operations.js#getCreatePage>.

:PostFactoryCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creator];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
	msg:method "POST";
	msg:query "create";
	msg:realm </callimachus/manifest>;
	msg:expect "201-created";
	msg:type "text/plain";
	msg:script <operations.js#postFactoryCreate>.

# override this method for subclass create methods
:PostCreate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creatable];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
	msg:script <operations.js#postCreate>.

:body a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain [owl:unionOf (:PostCreate :PostFactoryCreate)];
	rdfs:range <java:java.io.InputStream>;
	msg:type "*/*".

:create a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain [owl:unionOf (:GetCreatePage :PostFactoryCreate)];
	rdfs:range calli:Creatable;
	msg:query "create".

:intermediate a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :PostFactoryCreate;
	rdfs:range xsd:boolean;
	msg:query "intermediate".

:location a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain [owl:unionOf (:PostCreate :PostFactoryCreate)];
	msg:query "location";
	msg:header "location".

# find the user that created $thing if they are not editors of $this
:IsCreatable rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creator];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
	msg:sparql  """
		ASK { $this a [calli:creates $creatable] }
	""".

:creatable a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :IsCreatable;
	rdfs:range calli:Creatable.

:IsCreateInUriSpace rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creatable];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
	msg:sparql  """
		ASK {
			$this calli:uriSpace ?space
			#TODO FILTER strstarts(str($createLocation), str(?space))
			FILTER regex(str($createLocation), str(?space))
		}
	""".

:createLocation a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :IsCreateInUriSpace.

:ConstructCreatorRelationship rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creator];
	rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <java:org.openrdf.model.Statement>];
	msg:sparql """
		CONSTRUCT {
			$this ?rel $that . $that ?rev $this
		} WHERE {
			$that a ?type
			{
				$this a [calli:createRel ?rel]
			} UNION {
				$this a [calli:createRev ?rev]
			}
		}
	""".

:that a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :ConstructCreatorRelationship.

:PropagatePermissions rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creator];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:script """
		newResource.calliEditors.addAll(this.FindContributor(newResource));
		newResource.calliReaders.addAll(this.calliReaders);
		newResource.calliEditors.addAll(this.calliEditors);
		newResource.calliAdministrators.addAll(this.calliAdministrators);
	""".

:newResource a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :PropagatePermissions.

# find the user that created $thing if they are not otherwise editors
:FindContributor rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creator];
	msg:sparql  """
		SELECT DISTINCT ?contributor
		WHERE {
			{
				audit:current-trx audit:contributor ?contributor
			} UNION {
				GRAPH ?graph { $thing a ?type }
				?graph audit:contributor ?contributor
			} OPTIONAL {
				{
					$this ?editor ?contributor
				} UNION {
					$this ?editor [calli:member ?contributor]
				}
				FILTER (?editor = calli:editor || ?editor = calli:administrator)
			}
			FILTER (!bound(?editor))
		}
	""".

:thing a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :FindContributor.

