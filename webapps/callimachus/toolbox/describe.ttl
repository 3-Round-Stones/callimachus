# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <../SchemaGraph>.

################################
# GET describedby
################################

:GetDescription rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
	calli:title "RDF Describe";
	calli:rel "describedby";
	calli:method "GET";
	calli:query "describe";
	calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
	calli:transform :TransformDescription;
	msg:script """
		var queue = [];
		queue.push(this.resource);
		var con = this.objectConnection;
		var base = this.resource.stringValue();
		var baseIsHash = base.charAt(base.length - 1) == '#';
		var stmts = con.getStatements(null, org.openrdf.model.vocabulary.RDFS.ISDEFINEDBY, this.resource, false, []);
		try {
			while (stmts.hasNext()) {
				queue.push(stmts.next().subject);
			}
		} finally {
			stmts.close();
		}
		return new org.openrdf.query.GraphQueryResult({
			close: function() {
				stmts.close();
			},
			getNamespaces: function() {
				var namespaces = con.getNamespaces();
				var map = new java.util.HashMap();
				while (namespaces.hasNext()) {
					var ns = namespaces.next();
					map.put(ns.getPrefix(), ns.getName());
				}
				return map;
			},
			hasNext: function() {
				while (!stmts.hasNext() && queue.length > 0) {
					stmts.close();
					stmts = con.getStatements(queue.shift(), null, null, false, []);
				}
				return stmts.hasNext();
			},
			next: function() {
				while (!stmts.hasNext() && queue.length > 0) {
					stmts.close();
					stmts = con.getStatements(queue.shift(), null, null, false, []);
				}
				var st = stmts.next();
				var uri = st.object.stringValue()
				if (st.object instanceof org.openrdf.model.URI) {
					if (uri.length > base.length && uri.indexOf(base) == 0) {
						var chr = uri.charAt(base.length);
						if (baseIsHash || chr == '#') {
							queue.push(st.object);
						}
					}
				} else if (st.object instanceof org.openrdf.model.Resource) {
					queue.push(st.object);
				}
				return st;
			},
			remove: function() {
				stmts.remove();
			},
		});
	""".

:TransformDescription rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:type "application/xhtml+xml";
	calli:transform <../transforms/TransformLayout>;
	msg:xslt <describe.xsl>.

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :TransformDescription;
	rdfs:range <java:java.io.InputStream>;
	calli:type "application/rdf+xml".

################################
# POST INSERT DATA
################################

:PostInsertData rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <../Local>];
	calli:method "POST";
	calli:query "describe";
	calli:realm </>;
	calli:expect "201-created";
	calli:type "text/plain";
	msg:imports <java:org.callimachusproject.form.helpers.TripleInserter>;
	msg:imports <java:org.openrdf.query.parser.sparql.SPARQLParser>;
	msg:imports <java:org.openrdf.query.algebra.InsertData>;
	msg:imports <java:org.callimachusproject.form.helpers.StatementExtractor>;
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
	msg:imports <../Local>;
	msg:script """
		var con = this.objectConnection;
		var vf = con.valueFactory;
		var of = con.objectFactory;

		//# Parser INSERT DATA
		var parser = new SPARQLParser();
		var string = new java.lang.String(insertData.toByteArray(), "UTF-8");
		var parsed = parser.parseUpdate(string, this.toString());
		if (parsed.getUpdateExprs().isEmpty())
			throw new BadRequest("No input");
		if (parsed.getUpdateExprs().size() > 1)
			throw new BadRequest("Multiple update statements");
		var updateExpr = parsed.getUpdateExprs().get(0);
		if (!(updateExpr instanceof InsertData))
			throw new BadRequest("Not an INSERT DATA statement");
		var insertExpr = updateExpr.getInsertExpr();
		var inserter = new TripleInserter(con);
		inserter.startRDF();
		insertExpr.visit(new StatementExtractor(inserter, vf));
		inserter.endRDF();
		
		//# Verify input
		if (inserter.isEmpty())
			throw new BadRequest("Missing Information");
		if (!inserter.isSingleton())
			throw new BadRequest("Only one entity can be inserted per request");
		var location = inserter.subject;
		if (this.toString() != location.namespace)
			throw new BadRequest("Can only created nested components here");
		var newCopy = of.createObject(location, inserter.getTypes(location));
		if (!(newCopy instanceof Local))
			throw new BadRequest("Resource is not Local");
		var iter = this.FindCreator(newCopy).iterator();
		while (iter.hasNext()) {
			var user = iter.next();
			var jter = inserter.allTypes.iterator();
			while (jter.hasNext()) {
				var type = jter.next();
				var cls = con.getObject(type);
				if (cls.calliIsAuthorized && !cls.calliIsAuthorized(user, "POST", "create"))
					throw new Forbidden("You are not permitted to create " + cls + " resources");
				if (cls.touchRevision) {
					cls.touchRevision(); // Update class index
				}
			}
		}

		//# Add permissions and component membership
		newCopy.calliEditor.addAll(this.FindContributor(newCopy));
		newCopy.calliReader.addAll(this.SelectAllReaders());
		newCopy.calliEditor.addAll(this.SelectAllEditors());
		newCopy.calliAdministrator.addAll(this.SelectAllAdministrators());
		this.calliHasComponent.add(newCopy);
		var iter = inserter.getResources().iterator();
		while (iter.hasNext()) {
			var partner = iter.next();
			if (!partner.toString().equals(this.toString())) {
				con.getObject(partner).touchRevision(); // FIXME this shouldn't be needed
			}
		}
		return newCopy;
	""".

:insertData a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :PostInsertData;
	rdfs:range <java:java.io.ByteArrayOutputStream>;
	calli:type "application/sparql-update".

:IsResourceAlreadyPresent rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Composite>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality 1];
	msg:sparql """
		ASK { $resource a ?type }
	""".

:resource a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :IsResourceAlreadyPresent.

