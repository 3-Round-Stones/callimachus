@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix accounts:</accounts/>.
@prefix :<#>.

################################
# Realm
################################

<Accounts> rdfs:subClassOf calli:Creator, calli:Viewable, calli:DigestRealm;
	calli:creates <Group>;
	calli:createRel calli:authenticates;
	calli:view <accounts.xhtml>;
	calli:administrator </group/admin>. # can add/remove authenticating user groups

</accounts> a <Accounts>;
	rdfs:label "User accounts";
	calli:origin </>;
	calli:authName </>;
	calli:domain </>;
	calli:unauthorized <unauthorized.xhtml>;
	calli:forbidden <forbidden.xhtml>;
	calli:authenticates </group/admin>.

################################
# Group
################################

<Group> a calli:Creatable, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, calli:Group;
	rdfs:label "Group";
	rdfs:comment "Groups provide a way to assign permissions to a named set of users";
	calli:icon <group-favicon.png>;
	msg:realm </accounts>; # Group operations must be authorized
	calli:view <group.xhtml>;
	calli:edit <group-edit.xhtml>;
	calli:create <group-create.xhtml>;
	calli:uriSpace </group/>;
	calli:administrator </group/admin>. # admin members can edit any group

</group/admin> a calli:Group, <Group>;
	rdfs:label "admin".

################################
# User
################################

<User> a calli:Creatable, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, calli:User;
	rdfs:label "User";
	rdfs:comment "Username and password associated with an email address";
	msg:realm </accounts>; # User operations must be authorized
	calli:icon <user-favicon.png>;
	calli:create <user-create.xhtml>;
	calli:uriSpace </user/>;
	calli:view <user.xhtml>;
	calli:edit <user-edit.xhtml>;
	calli:administrator </group/admin>. # admin members can edit any user

################################
# login
################################

:GetAuthorization rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue </accounts>].

:authorization a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :GetAuthorization;
	rdfs:range xsd:string;
	msg:header "Authorization".

# Redirection to the authorized user
# Used to login
:GetLoginPage rdfs:subClassOf :GetAuthorization;
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:query "login", "settings", "contributions";
	msg:realm </accounts>;
	msg:expect "302-found";
	msg:header "cache-control:max-age:3600";
	msg:script """
		if ("settings" == query)
			return this.findCredential(authorization) + "?edit";
		if ("contributions" == query)
			return this.findCredential(authorization) + "?contributions";
		return this.findCredential(authorization).toString();
	""".

:query a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :GetLoginPage;
	rdfs:range xsd:string;
	msg:query "*".

################################
# logout
################################

# Prompts the browser to login using bogus credentials (to forget legitimate onces)
# Available to user when logged in
:GetLogout rdfs:subClassOf :GetAuthorization;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:query "logout";
	msg:type "message/x-response";
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:script """
		var ver = new ProtocolVersion("HTTP", 1, 1);
		if (authorization && authorization.indexOf('username="logout"') > 0) {
			//# bogus credentials received
			var resp = new BasicHttpResponse(ver, 303, "See Other");
			resp.setHeader("Location", "/");
			return resp;
		}
		//# the browser must send invalid credentials to logout
		var resp = new BasicHttpResponse(ver, 401, "Unauthorized");
		var hd = 'Digest realm="' + this.calliAuthName + '", domain="'
			+ this.protectionDomain() + '", nonce="logout", algorithm="MD5", qop="auth"';
		resp.setHeader('WWW-Authenticate', hd);
		return resp;
	""".

