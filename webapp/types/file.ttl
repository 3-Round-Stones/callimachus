# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <File>.

<File> a <Creatable>, owl:Class;
    rdfs:label "File";
    rdfs:comment "Upload a file with a known file type and extension.";
    rdfs:subClassOf <Viewable>, <Editable>, foaf:Document;
    owl:equivalentClass </callimachus/File>, </callimachus/1.0/types/File>, </callimachus/1.3/types/File>, </callimachus/1.4/types/File>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:create <../templates/file-create.xhtml>;
    calli:view <../templates/file-view.xhtml>;
    calli:edit <../templates/file-edit.xhtml>.

:DeleteFileIfNotUsed rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <File>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "DELETE";
    calli:requires calli:editor;
    calli:script """
        return this.DeleteIfNotUsed();
    """.

:ReplaceFileContent rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <File>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <java:org.openrdf.http.object.exceptions.ServiceUnavailable>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports foaf:Document;
    calli:script """
        if (modified) {
            //# dcterms:modified
            var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
            this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);
        }

        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = content.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }

        try {
            this.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }

        this.touchRevision();
    """.

:content a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :ReplaceFileContent;
    rdfs:range <java:java.io.InputStream>.

:contentType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :ReplaceFileContent;
    rdfs:range xsd:string.

:modified a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :ReplaceFileContent;
    rdfs:range xsd:boolean.
