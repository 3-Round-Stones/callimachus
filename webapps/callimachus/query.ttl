# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<NamedQuery> a calli:Creatable, <IndexClass>, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, calli:Copyable, calli:NamedQuery;
	rdfs:label "Named Query";
	rdfs:comment "Saved SPARQL queries";
	calli:icon <query.png>;
	calli:view <query-view.xhtml>;
	calli:edit <query-edit.xhtml>;
	calli:copy <query-copy.xhtml>;
	calli:create <query-create.xhtml>;
	calli:uriSpace </query/>;
	calli:administrator </group/admin>.

################################
# Google Chart Wire Protocol 0.6
################################

:GetResult rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <NamedQuery>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:query "tqx";
	msg:type "message/x-response";
	msg:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	msg:imports <java:org.openrdf.query.QueryLanguage>;
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:imports <java:org.apache.http.entity.InputStreamEntity>;
	msg:imports <java:org.apache.http.entity.StringEntity>;
	msg:imports <java:java.lang.IllegalArgumentException>;
	msg:imports <java:org.openrdf.query.MalformedQueryException>;
	msg:script """
		var map = {};
		if (tqx) {
			var pairs = tqx.split(';');
			for (var i = 0; i < pairs.length; i++) {
				var pair = pairs[i].split(':', 2);
				map[pair[0]] = pair[1];
			}
		}
		if (!map.responseHandler) {
			map.responseHandler = 'google.visualization.Query.setResponse';
		}
		if (!map.reqId) {
			map.reqId = '0';
		}
		var con = this.objectConnection;
		var query = this.calliSparql;
		if (query == null)
			throw new InternalServerError("SPARQL query is missing");
		var http11 = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(http11, 200, "OK");
		if (map.outFileName) {
			resp.setHeader("Content-Disposition", 'inline;filename="' + map.outFileName + '"');
		}
		var entity = null;
		try {
			var rs = con.prepareTupleQuery(QueryLanguage.SPARQL, query, this.toString()).evaluate();
			if (map.out == "html") {
				entity = new InputStreamEntity(this.TransformIntoHtml(rs), -1);
				entity.contentType = "text/html;charset=UTF-8";
			} else if (map.out == "csv") {
				entity = new InputStreamEntity(this.TransformIntoCSV(rs), -1);
				entity.contentType = "text/csv;charset=UTF-8";
			} else if (map.out == "tsv-excel") {
				entity = new InputStreamEntity(this.TransformIntoTSV(rs), -1);
				entity.contentType = "text/tab-separated-values;charset=UTF-16";
			} else {
				var out = this.TransformIntoWire(map.responseHandler, map.reqId, rs);
				entity = new InputStreamEntity(out, -1);
				entity.contentType = "text/javascript;charset=UTF-8";
			}
		} catch(e) {
			if (e.javaException) {
				e = e.javaException;
			}
			if (!map.out || map.out == "json") {
				var reason = null;
				var msg = e.message;
				if (!msg) {
					msg = e.toString();
				}
				msg = msg.replace(/\\n[\\s\\S]*/, '').replace(/'/g, '"');
				if (e instanceof MalformedQueryException) {
					reason = "reason:'invalid_query',message:'" + msg + "'";
				} else if (e instanceof IllegalArgumentException) {
					reason = "reason:'not_supported',message:'" + msg + "'";
				} else {
					reason = "reason:'internal_error',message:'" + msg + "'";
				}
				var sw = new java.io.StringWriter();
				var print = new java.io.PrintWriter(sw);
				e.printStackTrace(print);
				print.close();
				var trace = sw.toString().replace(/\\n/g, '\\\\n').replace(/'/g, '"');
				reason = reason + ",detailed_message:'" + trace + "'";
				var json = map.responseHandler + "({reqId:'" + map.reqId + "',status:'error',errors:[{" + reason + "}]})";
				var resp = new BasicHttpResponse(http11, 200, "Internal Server Error");
				entity = new StringEntity(json);
				entity.contentType = "text/javascript;charset=UTF-8";
				e.printStackTrace(); // log the error
			} else {
				throw new InternalServerError(e.toString(), e);
			}
		}
		resp.setHeader("Cache-Control", "no-store");
		resp.setEntity(entity);
		return resp;
	""".

:tqx a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :GetResult;
	rdfs:range xsd:string;
	msg:query "tqx".

################################
# XSL Transformation methods
################################

:TransformSparqlResult rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <NamedQuery>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>].

:xml a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :TransformSparqlResult;
	rdfs:range <java:org.openrdf.query.TupleQueryResult>;
	msg:type "application/sparql-results+xml".

:TransformIntoHtml rdfs:subClassOf :TransformSparqlResult;
	msg:type "text/csv;charset=UTF-8";
	msg:xslt <util/sparql-results-html.xsl>.

:TransformIntoCSV rdfs:subClassOf :TransformSparqlResult;
	msg:type "text/csv;charset=UTF-8";
	msg:xslt <util/sparql-results-csv.xsl>.

:TransformIntoTSV rdfs:subClassOf :TransformSparqlResult;
	msg:type "text/csv;charset=UTF-8";
	msg:xslt <util/sparql-results-tsv.xsl>.

:TransformIntoWire rdfs:subClassOf :TransformSparqlResult;
	msg:type "text/javascript;charset=UTF-8";
	msg:xslt <util/sparql-results-wire.xsl>.

:handler a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :TransformIntoWire;
	rdfs:range xsd:string.

:reqId a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :TransformIntoWire;
	rdfs:range xsd:string.

