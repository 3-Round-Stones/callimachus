# 
#    Copyright (c) 2012 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <XQuery>.

<XQuery> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, calli:XQuery;
    rdfs:label "XQuery file";
    rdfs:comment "An XQuery file.";
    owl:equivalentClass </callimachus/XQuery>, </callimachus/1.0/types/XQuery>, </callimachus/1.3/types/XQuery>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>, </auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/xquery.png>;
    calli:thumbnail <../images/xquery.svg>;
    calli:view <../templates/xquery-view.xhtml>;
    calli:edit <../templates/xquery-edit.xhtml>;
    calli:create <../templates/xquery-create.xhtml>;
    calli:mediaType "application/xquery".

# GET /xquery/my-xquery.xq
:GetXQuery rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <XQuery>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/xquery";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.openInputStream()".

# PUT /xquery/my-xquery.xq
:UploadXQuery rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <XQuery>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:script "return this.ReplaceFileContent(stream, 'application/xquery', true);".

:stream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :UploadXQuery;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xquery".

:ValidateXQuery owl:intersectionOf (<serviceable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <XQuery>]);
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.WebServer>;
    calli:script """
        var queryStream = this.openInputStream();
        try {
            var errors = this.getXQueryValidationErrors(queryStream);
            if (errors && errors.length > 0)
                throw new BadRequest(errors[0], errors.join('\\n'));
            if (this.IsLayout()) {
                WebServer.resetAllCache();
            }
        } finally {
            queryStream.close();
        }
    """.

:IsLayout rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <XQuery>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        ASK { ?realm calli:layout $this }
    """.

################################
# Execute XQuery               #
################################

# GET /xquery.xq?results
:GetResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <XQuery>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:query "results";
    calli:requires calli:reader;
    calli:type "application/xml";
    calli:header "cache-control:no-store,no-transform".

:queryGetParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

# POST /xquery.xq?results
:PostResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <XQuery>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "POST";
    calli:query "results";
    calli:requires calli:reader;
    calli:type "application/xml";
    calli:header "cache-control:no-store,no-transform".

:queryPostParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

:sourceLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    calli:header "Content-Location";
    calli:type "text/uri-list".

:sourcePort a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".
