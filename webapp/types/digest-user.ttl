#
# Copyright (c) 2014 3 Round Stones Inc., Some Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <DigestUser>.

<DigestUser> a owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:User;
    rdfs:label "Digest user";
    rdfs:comment "An HTTP Digest user is a username and password digest associated with an email address.";
    owl:equivalentClass </callimachus/User>, <User>, </callimachus/1.0/types/DigestUser>, </callimachus/1.3/types/DigestUser>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/user.png>;
    calli:thumbnail <../images/user.svg>;
    calli:view <../templates/digest-user-view.xhtml>;
    calli:edit <../templates/digest-user-edit.xhtml>.

:DeleteUser owl:intersectionOf ( <serviceable.ttl#Delete>
        [owl:onProperty msg:target; owl:allValuesFrom <User>]);
    calli:script """
        var iter = this.calliPasswordDigest.iterator();
        while (iter.hasNext()) {
            var file = iter.next();
            if (file.DeleteIfNotUsed) {
                file.DeleteIfNotUsed();
            } else {
                file['delete']();
            }
        }
        return proceed();
    """.

################################
# User password
################################

:GetUserPasswordPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestUser>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_password_xhtml; owl:hasValue <../pages/digest-password.xhtml>];
    calli:method "GET";
    calli:query "password";
    calli:requires calli:editor;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:script """
        return digest_password_xhtml.Construct(this, 'password');
    """.

:digest_password_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetUserPasswordPage.

:PostUserPassword rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestUser>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "POST";
    calli:query "password";
    calli:requires calli:editor;
    calli:expect "201-modified";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.apache.commons.codec.binary.Hex>;
    calli:script """
        var accounts = this.FindAuthenticationManager();
        var credential = accounts.getUserIdentifier("POST", authorization);
        //# read form
        var email = form.get("email") ? form.get("email")[0] : null;
        var current = form.get("current");
        var password = form.get("password");
        if (this.toString().equals(credential.toString())) {
            //# check if they know their own password
            if (!current)
                throw new BadRequest("What is your current password?");
            if (!accounts.isDigestPassword(authorization, current))
                throw new BadRequest("That is not your current password");
        }
        //# save email
        if (email && email != this.calliEmail) {
            this.calliEmail = email;
        }
        //# save password
        if (password && password.length) {
            this.calliPasswordDigest = accounts.changeDigestPassword(this.calliPasswordDigest, password);
        }
        return this + "?view";
    """.

:form a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostUserPassword;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

:authorization a owl:DatatypeProperty;
    rdfs:domain :PostUserPassword;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie".

:FindAuthenticationManager rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestUser>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom calli:AuthenticationManager];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?manager {
            ?namespace calli:hasComponent $this .
            ?manager calli:authNamespace ?namespace .
        } LIMIT 1
    """.

