# 
#    Copyright (c) 2011 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Photo>.

<Photo> a <Creatable>, owl:Class;
    rdfs:subClassOf <Image>;
    rdfs:label "Photo" ;
    rdfs:comment "JPEG image file";
    owl:equivalentClass </callimachus/Photo>, </callimachus/1.0/types/Photo>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/photo.png>;
    calli:thumbnail <../images/photo.svg>;
    calli:view <../templates/photo-view.xhtml> ;
    calli:edit <../templates/photo-edit.xhtml> ;
    calli:create <../templates/file-create.xhtml>;
    calli:mediaType "image/jpeg".

# GET /image.jpg
:GetPhoto rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "image/jpeg";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# POST ?create=/callimachus/Photo
:PostPhotoCreate owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Photo> ]);
    calli:imports <java:java.net.URLEncoder>;
    calli:imports <java:javax.mail.util.ByteArrayDataSource>;
    calli:imports <java:javax.mail.internet.MimeMultipart>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports <File>;
    calli:imports foaf:Image ;
    calli:script """
        var con = this.objectConnection;
        var vf = con.getValueFactory();

        //# image resource
        var obj = location;
        if (!obj)
            throw new BadRequest("Missing location");

        //# designate as <Image> and the relevant mimetype
        obj = con.addDesignation(obj, this.toString()) ;
        obj = con.addDesignation(obj, Image) ;

        //# add the image label
        var fileName = location.resource.localName;
        var label = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        con.add(obj.resource, RDFS.LABEL, vf.createLiteral(label), []);

        //# dcterms:created
        var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
        con.add(obj.resource, DCTERMS.CREATED, vf.createLiteral(now), []);

        var depiction = vf.createURI("http://xmlns.com/foaf/0.1/depiction");
        var small = vf.createURI(obj.resource.stringValue() + '?small');
        con.add(obj.resource, depiction, small, []);

        //# load image data
        var out = obj.PutImage(body) ;

        return obj;
    """.

:PutPhoto owl:intersectionOf (<image.ttl#PutImage>
        [owl:onProperty msg:target; owl:allValuesFrom <Photo>]);
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:script """
        //# dcterms:modified
        var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
        this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);

        var out = this.openOutputStream() ;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var read;
        try {
            while ((read = imageStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        this.touchRevision();
    """.

################################
# Resize Photo
################################

:GetPhotoLarge rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.awt.image.BufferedImage>];
    calli:method "GET";
    calli:query "large";
    calli:requires calli:reader;
    calli:type "image/png";
    calli:imports <java:javax.imageio.ImageIO>;
    calli:script """
        var stream = this.openInputStream();
        try {
            return this.ResizePhoto(ImageIO.read(stream), 1080);
        } finally {
            stream.close();
        }
    """.

:GetPhotoMedium rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.awt.image.BufferedImage>];
    calli:method "GET";
    calli:query "medium";
    calli:requires calli:reader;
    calli:type "image/png";
    calli:script """
        return this.ResizePhoto(this.GetPhotoLarge(), 480);
    """.

:GetPhotoSmall rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.awt.image.BufferedImage>];
    calli:method "GET";
    calli:query "small";
    calli:requires calli:reader;
    calli:type "image/png";
    calli:script """
        return this.ResizePhoto(this.GetPhotoMedium(), 240);
    """.

:GetPhotoThumbnail rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.awt.image.BufferedImage>];
    calli:method "GET";
    calli:query "thumbnail";
    calli:requires calli:reader;
    calli:type "image/png";
    calli:script """
        return this.ResizePhoto(this.GetPhotoSmall(), 64);
    """.

:ResizePhoto rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.awt.image.BufferedImage>];
    calli:imports <java:java.awt.AlphaComposite>;
    calli:imports <java:java.awt.RenderingHints>;
    calli:imports <java:java.awt.image.BufferedImage>;
    calli:imports <java:java.awt.image.ConvolveOp>;
    calli:imports <java:java.awt.image.Kernel>;
    calli:imports <java:java.io.ByteArrayOutputStream>;
    calli:script """
        var image = bufferedImage;
        var height = Math.min(minSize, image.getHeight());
        var width = image.getWidth() * height / image.getHeight();
        if (width < minSize) {
            width = Math.min(minSize,  image.getWidth());
            height = image.getHeight() * width / image.getWidth();
        }
        var blurKernel = java.lang.reflect.Array.newInstance(java.lang.Float.TYPE, 9);
        for (var i=0; i<9; i++) {
            blurKernel[i] = 1.0/9.0;
        }
        var map = new java.util.HashMap();
        map.put(RenderingHints.KEY_INTERPOLATION,
        RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        map.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
        map.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        var hints = new RenderingHints(map);
        var op = new ConvolveOp(new Kernel(3, 3, blurKernel), ConvolveOp.EDGE_NO_OP, hints);
        while (height < image.getHeight() && width < image.getWidth()) {
            var ratio = Math.floor((image.getHeight() - 1) / height);
            var w = width * ratio;
            var h = height * ratio;
            var resizedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
            var g = resizedImage.createGraphics();
            g.drawImage(op.filter(image, null), 0, 0, w, h, null);
            g.dispose();
            g.setComposite(AlphaComposite.Src);
            g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
            g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            image = resizedImage;
        }
    
        return image;
    """.

:bufferedImage a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :ResizePhoto;
    rdfs:range <java:java.awt.image.BufferedImage>.

:minSize a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :ResizePhoto;
    rdfs:range xsd:int.

