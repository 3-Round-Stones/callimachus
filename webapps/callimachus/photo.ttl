# 
#    Copyright (c) 2011 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Photo> a <Creatable>, owl:Class;
	rdfs:subClassOf <Image>;
	rdfs:label "Photo" ;
	rdfs:isDefinedBy </callimachus>;
	calli:realm </>;
	calli:author </group/users>,</group/staff>,</group/admin>;
	calli:icon <photo.png>;
	calli:view <photo-view.xhtml> ;
	calli:edit <photo-edit.xhtml> ;
	calli:create <file-create.xhtml>;
	calli:type "image/jpeg".

# GET /image.jpg
:GetPhoto rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:type "image/jpeg";
	calli:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# POST ?create=/callimachus/File
:LookupPhotoFile owl:intersectionOf (<toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <File>]);
	msg:script """
		if (type == "image/pjpeg" || type == "image/jpeg") {
			var uri = this.toUri().resolve("/callimachus/Photo").toString();
			return this.objectConnection.getObject(uri);
		}
		return proceed();
	""".

# POST ?create=/callimachus/Image
:LookupPhotoImage owl:intersectionOf (<toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <Image>]);
	msg:script """
		if (type == "image/pjpeg" || type == "image/jpeg") {
			var uri = this.toUri().resolve("/callimachus/Photo").toString();
			return this.objectConnection.getObject(uri);
		}
		return proceed();
	""".

# POST ?create=/callimachus/Photo
:PostPhotoCreate owl:intersectionOf (<toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Photo> ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.callimachusproject.server.exceptions.Conflict>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <File>;
	msg:imports foaf:Image ;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();

		//# image resource
		if (location instanceof File) {
			location = location.RemoveFile();
		}
		var obj = location;
		if (!obj)
			throw new BadRequest("Missing location");

		//# designate as <Image> and the relevant mimetype
		obj = con.addDesignation(obj, this.toString()) ;
		obj = con.addDesignation(obj, Image) ;

		//# add the image label
		var fileName = location.resource.localName;
		var label = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		con.add(obj.resource, RDFS.LABEL, vf.createLiteral(label), []);

		//# load image data
		var out = obj.PutPhoto(body) ;

		return obj;
	""".

:PutPhoto rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	calli:method "PUT";
	calli:realm </>;
	msg:script """
		var out = this.openOutputStream() ;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var read;
		try {
			while ((read = imageStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		this.touchRevision();
	""".

:imageStream a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PutPhoto ;
	rdfs:range <java:java.io.InputStream> ;
	calli:type "application/octet-stream" .

################################
# Resize Photo
################################

:GetPhotoLarge rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "large";
	calli:type "image/png";
	msg:script """
		return this.ResizePhoto(this.openInputStream(), 1080);
	""".

:GetPhotoMedium rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "medium";
	calli:type "image/png";
	msg:script """
		return this.ResizePhoto(this.GetPhotoLarge(), 480);
	""".

:GetPhotoSmall rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "small";
	calli:type "image/png";
	msg:script """
		return this.ResizePhoto(this.GetPhotoMedium(), 240);
	""".

:GetPhotoThumbnail rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "thumbnail";
	calli:type "image/png";
	msg:script """
		return this.ResizePhoto(this.GetPhotoSmall(), 64);
	""".

:ResizePhoto rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Photo> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:imports <java:java.awt>;
	msg:imports <java:java.awt.image>;
	msg:imports <java:javax.imageio.ImageIO>;
	msg:imports <java:java.io.ByteArrayOutputStream>;
	msg:script """
		var image = ImageIO.read(inputStream);
		var height = Math.min(minSize, image.getHeight());
		var width = image.getWidth() * height / image.getHeight();
		if (width < minSize) {
			width = Math.min(minSize,  image.getWidth());
			height = image.getHeight() * width / image.getWidth();
		}
		var blurKernel = java.lang.reflect.Array.newInstance(java.lang.Float.TYPE, 9);
		for (var i=0; i<9; i++) {
			blurKernel[i] = 1.0/9.0;
		}
		var map = new java.util.HashMap();
		map.put(RenderingHints.KEY_INTERPOLATION,
		RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		map.put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
		map.put(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		var hints = new RenderingHints(map);
		var op = new ConvolveOp(new Kernel(3, 3, blurKernel), ConvolveOp.EDGE_NO_OP, hints);
		while (height < image.getHeight() && width < image.getWidth()) {
			var ratio = Math.floor((image.getHeight() - 1) / height);
			var w = width * ratio;
			var h = height * ratio;
			var resizedImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
			var g = resizedImage.createGraphics();
			g.drawImage(op.filter(image, null), 0, 0, w, h, null);
			g.dispose();
			g.setComposite(AlphaComposite.Src);
			g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
			g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);
			g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
			image = resizedImage;
		}
	
		var out = new ByteArrayOutputStream();
		ImageIO.write(image, "png", out);
		return new java.io.ByteArrayInputStream(out.toByteArray());
	""".

:inputStream a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :ResizePhoto;
	rdfs:range <java:java.io.InputStream>.

:minSize a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :ResizePhoto;
	rdfs:range xsd:int.

# Users can view resized images or photos if they can view the image itself
:AuthorizeImageResize owl:intersectionOf (calli:IsAuthorized
		[owl:onProperty msg:target; owl:allValuesFrom <Photo>]);
	msg:script  """
		if (query == "large" || query == "medium" || query == "small" || query == "thumbnail") {
			if (method == "GET" || method == "HEAD") {
				if (this.calliIsAuthorized(credential, method, null))
					return true;
			}
		}
		return proceed();
	""".

