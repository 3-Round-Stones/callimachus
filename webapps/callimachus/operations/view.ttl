# 
#    Copyright (c) 2009-2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:GetViewPage rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:Viewable];
	rdfs:subClassOf [owl:onProperty obj:functionalObjectResponse;
		owl:allValuesFrom <java:java.io.InputStream>];
	http:rel "alternate";
	http:method "GET";
	http:operation "view";
	http:type "application/xhtml+xml";
	http:cache-control "must-revalidate";
	http:transform </callimachus/layout.ttl#TransformXhtml>;
	obj:imports calli:Template;
	obj:imports <java:org.callimachusproject.annotations.view>;
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:script """
		function findAnnotatedClass(klass, ann) {
			if (klass.isAnnotationPresent(ann)) {
				return klass;
			}
			var result;
			if (klass.getSuperclass()) {
				result = findAnnotatedClass(klass.getSuperclass(), ann);
			}
			var interfaces = klass.getInterfaces();
			for (var i = interfaces.length; i--;) {
				var face = findAnnotatedClass(interfaces[i], ann);
				if (face) {
					if (result && !result.isAssignableFrom(face)) {
						throw new InternalServerError("Conflicting templates for "
							+ result.simpleName +  " and " + face.simpleName);
					} else {
						result = face;
					}
				}
			}
			return result;
		}
		var annotated = findAnnotatedClass(this.getClass(), view);
		if (annotated) {
			var uri = annotated.getAnnotation(view).value();
			if (uri.length != 1)
				throw new InternalServerError("Multiple templates for " + annotated.simpleName);
			var template = this.objectConnection.getObject(Template, uri[0]);
			if (template instanceof Template)
				return template.calliConstruct(this, 'view');
			throw new InternalServerError("Missing template");
		}
		throw new InternalServerError("No template");
	""".

