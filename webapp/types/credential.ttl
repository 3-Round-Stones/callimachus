# 
#    Copyright (c) 2013 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Credential>.

<Credential> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:Credential;
    owl:equivalentClass </callimachus/1.0/types/Credential>, </callimachus/1.3/types/Credential>, </callimachus/1.4/types/Credential>;
    rdfs:label "Credential";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/credential.png>;
    calli:thumbnail <../images/credential.svg>;
    calli:view <../templates/credential-view.xhtml>;
    calli:edit <../templates/credential-edit.xhtml>;
    calli:create <../templates/credential-create.xhtml>.

:ValidateCredential owl:intersectionOf (<serviceable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <Credential>]);
    calli:script """
        this.resetCache();
        return proceed();
    """.

:DeleteCredential owl:intersectionOf ( <serviceable.ttl#Delete>
        [owl:onProperty msg:target; owl:allValuesFrom <Credential>]);
    calli:script """
        if (this.calliPasswordFile) {
            this.calliPasswordFile.DeleteIfNotUsed();
        }
        return proceed();
    """.

:PostCredentialPassword rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Credential>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:method "POST";
    msg:path "?password";
    calli:requires calli:editor;
    calli:expect "201-modified";
    msg:type "text/uri-list";
    calli:script """
        if (!this.calliPasswordFile) {
            this.calliPasswordFile = this.createSecretObject();
        }
        var writer = this.calliPasswordFile.openWriter();
        try {
            writer.write(base64Password);
        } finally {
            writer.close();
        }
        return this.toString();
    """.

:base64Password a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostCredentialPassword;
    rdfs:range xsd:string;
    msg:type "text/plain".
