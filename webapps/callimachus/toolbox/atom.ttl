# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

<> a <../SchemaGraph>.

################################
# List folder contents
################################

:GetFolderFeed rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "feed";
	calli:rel "contents";
	calli:type "application/sparql-results+xml";
	calli:header "cache-control:no-cache";
	calli:transform :TransformIntoAtom;
	msg:sparql """
		SELECT * {
			{
				{
					SELECT ($this as ?id) (count(?part) as ?totalResults) {
						$this calli:hasComponent ?part
					} GROUP BY $this
				}
				{
					{
						$this rdfs:label ?title
					} OPTIONAL {
						$this audit:revision ?revision . ?revision audit:committedOn ?updated
						OPTIONAL {
							?revision audit:contributor ?author_uri
							OPTIONAL {
								?author_uri rdfs:label ?author_name
							}
						}
					}
					BIND (concat(str(?id),"?changes") as ?link_href)
					BIND ("alternate" as ?link_rel)
					BIND ("application/atom+xml" as ?link_type)
					BIND (?title as ?collection_title)
					BIND (concat(str($this),"?feed") as ?collection_href)
				} UNION {
					[a <../Creatable>] calli:type ?collection_accept
				} UNION {
					[a <../CreatableIndex>] calli:type ?collection_accept
				}
			} UNION {
				{
					SELECT ?id {
						$this calli:hasComponent ?id
						FILTER (isIRI(?id))
					} ORDER BY ?id LIMIT 100
				}
				{
					{} OPTIONAL {
						?id skos:prefLabel ?title
					} OPTIONAL {
						?id foaf:name ?title
					} OPTIONAL {
						?id rdfs:label ?title
					} OPTIONAL {
						?id skosxl:literalForm ?title
					} OPTIONAL {
						?id dcterms:title ?title
					}
				} UNION {
					?id audit:revision ?revision . ?revision audit:committedOn ?updated
					OPTIONAL {
						?revision audit:contributor ?author_uri
						OPTIONAL {
							?author_uri rdfs:label ?author_name
						}
					}
				} UNION {
					?id rdfs:comment ?summary
				} UNION {
					?id a [calli:icon ?icon]
				} UNION {
					?id calli:reader ?reader_uri
					OPTIONAL {
						?reader_uri rdfs:label ?reader_name
					}
				} UNION {
					?id calli:contributor ?contributor_uri
					OPTIONAL {
						?contributor_uri rdfs:label ?contributor_name
					}
				} UNION {
					?id calli:editor ?editor_uri
					OPTIONAL {
						?editor_uri rdfs:label ?editor_name
					}
				} UNION {
					?id calli:administrator ?administrator_uri
					OPTIONAL {
						?administrator_uri rdfs:label ?administrator_name
					}
				} UNION {
					$this calli:hasComponent ?id
					BIND (?id as ?content_src)
					OPTIONAL {
						?id a [calli:type ?content_type]
						BIND (?id as ?link_href)
						BIND ("edit-media" as ?link_rel)
					}
				} UNION {
					$this calli:hasComponent ?id . ?id a <../Folder>
					BIND (concat(str(?id),"?feed") as ?link_href)
					BIND ("contents" as ?link_rel)
					BIND ("application/atom+xml" as ?link_type)
				} UNION {
					$this calli:hasComponent ?id . ?id a <../Folder>
					BIND (concat(str(?id),"?archive") as ?link_href)
					BIND (calli:archive as ?link_rel)
					BIND ("application/zip" as ?link_type)
				} UNION {
					$this calli:hasComponent ?id
					BIND (concat(str(?id),"?view") as ?link_href)
					BIND ("alternate" as ?link_rel)
					BIND ("text/html" as ?link_type)
				} UNION {
					$this calli:hasComponent ?id
					BIND (concat(str(?id),"?describe") as ?link_href)
					BIND ("describedby" as ?link_rel)
				}
			}
		} ORDER BY ?id
	""".

:GetFolderChanges rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	calli:method "GET";
	calli:query "changes";
	calli:rel "alternate";
	calli:type "application/sparql-results+xml";
	calli:transform :TransformIntoAtom;
	msg:sparql """
		SELECT * {
			{
				{
					SELECT ($this as ?id) (count(?part) as ?totalResults) {
						$this calli:hasComponent ?part
					} GROUP BY $this
				}
				{
					$this rdfs:label ?title
				} OPTIONAL {
					$this audit:revision ?revision . ?revision audit:committedOn ?updated
					OPTIONAL {
						?revision audit:contributor ?author_uri
						OPTIONAL {
							?author_uri rdfs:label ?author_name
						}
					}
				}
			} UNION {
				{
					SELECT ?id ?updated ?author_uri ?author_name {
						$this calli:hasComponent ?id
						FILTER (isIRI(?id))
						?id audit:revision ?revision . ?revision audit:committedOn ?updated
						OPTIONAL {
							?revision audit:contributor ?author_uri
							OPTIONAL {
								?author_uri rdfs:label ?author_name
							}
						}
					} ORDER BY desc(?updated) LIMIT 100
				}
				{
					{} OPTIONAL {
						?id skos:prefLabel ?title
					} OPTIONAL {
						?id foaf:name ?title
					} OPTIONAL {
						?id rdfs:label ?title
					} OPTIONAL {
						?id skosxl:literalForm ?title
					} OPTIONAL {
						?id dcterms:title ?title
					}
				} UNION {
					?id rdfs:comment ?summary
				} UNION {
					?id a [calli:icon ?icon]
				} UNION {
					$this calli:hasComponent ?id
					BIND (?id as ?content_src)
					OPTIONAL {
						?id a [calli:type ?content_type]
						BIND (?id as ?link_href)
						BIND ("edit-media" as ?link_rel)
					}
				} UNION {
					$this calli:hasComponent ?id
					BIND (concat(str(?id),"?view") as ?link_href)
					BIND ("alternate" as ?link_rel)
					BIND ("text/html" as ?link_type)
				}
			}
		} ORDER BY desc(?updated) ?id
	""".

:TransformIntoAtom rdfs:subClassOf msg:Message;
   rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Folder>];
   rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
   calli:type "application/atom+xml";
   msg:xslt <../transforms/sparql-results-atom.xsl>.

:sparqlResult a owl:FunctionalProperty, owl:ObjectProperty;
   rdfs:domain :TransformIntoAtom;
   rdfs:range <java:java.io.InputStream>;
   calli:type "application/sparql-results+xml".

