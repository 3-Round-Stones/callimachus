# 
#    Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix :<#>.

<> a <SchemaGraph>.

################################
# Authorize Transaction
################################

# Transaction operations must be authenticated
<Activity> rdfs:subClassOf <Viewable>, prov:Activity;
    rdfs:isDefinedBy </callimachus>;
    calli:realm </>.

# transcations are authorized by the user that made the change
:AuthorizeTransaction owl:intersectionOf (calli:IsAuthorized
        [owl:onProperty msg:target; owl:allValuesFrom <Activity>]);
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        ASK {
            {
                # they created this transaction
                $this prov:wasAssociatedWith $credential
            } UNION {
                # they administer the user that did this
                $this prov:wasAssociatedWith [calli:administrator $credential]
            } UNION {
                # they are part of a group that administers the user that did this
                $this prov:wasAssociatedWith [calli:administrator [calli:member $credential]]
            }
        }
    """.

# transcations are authorized by the objects modified
:AuthorizeTransactionView rdfs:subClassOf calli:IsAuthorized;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Activity>];
    calli:imports <java:org.callimachusproject.annotations.realm>;
    calli:script """
        function findAnnotatedClass(klass, ann) {
            if (klass.isAnnotationPresent(ann)) {
                return [klass];
            }
            var result = [];
            if (klass.getSuperclass()) {
                result = findAnnotatedClass(klass.getSuperclass(), ann);
            }
            var interfaces = klass.getInterfaces();
            for (var i = interfaces.length; i--;) {
                var face = findAnnotatedClass(interfaces[i], ann);
                for (var f = face.length; f--;) {
                    for (var r = result.length; r--;) {
                        if (result[r].isAssignableFrom(face[f])) {
                            result.splice(r, 1); //# annotation overridden
                        }
                    }
                    result.push(face[f]);
                }
            }
            return result;
        }
        if (proceed())
            return true;
        var reading = (method == "GET" || method == "HEAD" || method == "POST" && query == "discussion")
            && (query == null || query == "view" || query == "discussion" || query == "history"
                || query == "whatlinkshere" || query == "relatedchanges");
        if (!reading)
            reurn false;
        var iter = this.ListSubjectsOfTransaction().iterator();
        while (iter.hasNext()) {
            var subject = iter.next();
            if (!findAnnotatedClass(subject.getClass(), realm).length)
                continue; // class is not protected
            if (!subject.IsAuthorized(credential, "GET", "describe"))
                return false;
        }
        // if they can view the RDF of all of the subjects they can view this transaction
        return true;
    """.

# called from :AuthorizeTransactionView
:ListSubjectsOfTransaction rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Activity>];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?subj
        WHERE {
            GRAPH $this { $this prov:used ?subj }
            FILTER NOT EXISTS { ?subj a prov:Activity }
        }
    """.

# GET /activity/t001?view
:GetActivityView owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Activity>]);
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:type "text/html";
    calli:get <pipelines/activity-view.xpl?result&this=$0>.

