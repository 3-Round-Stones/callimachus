#
# Copyright (c) 2014 3 Round Stones Inc., Some Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <InvitedUser>.

<InvitedUser> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:User;
    owl:equivalentClass </callimachus/1.0/types/InvitedUser>, </callimachus/1.3/types/InvitedUser>, </callimachus/1.4/types/InvitedUser>;
    rdfs:label "Invited User";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/user.png>;
    calli:thumbnail <../images/user.svg>;
    calli:view <../templates/invited-user-view.xhtml>;
    calli:edit <../templates/invited-user-edit.xhtml>;
    calli:create <../templates/invited-user-create.xhtml>.

################################
# User invite
################################

rdfs:label a rdf:Property.

:PostUserInvite rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <InvitedUser>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "POST";
    msg:path "?invite";
    calli:requires calli:administrator;
    calli:imports <java:javax.mail.util.ByteArrayDataSource>;
    calli:imports <java:javax.mail.internet.MimeMultipart>;
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:imports <java:org.openrdf.http.object.exceptions.Conflict>;
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:java.net.URLEncoder>;
    calli:script """
        //# read form
        var subject = inviteForm.get('subject')[0];
        var body = inviteForm.get('body')[0];
        if (!this.calliEmail)
            throw new BadRequest("Missing email");
        if (!subject)
            throw new BadRequest("Missing subject");
        if (!body)
            throw new BadRequest("Missing message");
        if (body.indexOf('?register') < 0)
            throw new BadRequest("Missing register URL in message body");

        //# create registration link
        var random = java.security.SecureRandom.getInstance("SHA1PRNG");
        var nonce = java.lang.Integer.toHexString(random.nextInt());
        var token = this.getSecretToken(nonce);
        var queryString = "?register&token=" + token + "&nonce=" + nonce +
            "&email=" + encodeURIComponent(this.calliEmail);
        if (inviteForm.get('fullname')) {
            queryString += "&fullname=" + encodeURIComponent(inviteForm.get('fullname')[0]);
        }
        body = body.replace(/\\?register/g, queryString);

        //# email the link to the new user
        var fromUser = this.FindUserCreator();
        if (!fromUser || !fromUser.sendMessage)
            fromUser = this;
        fromUser.sendMessage(subject + '\\n' + body, this.rdfsLabel + " <" + this.calliEmail + ">");
        return {
            status: 303, message: "See Other",
            headers: {
                "Content-Type": "text/uri-list",
                "Location": this.toString()
            },
            body: this.toString()
        };

    """.

:inviteForm a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostUserInvite;
    rdfs:range <java:java.util.Map>;
    msg:type "application/x-www-form-urlencoded".

# find the user that created $this
:FindUserCreator rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <InvitedUser>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom calli:User];
    msg:sparql  """
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?contributor
        WHERE {
            $this prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor] .
            ?contributor a calli:User
        } LIMIT 1
    """.

