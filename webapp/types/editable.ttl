# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Editable>.

<Editable> a owl:Class;
    rdfs:label "Editable";
    rdfs:subClassOf <Serviceable>;
    owl:equivalentClass </callimachus/Editable>, </callimachus/1.0/types/Editable>, </callimachus/1.3/types/Editable>, </callimachus/1.4/types/Editable>;
    rdfs:isDefinedBy <../../ontology>.

################################
# GET LDPR
################################

:GetMetadata rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:method "GET";
    msg:path "?edit";
    calli:requires calli:editor;
    msg:type "text/turtle;q=0.6", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2";
    msg:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.GetRdfDescription(prefer, 'edit')".

:prefer a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetMetadata;
    rdfs:range xsd:string;
    msg:headerParam "Prefer";
    msg:type "text/plain".

################################
# edit-form
################################

:GetEditPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:rel "edit-form";
    msg:method "GET";
    msg:path "?edit";
    calli:requires calli:editor;
    msg:type "text/html";
    msg:header "cache-control:no-cache";
    msg:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
    calli:script """
        function findTemplate(obj, ann) {
            var annotated = findAnnotatedClass(obj.getClass(), ann);
            if (annotated) {
                var uri = annotated.getAnnotation(ann).value();
                if (uri.length != 1)
                    throw new InternalServerError("Multiple templates for " + annotated.simpleName);
                var template = obj.objectConnection.getObject(uri[0]);
                if (template.Construct)
                    return template;
                throw new InternalServerError("Missing template");
            }
            throw new InternalServerError("No template");
        }

        function findAnnotatedClass(klass, ann) {
            if (klass.isAnnotationPresent(ann)) {
                return klass;
            }
            var result;
            if (klass.getSuperclass()) {
                result = findAnnotatedClass(klass.getSuperclass(), ann);
            }
            var interfaces = klass.getInterfaces();
            for (var i = interfaces.length; i--;) {
                var face = findAnnotatedClass(interfaces[i], ann);
                if (face) {
                    if (!result || result.isAssignableFrom(face)) {
                        result = face;
                    } else if (!face.isAssignableFrom(result)) {
                        throw new InternalServerError("Conflicting templates for "
                            + result.simpleName +  " and " + face.simpleName);
                    }
                }
            }
            return result;
        }

        return findTemplate(this, Packages.calli.edit).Construct(this, 'edit');
    """.

:PutMetadata rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "PUT";
    msg:path "?edit";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.engine.helpers.SparqlUpdateFactory>;
    calli:imports <java:org.openrdf.http.object.exceptions.PreconditionRequired>;
    calli:script """
        if (!ifMatch) throw new PreconditionRequired("If-Match request header is required");
        var sparql = new SparqlUpdateFactory(this.resource + "?edit").replacement(this.GetMetadata(null), metaData);
        this.PostEdit(new java.io.ByteArrayInputStream(new java.lang.String(sparql).getBytes("UTF-8")));
    """.

:ifMatch a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PutMetadata;
    rdfs:range xsd:string;
    msg:headerParam "If-Match";
    msg:type "text/plain".

:metaData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PutMetadata;
    rdfs:range <java:org.openrdf.query.GraphQueryResult>;
    msg:type "text/turtle;q=0.6", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2".

:PostEdit rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "POST", "PATCH";
    msg:path "?edit";
    calli:requires calli:editor;
    calli:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
    calli:imports <java:org.openrdf.http.object.exceptions.ServiceUnavailable>;
    calli:imports <java:org.callimachusproject.form.helpers.EntityUpdater>;
    calli:imports <java:org.openrdf.query.impl.MapBindingSet>;
    calli:script """
        var con = this.getObjectConnection();
        var resource = this.getResource();

        var templates = [];
        var iter = this.FindEditTemplates().iterator();
        if (!iter.hasNext()) throw InternalServerError("No edit template for " + resource);
        while (iter.hasNext()) {
            templates.push(iter.next().getTemplateFor(resource.stringValue()));
        }

		var update = new EntityUpdater(resource, resource.stringValue());
        templates.forEach(function(template){
            var bindings = new MapBindingSet();
            bindings.addBinding("this", resource);
            // check delete clause against existing triples
            update.acceptDelete(template.evaluateGraph(bindings, con));
            update.acceptInsert(template.openQuery());
        });
		update.acceptInsert(resource, "http://www.w3.org/2004/02/skos/core#changeNote");
		update.acceptInsert(resource, "http://purl.org/dc/terms/modified");

		var sparqlUpdate = update.parseUpdate(inputStream);
		update.executeUpdate(sparqlUpdate, con);

        // insert clause uses triples that can be edited
        var postUpdate = new EntityUpdater(resource, resource.stringValue());
        templates.forEach(function(template){
            var bindings = new MapBindingSet();
            bindings.addBinding("this", resource);
            // check the structure
            postUpdate.acceptInsert(template.evaluateGraph(bindings, con));
        });
		postUpdate.acceptInsert(resource, "http://www.w3.org/2004/02/skos/core#changeNote");
		postUpdate.acceptInsert(resource, "http://purl.org/dc/terms/modified");
		postUpdate.analyzeUpdate(sparqlUpdate);

        try {
            this.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }

        var iter = update.partners.iterator();
        while (iter.hasNext()) {
            var partner = iter.next();
            if (!partner.toString().equals(this.toString())) {
                con.getObject(partner).touchRevision(); // FIXME this shouldn't be needed
            }
        }
        var parent = this.SelectParentComposite();
        if (parent) {
            parent.touchRevision();
        }
        this.touchRevision();
        return {
            status: 201, message: "Modified",
            headers: {
                "Content-Type": "text/uri-list",
                "Location": this.toString()
            },
            body: this.toString()
        };
    """.

:inputStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostEdit;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/sparql-update".

:FindEditTemplates rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Page>];
    msg:sparql """
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?edit {
            $this a [rdfs:subClassOf* ?cls] .
            ?editable owl:equivalentClass* ?cls .
            ?editable calli:edit ?edit
        }
    """.

################################
# DELETE
################################

:DeleteEditable rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "DELETE";
    msg:path "?edit";
    calli:requires calli:editor;
    calli:script "return this.DeleteIfNotUsed()".
