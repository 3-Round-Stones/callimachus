# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.

################################
# RDF Graph
################################

calli:put-graph rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:realm calli:nobody;
	obj:imports <java:org.openrdf.rio.RDFFormat>;
	obj:imports calli:NamedGraph;
	obj:groovy """
		String type = msg.contentType;
		if (type.contains(";")) {
			type = type.substring(0, type.indexOf(';'));
		}
		objectConnection.addDesignation(this, NamedGraph.class);
		objectConnection.clear(getResource());
		objectConnection.add(msg.body, toUri().toASCIIString(), RDFFormat.forMIMEType(type), getResource());
	""".

calli:put-graph-type a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-graph;
	rdfs:range xsd:string;
	http:header "Content-Type";
	obj:name "contentType".

calli:put-graph-body a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-graph;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/rdf+xml", "text/turtle", "application/x-turtle";
	obj:name "body".

calli:delete-graph rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "DELETE";
	http:realm calli:nobody;
	obj:groovy """
		objectConnection.removeDesignation(this, NamedGraph.class);
		objectConnection.clear(getResource());
	""".

################################
# Text File
################################

calli:put-text-file rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:realm calli:nobody;
	obj:groovy """
		def type = "urn:mimetype:" + msg.contentType;
		if (type.contains(";")) {
			type = type.substring(0, type.indexOf(';'));
		}
		objectConnection.addDesignations(msg.target, type);
		int read;
		char[] cbuf = new char[1024];
		Writer out = openWriter();
		try {
			while ((read = msg.body.read(cbuf)) >= 0) {
				out.write(cbuf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

calli:put-text-file-type a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-text-file;
	rdfs:range xsd:string;
	http:header "Content-Type";
	obj:name "contentType".

calli:put-text-file-body a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-text-file;
	rdfs:range <java:java.io.Reader>;
	http:type "text/html", "text/css", "text/javascript", "text/xsl";
	obj:name "body".

calli:delete-text-file rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom [owl:unionOf (<urn:mimetype:text/html> <urn:mimetype:text/css>
		<urn:mimetype:text/javascript> <urn:mimetype:text/xsl>)]];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "DELETE";
	http:realm calli:nobody;
	obj:groovy """
		delete()
		objectConnection.removeDesignations(msg.target,
			"urn:mimetype:text/html", "urn:mimetype:text/css",
			"urn:mimetype:text/javascript", "urn:mimetype:text/xsl");
	""".

################################
# Binary File
################################

calli:put-file rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "PUT";
	http:realm calli:nobody;
	obj:groovy """
		def type = "urn:mimetype:" + msg.contentType;
		if (type.contains(";")) {
			type = type.substring(0, type.indexOf(';'));
		}
		objectConnection.addDesignations(msg.target, type);
		int read;
		byte[] buf = new byte[1024];
		OutputStream out = openOutputStream();
		try {
			while ((read = msg.body.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

calli:put-file-type a owl:DatatypeProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-file;
	rdfs:range xsd:string;
	http:header "Content-Type";
	obj:name "contentType".

calli:put-file-body a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain calli:put-file;
	rdfs:range <java:java.io.InputStream>;
	http:type "application/xml", "image/png", "image/jpeg",
		"image/gif", "image/vnd.microsoft.icon";
	obj:name "body".

calli:delete-file rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:allValuesFrom [owl:unionOf (<urn:mimetype:application/xml>
		<urn:mimetype:image/png> <urn:mimetype:image/jpeg>
		<urn:mimetype:image/gif> <urn:mimetype:image/vnd.microsoft.icon>)]];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "DELETE";
	http:realm calli:nobody;
	obj:groovy """
		delete()
		objectConnection.removeDesignations(msg.target,
			"urn:mimetype:application/xml",
			"urn:mimetype:image/png", "urn:mimetype:image/jpeg",
			"urn:mimetype:image/gif", "urn:mimetype:image/vnd.microsoft.icon");
	""".

