#
# Copyright (c) 2014 3 Round Stones Inc., Some Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <DigestManager>.

################################
# Digest
################################

<DigestManager> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:DigestManager;
    owl:equivalentClass </callimachus/DigestManager>, </callimachus/1.0/types/DigestManager>, </callimachus/1.3/types/DigestManager>;
    rdfs:label "Digest manager";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:view <../templates/digest-view.xhtml>;
    calli:edit <../templates/digest-edit.xhtml>;
    calli:create <../templates/digest-create.xhtml>.

:ValidateDigest owl:intersectionOf (<serviceable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>]);
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!this.calliAuthName)
            throw new BadRequest("authName is required");
        this.resetCache();
        return proceed();
    """.

################################
# OpenID Provider
################################

:GetOpenIdProvider rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "GET";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:script """
        return this.openIDProvider(openIdQueryParameters);
    """.

:openIdQueryParameters a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetOpenIdProvider;
    rdfs:range xsd:string;
    calli:query "*".

:GetOpenIdProviderReturn rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "GET";
    calli:query "checkid";
    calli:requires calli:subscriber;
    calli:type "message/x-response";
    calli:script """
        return this.openIDProviderReturn(openIdReturnParameters, this.getUserIdentifier("GET", openIdCookies));
    """.

:openIdReturnParameters a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetOpenIdProviderReturn;
    rdfs:range xsd:string;
    calli:query "*".

:openIdCookies a owl:DatatypeProperty;
    rdfs:domain :GetOpenIdProviderReturn;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie";
    calli:type "text/plain".

:PostOpenIdProvider rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "POST";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:script """
        return this.openIDProvider(openIdPostParameters);
    """.

:openIdPostParameters a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostOpenIdProvider;
    rdfs:range xsd:string;
    calli:type "application/x-www-form-urlencoded".

################################
# login
################################

:GetLoginPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_login_xhtml; owl:hasValue <../pages/digest-login.xhtml>];
    calli:method "GET";
    calli:query "login";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:script """
        return digest_login_xhtml.Construct(this, 'login');
    """.

:digest_login_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetLoginPage.

# Used to login
:PostLogin rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "POST";
    calli:query "login";
    calli:requires calli:subscriber;
    calli:type "message/x-response";
    calli:script """
        if (loginOptions.indexOf("persistent=true") >= 0) {
            return this.getPersistentLogin("POST", cookies);
        } else {
            return this.getLogin("POST", cookies);
        }
    """.

:cookies a owl:DatatypeProperty;
    rdfs:domain :PostLogin;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie";
    calli:type "text/plain".

:loginOptions a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLogin;
    rdfs:range xsd:string;
    calli:type "application/x-www-form-urlencoded".

################################
# Registration
################################

# link from invite email
:GetRegisterDigestUserPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_register_xhtml; owl:hasValue <../pages/digest-register.xhtml>];
    calli:method "GET";
    calli:query "register";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        var iter = this.FindInvitedUsersByEmail(registeringUserEmail).iterator();
        while (iter.hasNext()) {
            var registeringUser = iter.next();
            if (registeringUser.calliPasswordDigest.empty &&
                    token == registeringUser.getSecretToken(nonce))
                return digest_register_xhtml.Construct(this, 'register');
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:nonce a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "nonce".

:token a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "token".

:registeringUserEmail a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "email".

:digest_register_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetRegisterDigestUserPage.

rdfs:label a rdf:Property.
rdfs:comment a rdf:Property.

# subitted from the digest-register.xhtml page
:PostDigestUserRegistration rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "POST";
    calli:query "register";
    calli:requires calli:reader;
    calli:imports <DigestUser>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!regForm.containsKey("fullname"))
            throw new BadRequest("Missing fullname");
        if (!regForm.containsKey("username"))
            throw new BadRequest("Missing username");
        if (!regForm.containsKey("password"))
            throw new BadRequest("Missing password");
        if (!regForm.containsKey("email"))
            throw new BadRequest("Missing email");
        if (!regForm.containsKey("auth-email"))
            throw new BadRequest("Missing auth-email");
        if (!regForm.containsKey("token"))
            throw new BadRequest("Missing token");
        if (!regForm.containsKey("nonce"))
            throw new BadRequest("Missing nonce");
        var nonce = regForm.get("nonce")[0];
        var token = regForm.get("token")[0];
        var fullname = regForm.get("fullname")[0];
        var email = regForm.get("email")[0];
        var authEmail = regForm.get("auth-email")[0];
        var username = regForm.get("username")[0];
        var password = regForm.get("password");
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        if (!username)
            throw new BadRequest("Missing name");
        if (username.toLowerCase() != username)
            throw new BadRequest("Username must be in lowercase");
        if (encodeURIComponent(username) != username)
            throw new BadRequest("Invalid username: '" + username + "'");

        var iter = this.FindInvitedUsersByEmail(email).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (token == user.getSecretToken(nonce)) {
                var vf = this.objectConnection.valueFactory;
                var newUserIri = this.calliAuthNamespace.toString() + username;
                var newUser = this.objectConnection.getObject(newUserIri);
                if (newUser instanceof DigestUser) {
                    if (newUser.calliEmail == authEmail && newUser.calliPasswordDigest.size() == password.length) {
                        var i = 0;
                        var iter = newUser.calliPasswordDigest.iterator();
                        while (iter.hasNext()) {
                            var pass = iter.next().getCharContent(true).toString();
                            if (password[i++] != pass)
                                throw new BadRequest("This email address is already used in an account, but the password is not the same");
                        }
                        this.registerUser(user.resource, newUserIri, authEmail, fullname);
                    } else {
                        throw new BadRequest("This username is already taken, please choose a different one");
                    }
                } else {
                    this.calliAuthNamespace.calliHasComponent.add(newUser);
                    newUser = this.objectConnection.addDesignation(newUser, DigestUser);
                    newUser.calliEditor.add(newUser);
                    newUser.calliName = username;
                    this.registerUser(user.resource, newUserIri, authEmail, fullname);
                    newUser.calliPasswordDigest = this.changeDigestPassword(newUser.calliPasswordDigest, password);
                }
                return;
            }
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:regForm a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostDigestUserRegistration;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

# Looks up user by email address
# Used to request password reset
:FindInvitedUsersByEmail rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:User];
    msg:sparql  """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?user
        WHERE {
            ?user a <InvitedUser>; calli:email $invitedEmail .
        }
    """.

:invitedEmail a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :FindInvitedUsersByEmail;
    rdfs:range xsd:string.

################################
# User needs a day pass
################################

# Linked from login page
:GetDaypassRequestPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_daypass_xhtml; owl:hasValue <../pages/digest-daypass.xhtml>];
    calli:method "GET";
    calli:query "daypass";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:script """
        return digest_daypass_xhtml.Construct(this, 'daypass');
    """.

:digest_daypass_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetDaypassRequestPage.

# Sends a temporary password by email
:PostDaypassRequestForm rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    rdfs:subClassOf [owl:onProperty :mail_digest_daypass_xhtml; owl:hasValue <../pages/mail-digest-daypass.xhtml>];
    calli:method "POST";
    calli:requires calli:reader;
    calli:query "daypass";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!userEmailForm.get("email") || !userEmailForm.get("email")[0])
            throw new BadRequest("Missing Email");
        var userEmail = userEmailForm.get("email")[0];
        var iter = this.FindUsersByEmail(userEmail).iterator();
        if (iter.hasNext()) {
            while (iter.hasNext()) {
                var user = iter.next();
                var password = this.getDaypass(user, userEmail);
                var body = mail_digest_daypass_xhtml.RawConstruct(user);
                body = body.replace(/@@PASSWORD@@/g, password);
                user.sendMessage(body, user.rdfsLabel.iterator().next() + " <" + userEmail + ">");
            }
            java.lang.Thread.sleep(new java.util.Random().nextInt() % 1000 + 1000);
        } else {
            iter = this.FindInvitedUsersByEmail(userEmail).iterator();
            if (iter.hasNext()) {
                while (iter.hasNext()) {
                    iter.next().PostUserInvite(userEmailForm);
                }
                java.lang.Thread.sleep(new java.util.Random().nextInt() % 1000 + 1000);
            } else {
                println("No users with email " + userEmail + " found");
                java.lang.Thread.sleep(new java.util.Random().nextInt() % 2000 + 2000);
            }
        }
    """.

:userEmailForm a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostDaypassRequestForm;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

:mail_digest_daypass_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostDaypassRequestForm.

# Looks up user by email address
# Used to request password reset
:FindUsersByEmail rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:User];
    msg:sparql  """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?user
        WHERE {
            $this calli:authNamespace [calli:hasComponent ?user] .
            ?user calli:email $email .
        }
    """.

:email a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :FindUsersByEmail;
    rdfs:range xsd:string.

