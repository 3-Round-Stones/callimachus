@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

################################
# Realm
################################

<DigestManager> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:DigestManager;
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/admin>;
    calli:view <templates/digest-view.xhtml>;
    calli:edit <templates/digest-edit.xhtml>;
    calli:create <templates/digest-create.xhtml>.

################################
# login
################################

:GetLoginPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_login_xhtml; owl:hasValue <pages/digest-login.xhtml>];
    calli:method "GET";
    calli:query "login";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:script """
        return digest_login_xhtml.Construct(this, 'login');
    """.

:digest_login_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetLoginPage.

# Used to login
:PostLogin rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "POST";
    calli:query "login";
    calli:realm </>;
    calli:requires calli:subscriber;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.auth.DigestManager>;
    calli:script """
        var persistent = loginOptions.indexOf("persistent=true") >= 0;
        var manager = new DigestManager(this.resource, this.calliAuthName);
        return manager.login(cookies, persistent, this.objectConnection);
    """.

:cookies a owl:DatatypeProperty;
    rdfs:domain :PostLogin;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie".

:loginOptions a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLogin;
    rdfs:range xsd:string;
    calli:type "application/x-www-form-urlencoded".

:FindCredential rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:imports <java:org.callimachusproject.server.auth.DigestManager>;
    calli:script """
        var manager = new DigestManager(this.resource, this.calliAuthName);
        return manager.findCredential(tokens, this.objectConnection);
    """.

:tokens a owl:DatatypeProperty;
    rdfs:domain :FindCredential;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie".

:FindCredentialLabel rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:imports <java:org.callimachusproject.server.auth.DigestManager>;
    calli:script """
        var manager = new DigestManager(this.resource, this.calliAuthName);
        return manager.findCredentialLabel(tokensForLabel, this.objectConnection);
    """.

:tokensForLabel a owl:DatatypeProperty;
    rdfs:domain :FindCredentialLabel;
    rdfs:range xsd:string;
    calli:header "Authorization", "Cookie".

################################
# Registration
################################

# link from invite email
:GetRegisterDigestUserPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_register_xhtml; owl:hasValue <pages/digest-register.xhtml>];
    calli:method "GET";
    calli:query "register";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:imports <java:org.apache.commons.codec.digest.DigestUtils>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        var iter = this.FindUsersByEmail(registeringUserEmail).iterator();
        while (iter.hasNext()) {
            var registeringUser = iter.next();
            if (registeringUser.calliPasswordDigest.empty &&
                    token == registeringUser.GetSecretToken(nonce))
                return digest_register_xhtml.Construct(this, 'register');
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:nonce a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "nonce".

:token a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "token".

:registeringUserEmail a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetRegisterDigestUserPage;
    rdfs:range xsd:string;
    calli:query "email".

:digest_register_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetRegisterDigestUserPage.

# subitted from the user-register.xhtml page
:PostDigestUserRegistration rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "POST";
    calli:query "register";
    calli:requires calli:reader;
    calli:imports <java:org.callimachusproject.server.auth.DigestManager>;
    calli:script """
        var nonce = regForm.get("nonce")[0];
        var token = regForm.get("token")[0];
        var email = regForm.get("email")[0];
        var password = regForm.get("password");
        if (!token)
            throw new BadRequest("This is not a valid registration URL");
        var iter = this.FindUsersByEmail(email).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (user.calliPasswordDigest.empty &&
                    token == user.GetSecretToken(nonce)) {
                var manager = new DigestManager(this.resource, this.calliAuthName);
                user.calliPasswordDigest = manager.changeDigestPassword(user.calliPasswordDigest, password, this.objectConnection);
                return;
            }
        }
        throw new BadRequest("Invitation is No Longer Valid");
    """.

:regForm a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostDigestUserRegistration;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

################################
# User needs a day pass
################################

# Linked from login page
:GetDaypassRequestPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :digest_daypass_xhtml; owl:hasValue <pages/digest-daypass.xhtml>];
    calli:method "GET";
    calli:query "daypass";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-store";
    calli:script """
        return digest_daypass_xhtml.Construct(this, 'daypass');
    """.

:digest_daypass_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetDaypassRequestPage.

# Sends a temporary password by email
:PostDaypassRequestForm rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    rdfs:subClassOf [owl:onProperty :mail_digest_daypass_xhtml; owl:hasValue <pages/mail-digest-daypass.xhtml>];
    calli:method "POST";
    calli:requires calli:reader;
    calli:query "daypass";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.auth.DigestManager>;
    calli:script """
        if (!userEmail)
            throw new BadRequest("Missing Email");
        var iter = this.FindUsersByEmail(userEmail).iterator();
        if (!iter.hasNext()) {
            println("No users with email " + userEmail + " found");
        }
        while (iter.hasNext()) {
            var user = iter.next();
            var manager = new DigestManager(this.resource, this.calliAuthName);
            var password = manager.getDaypass(user.FindSecret());
            var body = mail_digest_daypass_xhtml.Construct(user, 'daypass');
            body = body.replace(/@@PASSWORD@@/g, password);
            user.sendMessage(body, user.rdfsLabel.iterator().next() + " <" + userEmail + ">");
        }
        java.lang.Thread.sleep(new java.util.Random().nextInt() % 2000 + 2000);
    """.

:userEmail a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :PostDaypassRequestForm;
    rdfs:range xsd:string;
    calli:type "text/plain".

:mail_digest_daypass_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostDaypassRequestForm.

# Looks up user by email address
# Used to request password reset
:FindUsersByEmail rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DigestManager>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:User];
    msg:sparql  """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?user
        WHERE {
            $this calli:authNamespace [calli:hasComponent ?user] .
            ?user calli:email $email .
        }
    """.

:email a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :FindUsersByEmail;
    rdfs:range xsd:string.

