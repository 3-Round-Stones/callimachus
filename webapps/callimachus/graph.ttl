# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<NamedGraph> a <CreatableIndex>, owl:Class;
	rdfs:subClassOf calli:NamedGraph, <File>;
	rdfs:label "Graph";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <graph.png>;
	calli:create <file-create.xhtml>.

:GetGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
	msg:method "GET";
	msg:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
	msg:transform :TransformGraph;
	msg:sparql "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH $this { ?s ?p ?o } }".

:TransformGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:type "application/xml";
	msg:transform <styles/styles.ttl#TransformLayout>;
	msg:xslt <styles/graph.xsl>.

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :TransformGraph;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/xml".

# POST ?create=/callimachus/File
:PostGraphFile owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <File> ]);
	msg:imports <File>;
	msg:script """
		if (type == "application/rdf+xml" || type == "text/turtle") {
			if (location instanceof File) {
				location = location.RemoveFile();
			}
			var uri = this.toUri().resolve("/callimachus/NamedGraph").toString();
			var Graph = this.objectConnection.getObject(uri);
			return Graph.PostCreate(body, location, type);
		}
		return proceed();
	""".

# POST ?create=/callimachus/NamedGraph
:PostGraphCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <NamedGraph> ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:org.openrdf.rio.RDFFormat>;
	msg:imports <java:java.io.BufferedInputStream>;
	msg:imports <java:org.callimachusproject.util.MultipartParser>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports foaf:Document;
	msg:imports <graph-uploaded.xhtml>;
	msg:script """
		if (!location)
			throw new BadRequest("No graph location provided");

		var con = this.objectConnection;
		var vf = con.getValueFactory();
		var format = RDFFormat.forMIMEType(type.replace(/;.*/,""), RDFFormat.RDFXML);
		var fileName = location.resource.localName;
		var name = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/g, "$1");
		var label = vf.createLiteral(name.replace(/-/g, " "));
		var obj = location;
		var uri = obj.toString();

		if (obj instanceof Document)
			throw new BadRequest("File already exists: " + uri);

		java.lang.System.out.println("Parsing " + fileName);
		con.add(body, uri, format, [vf.createURI(uri)]);
		obj = con.addDesignation(obj, this.toString());
		obj = con.addDesignation(obj, Document);
		con.add(obj.resource, RDFS.LABEL, label, []);
		con.commit();
		java.lang.System.gc();
		java.lang.System.out.println("Imported " + uri);
		return obj;
	""".

