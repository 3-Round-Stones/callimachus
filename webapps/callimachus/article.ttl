# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<Article> a calli:Creatable, <IndexClass>, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, calli:Article;
	rdfs:label "Article";
	rdfs:comment "New articles can be created from a folder";
	calli:icon <article.png>;
	calli:view <article-view.xhtml>;
	calli:edit <article-edit.xhtml>;
	calli:create <article-create.xhtml>;
	calli:uriSpace </>;
	calli:reader </group/users>;
	calli:editor </group/staff>;
	calli:administrator </group/admin>.

# GET /page/MainArticle.xhtml
:GetArticleSource rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:type "application/docbook+xml";
	msg:header "cache-control:no-cache";
	msg:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# POST /callimachus/Article?create
:CreateArticle owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Article> ]);
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	msg:imports calli:Article;
	msg:script """
		var con = this.objectConnection;
		var vf = con.valueFactory;
		if (!location)
			throw new BadRequest("Missing location request header");

		var created = con.getObject(this.toUri().resolve(location).toString());
		if (created instanceof Article)
			throw new BadRequest("Article already exists");

		var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
		con.add(created.resource, RDFS.LABEL, label, []);

		created = con.addDesignation(created, this.toString());
		created = con.addDesignation(created, Article);
		this.PropagatePermissions(created);

		this.touchRevision(); // update index page
		con.commit();

		created.UploadArticle(body); //# cannot write to other streams directly
		return created;
	""".

:local a calli:LocalRealm;
	calli:domain </>.

# PUT /page/MainArticle.xhtml
# Called by client, copy operation, create operation, and MainArticle initialization
:UploadArticle rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT";
	msg:realm </callimachus/manifest>, :local;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports calli:Article;
	msg:script """
		if (!xhtmlStream)
			throw new BadRequest("Missing PUT request payload");
		var con = this.objectConnection;
		var vf = con.getValueFactory();

		this.calliDeleteWebResource();

		var filename = this.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
		con.add(this.resource, RDFS.LABEL, label, []);

		this.objectConnection.addDesignation(this, Article);

		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = xhtmlStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		HTTPObjectServer.resetAllCache();
	""".

:xhtmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :UploadArticle;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/docbook+xml".

