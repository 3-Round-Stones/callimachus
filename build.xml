<project name="project" default="dist" basedir=".">
	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="build" location="build" />
	<property name="dist" location="dist" />
	<property name="lib" location="lib" />
	<property name="bin" location="bin" />
	<property name="etc" location="etc" />
	<property name="log" location="log" />
	<property name="downloads" location="tmp" />
	<property name="webapps" location="webapps" />
	<property name="home" location="." />
	<property name="pid" location="run/callimachus.pid" />
	<property name="logging" location="etc/logging.properties" />
	<property name="mail" location="etc/mail.properties" />
	<property name="tools.jar" location="${java.home}/../lib/tools.jar" />
	<property file="src/META-INF/callimachusproject.properties" />
	<property name="alibaba.snapshot" value="2.0-SNAPSHOT" />
	<property name="m2.repository" value="http://repo.aduna-software.org/maven2/snapshots" />
	<property name="alibaba.url" value="http://downloads.sourceforge.net/project/sesame/AliBabaElmo/2.0-beta12/openrdf-alibaba-2.0-beta12.zip" />
	<property name="mail.jar" value="mail-1.4.1.jar" />
	<property name="mail.url" value="http://mirrors.ibiblio.org/pub/mirrors/maven2/javax/mail/mail/1.4.1/mail-1.4.1.jar" />
	<property name="jchardet.url" value="http://downloads.sourceforge.net/project/jchardet/jchardet/1.1/jchardet-1.1.zip" />
	<property name="jnotify.url" value="http://downloads.sourceforge.net/project/jnotify/jnotify/jnotify-0.93/jnotify-lib-0.93.zip" />
	<property name="closure.url" value="http://closure-compiler.googlecode.com/files/compiler-20100917.zip" />
	<property name="daemon.url" value="http://archive.apache.org/dist/commons/daemon/binaries/1.0.2/commons-daemon-1.0.2-bin.zip" />
	<property name="daemon-linux-i686.url" value="http://archive.apache.org/dist/commons/daemon/binaries/1.0.2/linux/commons-daemon-1.0.2-bin-linux-i386.tar.gz" />
	<property name="download-lunix-x86_64.url" value="http://archive.apache.org/dist/commons/daemon/binaries/1.0.2/linux/commons-daemon-1.0.2-bin-linux-x86_64.tar.gz" />
	<property name="daemon-darwin.url" value="http://archive.apache.org/dist/commons/daemon/binaries/1.0.2/darwin/commons-daemon-1.0.2-bin-darwin-universal.tar.gz" />
	<property name="daemon-windows.url" value="http://archive.apache.org/dist/commons/daemon/binaries/1.0.2/windows/commons-daemon-1.0.2-bin-windows.zip" />
	<property name="main" value="org.callimachusproject.Server" />
	<property name="jvmargs" value="-ea -server -mx512m -Dfile.encoding=UTF-8 -Djava.library.path=${lib} -Duser.home=${home} -Djava.mail.properties=${mail} -Djava.awt.headless=true -Dcom.sun.management.jmxremote" />
	<property name="args" value="-p 8080 -o http://localhost:8080 -r repositories/callimachus -c etc/callimachus-repository.ttl" />

	<target name="init">
		<!-- Create the time stamp and build directory -->
		<tstamp />
		<mkdir dir="${build}" />
		<available file="lib" property="lib.present" />
		<property file="build.properties" />
	</target>

	<target name="dependencies" unless="lib.present">
		<mkdir dir="${lib}" />
		<mkdir dir="${downloads}" />
		<parallel>
			<get src="${alibaba.url}" dest="${downloads}/openrdf-alibaba.zip" />
			<get src="${jchardet.url}" dest="${downloads}/jchardet.zip" />
			<get src="${closure.url}" dest="${downloads}/closure.zip" />
			<get src="${jnotify.url}" dest="${downloads}/jnotify.zip" />
			<get src="${daemon.url}" dest="${downloads}/daemon.zip" />
			<get src="${daemon-linux-i686.url}" dest="${downloads}/daemon-linux-i686.tar.gz" />
			<get src="${download-lunix-x86_64.url}" dest="${downloads}/daemon-linux-x86_64.tar.gz" />
			<get src="${daemon-darwin.url}" dest="${downloads}/daemon-darwin.tar.gz" />
			<get src="${mail.url}" dest="${lib}/${mail.jar}" />
		</parallel>
		<unzip src="${downloads}/openrdf-alibaba.zip" dest="${lib}">
			<patternset>
				<include name="lib/*.jar" />
				<include name="dist/*.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<delete file="${downloads}/openrdf-alibaba.zip" />
		<unzip src="${downloads}/jchardet.zip" dest="${lib}">
			<patternset>
				<include name="*/dist/lib/*.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<delete file="${downloads}/jchardet.zip" />
		<unzip src="${downloads}/closure.zip" dest="${lib}">
			<patternset>
				<include name="*.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<delete file="${downloads}/closure.zip" />
		<unzip src="${downloads}/jnotify.zip" dest="${lib}">
			<patternset>
				<include name="*.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<unzip src="${downloads}/jnotify.zip" dest="${lib}">
			<patternset>
				<include name="*.so" />
				<include name="*.dll" />
				<include name="*.dylib" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<delete file="${downloads}/jnotify.zip" />
		<unzip src="${downloads}/daemon.zip" dest="${lib}">
			<patternset>
				<include name="commons-daemon-*/commons-daemon-*.jar" />
				<exclude name="commons-daemon-*/commons-daemon-*-sources.jar" />
				<exclude name="commons-daemon-*/commons-daemon-*-javadoc.jar" />
			</patternset>
			<mapper type="flatten" />
		</unzip>
		<delete file="${downloads}/daemon.zip" />
		<untar compression="gzip" src="${downloads}/daemon-linux-i686.tar.gz" dest="${bin}">
			<patternset>
				<include name="jsvc" />
			</patternset>
			<mapper type="glob" from="jsvc" to="callimachus-linux-i686" />
		</untar>
		<delete file="${downloads}/daemon-linux-i686.tar.gz" />
		<untar compression="gzip" src="${downloads}/daemon-linux-x86_64.tar.gz" dest="${bin}">
			<patternset>
				<include name="jsvc" />
			</patternset>
			<mapper type="glob" from="jsvc" to="callimachus-linux-x86_64" />
		</untar>
		<delete file="${downloads}/daemon-linux-x86_64.tar.gz" />
		<untar compression="gzip" src="${downloads}/daemon-darwin.tar.gz" dest="${bin}">
			<patternset>
				<include name="jsvc" />
			</patternset>
			<mapper type="glob" from="jsvc" to="callimachus-darwin" />
		</untar>
		<delete file="${downloads}/daemon-darwin.tar.gz" />
		<antcall target="alibaba-snapshot" />
	</target>

	<target name="alibaba-snapshot" if="alibaba.snapshot">
		<delete dir="${lib}" includes="openrdf-alibaba-*.jar alibaba-*.jar" />
		<property name="openrdf" value="${m2.repository}/org/openrdf/alibaba" />
		<parallel>
			<get src="${openrdf}/alibaba-composition-object/${alibaba.snapshot}/alibaba-composition-object-${alibaba.snapshot}.jar" dest="${lib}/alibaba-composition-object-${alibaba.snapshot}.jar" />
			<get src="${openrdf}/alibaba-model/${alibaba.snapshot}/alibaba-model-${alibaba.snapshot}.jar" dest="${lib}/alibaba-model-${alibaba.snapshot}.jar" />
		</parallel>
		<parallel>
			<get src="${openrdf}/alibaba-repository-query/${alibaba.snapshot}/alibaba-repository-query-${alibaba.snapshot}.jar" dest="${lib}/alibaba-repository-query-${alibaba.snapshot}.jar" />
			<get src="${openrdf}/alibaba-repository-object/${alibaba.snapshot}/alibaba-repository-object-${alibaba.snapshot}.jar" dest="${lib}/alibaba-repository-object-${alibaba.snapshot}.jar" />
		</parallel>
		<parallel>
			<get src="${openrdf}/alibaba-repository-optimistic/${alibaba.snapshot}/alibaba-repository-optimistic-${alibaba.snapshot}.jar" dest="${lib}/alibaba-repository-optimistic-${alibaba.snapshot}.jar" />
			<get src="${openrdf}/alibaba-runtime/${alibaba.snapshot}/alibaba-runtime-${alibaba.snapshot}.jar" dest="${lib}/alibaba-runtime-${alibaba.snapshot}.jar" />
		</parallel>
		<parallel>
			<get src="${openrdf}/alibaba-sail-auditing/${alibaba.snapshot}/alibaba-sail-auditing-${alibaba.snapshot}.jar" dest="${lib}/alibaba-sail-auditing-${alibaba.snapshot}.jar" />
			<get src="${openrdf}/alibaba-server-object/${alibaba.snapshot}/alibaba-server-object-${alibaba.snapshot}.jar" dest="${lib}/alibaba-server-object-${alibaba.snapshot}.jar" />
		</parallel>
	</target>

	<target name="dist-clean" description="clean up everything for a new version" depends="clean">
		<delete dir="${lib}" />
		<delete dir="${bin}" />
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<target name="compile" depends="init,dependencies" description="compile the source ">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac srcdir="${src}" destdir="${build}" debug="true" debuglevel="lines,source">
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build}">
			<fileset dir="${src}" excludes="**/*.java *.sh *.bat *.conf *.properties *.ttl"/>
		</copy>
		<copy todir="${bin}">
			<fileset dir="${src}" includes="*.sh *.bat"/>
		</copy>
		<copy todir="${etc}">
			<fileset dir="${src}" includes="*.conf *.properties *.ttl"/>
		</copy>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory and create the jar -->
		<mkdir dir="${dist}" />
		<property name="jar.file" value="${dist}/callimachus-${version}.jar" />
		<manifestclasspath property="jar.classpath" jarfile="${jar.file}">
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</manifestclasspath>
		<jar jarfile="${jar.file}">
			<fileset dir="${build}" />
			<manifest>
				<attribute name="Main-Class" value="${main}" />
				<attribute name="Class-Path" value="${jar.classpath}" />
			</manifest>
		</jar>
		<war needxmlfile="false" destfile="${dist}/callimachus.war">
			<zipfileset dir="${webapps}/callimachus" prefix="" />
		</war>
		<zip destfile="${dist}/callimachus-${version}.zip">
			<zipfileset dir="." includes="*.txt" />
			<zipfileset dir="${bin}" prefix="bin" />
			<zipfileset dir="${etc}" prefix="etc" excludes="mail.properties ssl.properties" />
			<zipfileset dir="${lib}" prefix="lib" />
			<zipfileset file="${jar.file}" prefix="lib" />
			<zipfileset file="${dist}/callimachus.war" prefix="webapps" />
		</zip>
	</target>

	<target name="start" depends="compile">
		<mkdir dir="${log}" />
		<java classname="${main}" fork="true" spawn="true">
			<jvmarg line="${jvmargs} -Djava.util.logging.config.file=${logging}" />
			<arg line="${args} -q --pid ${pid}" />
			<classpath>
				<pathelement location="${build}/" />
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

	<target name="stop" depends="init">
		<java classname="${main}" fork="true" resultproperty="ret">
			<jvmarg line="${jvmargs}" />
			<arg line="--stop --pid ${pid}" />
			<classpath>
				<pathelement location="${build}/" />
				<pathelement location="${tools.jar}" />
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</java>
		<condition property="stopped">
			<equals arg1="${ret}" arg2="0"/>
	    </condition>
		<antcall target="kill" />
	</target>

	<target name="kill" unless="stopped">
		<echo>The stop target may not be supported on your platform. You must </echo>
		<echo>kill the process manually listed in ${pid}. </echo>
		<echo>Use the run target next time to avoid this message.</echo>
	</target>

	<target name="run" depends="compile">
		<java classname="${main}" fork="true" failonerror="true">
			<jvmarg line="${jvmargs}" />
			<arg line="${args}" />
			<classpath>
				<pathelement location="${build}/" />
				<fileset dir="${lib}">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
		</java>
	</target>

</project>
