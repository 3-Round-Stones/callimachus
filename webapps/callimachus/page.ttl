# 
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Page> a <Creatable>, owl:Class;
    rdfs:subClassOf calli:Page, <File>;
    rdfs:label "Page";
    rdfs:comment "New pages can be created in a folder";
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/staff>,</group/admin>;
    calli:icon <page.png>;
    calli:edit <page-edit.xhtml>;
    calli:create <page-create.xhtml>;
    calli:mediaType "application/xhtml+xml".

# GET /page/MainPage.xhtml?view
:GetPage owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Page>]);
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:post "pipelines/page-view.xpl?result&systemId=$0\nContent-Type: application/xhtml+xml".

# GET /page/MainPage.xhtml
:GetPageSource rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:type "application/xhtml+xml";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# POST ?create=/callimachus/Page
:CreatePage owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Page> ]);
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <File>;
    calli:imports calli:Page;
    calli:imports foaf:Document;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");

        if (location instanceof File) {
            location = location.RemoveFile();
        }
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Page);
        created = con.addDesignation(created, Document);

        created.UploadPage(body);
        return created;
    """.

# PUT /page/MainPage.xhtml
# Called by client, copy operation, create operation, and MainPage initialization
:UploadPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:realm </>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.HTTPObjectServer>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = xhtmlStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        var input = this.openInputStream();
        try {
            // verify we can parse it as XML
            var xslt = org.callimachusproject.xslt.XSLTransformerFactory.getInstance().createTransformer();
            xslt.transform(input, this.toString()).asDocument();
        } finally {
            input.close();
        }
        this.touchRevision();
        HTTPObjectServer.resetAllCache();
    """.

:xhtmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadPage;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xhtml+xml".

# GET /page/MainPage.xhtml?element=content/1&realm=/
:GetElement rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:query "element";
    calli:type "text/html";
    calli:post "pipelines/page-element.xpl?result&element={element}&realm={elementRealm}&systemId=$0\nContent-Type: application/xhtml+xml".

:element a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetElement;
    rdfs:range xsd:string;
    calli:query "element".

:elementRealm a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetElement;
    rdfs:range xsd:string;
    calli:query "realm".

# GET /page/MainPag.xhtml?template
:GetTemplate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:query "template";
    calli:type "application/xhtml+xml";
    calli:post "pipelines/page-template.xpl?result&realm={realm}&systemId=$0\nContent-Type: application/xhtml+xml".

:realm a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetTemplate;
    rdfs:range <Realm>;
    calli:type "text/uri-list";
    calli:query "realm".

# Called by view.ttl, edit.ttl, and many others
:Construct rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:script """
        var realm = this.FindRealmOf(resource);
        var template = this + "?template&realm=" + realm;
        var con = this.objectConnection;
        var bindings = new org.openrdf.query.impl.MapBindingSet();
        bindings.addBinding("this", resource.resource);
        var engine = org.callimachusproject.engine.TemplateEngine.getInstance();
        var results = engine.getTemplate(template).evaluate(bindings, con);
        return this.Render(realm, resource, resourceQuery, results);
    """.

:resource a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Construct.

:resourceQuery a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Construct;
    rdfs:range xsd:string.

:FindRealmOf rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Realm>];
    calli:type "text/uri-list";
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?realm {
            ?realm calli:hasComponent* $realmResource
            FILTER EXISTS {?realm a calli:Realm}
        }
        ORDER BY desc(?realm) LIMIT 1
    """.

:realmResource a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :FindRealmOf.

:Render rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:post <pipelines/page-render.xpl?result&template=$0%3Ftemplate%26realm%3D{realm}&this={renderResource}&query={renderResourceQuery}>.

:realm a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Render;
    rdfs:range <Realm>.

:renderResource a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Render.

:renderResourceQuery a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Render;
    rdfs:range xsd:string.

:xmlSparqlResults a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Render;
    rdfs:range <java:org.openrdf.query.TupleQueryResult>;
    calli:type "application/sparql-results+xml".
