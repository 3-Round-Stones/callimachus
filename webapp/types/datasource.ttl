#
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
#    Portions Copyright (c) 2011-2013 3 Round Stones Inc, Some Rights Reserved
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix sd:<http://www.w3.org/ns/sparql-service-description#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>;
    foaf:primaryTopic <Datasource>.

<Datasource> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:Datasource;
    rdfs:label "Datasource";
    rdfs:comment "A SPARQL endpoint service for a mutable dataset";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/datasource.png>;
    calli:view <../templates/datasource-view.xhtml>;
    calli:edit <../templates/datasource-edit.xhtml>;
    calli:create <../templates/datasource-create.xhtml>.

:DeleteDatasource owl:intersectionOf ( <editable.ttl#Delete>
        [owl:onProperty msg:target; owl:allValuesFrom <Datasource>]);
    calli:script """
        this.getCalliRepository().getDatasourceManager().purgeDatasource(this.resource);
        return proceed();
    """.

:GetRdfDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:method "GET";
    calli:query "uri";
    calli:requires calli:reader;
    calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    calli:script """
        if (!rdfResource) rdfResource = this;
        return this.describeResource(rdfResource.resource);
    """.

:rdfResource a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetRdfDescribeService;
    rdfs:range rdfs:Resource;
    calli:type "text/uri-list";
    calli:query "uri".

################################
# SPARQL Protocol 1.0          #
################################

# GET query parameter
:GetQueryResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "GET";
    calli:query "query";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:header "cache-control:no-validate";
    calli:script """
        return {
            status: 200,
            message: "OK",
            body: this.evaluateSparql(queryStr)
        };
    """.

:queryStr a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :GetQueryResult;
    rdfs:range xsd:string;
    calli:query "query".

# POST application/x-www-form-urlencoded
:PostPercentEncoded rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:requires calli:editor;
    calli:type "message/x-response";
    calli:imports <java:org.openrdf.query.MalformedQueryException>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (map && map.containsKey("query"))
            return {
                status: 200,
                message: "OK",
                body: this.evaluateSparql(map.get("query")[0])
            };
        if (!map || !map.containsKey("update"))
            throw new org.callimachusproject.server.exceptions.BadRequest("Missing query");
        try {
            this.executeSparql(map.get("update")[0]);
            return null;
        } catch (e if e.javaException instanceof MalformedQueryException) {
            throw new BadRequest(e.javaException.toString());
        }
    """.

:map a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostPercentEncoded;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

################################
# SPARQL Protocol 1.1          #
################################

# POST application/sparql-query
:PostQuery rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!query)
            throw new BadRequest("Missing query body");
        return {
            status: 200,
            message: "OK",
            body: this.evaluateSparql(new java.lang.String(query, "UTF-8"))
        };
    """.

:query a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :PostQuery;
    rdfs:range xsd:hexBinary;
    msg:type "application/sparql-query".

# POST application/sparql-update
:PostUpdate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "POST";
    calli:requires calli:editor;
    calli:imports <java:org.openrdf.query.MalformedQueryException>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!update)
            throw new BadRequest("Missing update body");
        try {
            this.executeSparql(new java.lang.String(update, "UTF-8"));
        } catch (e if e.javaException instanceof MalformedQueryException) {
            throw new BadRequest(e.javaException.toString());
        }
    """.

:update a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :PostUpdate;
    rdfs:range xsd:hexBinary;
    msg:type "application/sparql-update".

################################
# Graph Store HTTP Protocol    #
################################

:IndirectGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>].

:graph a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :IndirectGraph;
    rdfs:range rdfs:Resource;
    calli:type "text/uri-list";
    calli:query "graph".

# GET default parameter
:GetDefaultGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:method "GET";
    calli:query "default";
    calli:requires calli:reader;
    calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    calli:script """
        return this.constructGraph(null);
    """.

# GET graph parameter
:GetNamedGraph rdfs:subClassOf :IndirectGraph;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:method "GET";
    calli:query "graph";
    calli:requires calli:reader;
    calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    calli:script """
        if (!graph) graph = this;
        return this.constructGraph(graph.resource);
    """.

# DELETE default parameter
:DeleteDefaultGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "DELETE";
    calli:query "default";
    calli:requires calli:editor;
    calli:script """
        this.dropGraph(null);
    """.

# DELETE graph parameter
:DeleteNamedGraph rdfs:subClassOf :IndirectGraph;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "DELETE";
    calli:query "graph";
    calli:requires calli:editor;
    calli:script """
        if (!graph) graph = this;
        this.dropGraph(graph.resource);
    """.

:IndirectPayload rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>].

:rdfPayload a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :IndirectPayload;
    rdfs:range <java:org.openrdf.query.GraphQueryResult>;
    calli:type "application/rdf+xml", "text/turtle".

# PUT default parameter
:PutDefaultGraph rdfs:subClassOf :IndirectPayload;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:query "default";
    calli:requires calli:editor;
    calli:script """
        this.clearAndLoadGraph(rdfPayload, null);
    """.

# PUT graph parameter
:PutNamedGraph rdfs:subClassOf :IndirectGraph, :IndirectPayload;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "PUT";
    calli:query "graph";
    calli:requires calli:editor;
    calli:type "text/uri-list";
    calli:expect "201-created";
    calli:script """
        if (!graph) graph = this;
        if (this.clearAndLoadGraph(rdfPayload, graph.resource)) {
            return graph;
        } else {
            return null;
        }
    """.

# POST default parameter
:PostDefaultGraph rdfs:subClassOf :IndirectPayload;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "POST";
    calli:query "default";
    calli:requires calli:editor;
    calli:script """
        this.loadGraph(rdfPayload, null);
    """.

# POST graph parameter
:PostNamedGraph rdfs:subClassOf :IndirectGraph, :IndirectPayload;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "graph";
    calli:requires calli:editor;
    calli:type "text/uri-list";
    calli:expect "201-created";
    calli:script """
        if (!graph) graph = this;
        if (this.loadGraph(rdfPayload, graph.resource)) {
            return graph;
        } else {
            return null;
        }
    """.

:IndirectPatchGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>].

:patchUpdate a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :IndirectPatchGraph;
    rdfs:range xsd:hexBinary;
    calli:type "application/sparql-update".

# PATCH default parameter
:PatchDefaultGraph rdfs:subClassOf :IndirectPatchGraph;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PATCH";
    calli:query "default";
    calli:requires calli:editor;
    calli:script """
        this.patchGraph(new java.lang.String(patchUpdate, "UTF-8"), null);
    """.

# PATCH graph parameter
:PatchNamedGraph rdfs:subClassOf :IndirectGraph, :IndirectPatchGraph;
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PATCH";
    calli:query "graph";
    calli:requires calli:editor;
    calli:script """
        if (!graph) graph = this;
        this.patchGraph(new java.lang.String(patchUpdate, "UTF-8"), graph.resource);
    """.

################################
# Callimachus UI               #
################################

:GetHtmlDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "GET";
    calli:query "uri";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:script """
        return this.TransformDescribeService(this.GetRdfDescribeService(htmlResource));
    """.

:htmlResource a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetHtmlDescribeService;
    rdfs:range rdfs:Resource;
    calli:type "text/uri-list";
    calli:query "uri".

# GET query parameter
:GetHtmlResults rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "GET";
    calli:query "query";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "cache-control:no-validate";
    calli:script """
        var resp = this.GetQueryResult(htmlQueryStr);
        var stream = resp && resp.body ? resp.body.content : null;
        if (stream)
            return this.TransformResult(stream);
        return null;
    """.

:htmlQueryStr a owl:DatatypeProperty, owl:FunctionalProperty;
    rdfs:domain :GetHtmlResults;
    rdfs:range xsd:string;
    calli:query "query".

# POST application/x-www-form-urlencoded
:PostWebForm rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "POST";
    calli:requires calli:editor;
    calli:type "text/html";
    calli:script """
        var resp = this.PostPercentEncoded(formMap);
        var stream = resp && resp.body ? resp.body.content : null;
        if (stream)
            return this.TransformResult(stream);
        return null;
    """.

:formMap a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostWebForm;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

:TransformDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:post "../pipelines/describe.xpl?results&target={0}".

:graphResult a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformDescribeService;
    rdfs:range <java:org.openrdf.query.GraphQueryResult>;
    calli:type "application/rdf+xml".

# Transformer
:TransformResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Datasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:post "../pipelines/sparql.xpl?results&target={0}".

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformResult;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xml".


