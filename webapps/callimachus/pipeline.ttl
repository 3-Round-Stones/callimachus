# 
#    Copyright (c) 2012 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Pipeline> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>;
    rdfs:label "Pipeline";
    rdfs:comment "New pipelines can be created from a folder";
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/users>,</group/staff>,</group/admin>;
    calli:icon <images/pipeline.png>;
    calli:view <templates/pipeline-view.xhtml>;
    calli:edit <templates/pipeline-edit.xhtml>;
    calli:create <templates/pipeline-create.xhtml>;
    calli:mediaType "application/xproc+xml";
    calli:documentTag <http://www.w3.org/ns/xproc#pipeline>.

# GET /pipeline/pipe.xpl
:GetPipelineSource rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:type "application/xproc+xml";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# POST ?create=/callimachus/Pipeline
:CreatePipeline owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Pipeline> ]);
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");
        if (location instanceof File) {
            location = location.RemoveFile();
        }
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Document);

        created.UploadPipeline(body);
        return created;
    """.

# PUT /pipeline/pipe.xpl
:UploadPipeline rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:realm </>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.HTTPObjectServer>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports foaf:Document;
    calli:script """
        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = xprocStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        this.touchRevision();
    """.

:xprocStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadPipeline;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xproc+xml".

################################
# Execute Pipeline             #
################################

# GET /pipeline.xpl?results
:GetResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "GET";
    calli:query "results";
    calli:type "message/x-response";
    calli:header "cache-control:no-store";
    calli:script """
        return this.PostResult(queryGetParameters, null, null);
    """.

:queryGetParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

# POST /pipeline.xpl?results
:PostResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "POST";
    calli:query "results";
    calli:type "message/x-response";
    calli:header "cache-control:no-store";
    calli:imports <java:org.callimachusproject.xproc.PipelineFactory>;
    calli:imports <java:org.apache.http.ProtocolVersion>;
    calli:imports <java:org.apache.http.message.BasicHttpResponse>;
    calli:imports <java:org.apache.http.entity.InputStreamEntity>;
    calli:script """
        var factory = PipelineFactory.getInstance();
        var pipeline = factory.createPipeline(this.openInputStream(), this.toString());
        var pipe = pipeline.pipeStream(sourcePort, sourceLocation);
        var iterator = queryPostParameters.keySet().iterator();
        while(iterator.hasNext()){
            var key = iterator.next();
            var value = queryPostParameters.get(key);
            if (key != "result" && value && value.length){
                pipe.passOption(key, value[0]);
            } else if (value && value.length > 1) {
                pipe.passOption(key, value[1]);
            }
        }
        var http11 = new ProtocolVersion("HTTP", 1, 1);
        var resp = new BasicHttpResponse(http11, 200, "OK");
        var entity = new InputStreamEntity(pipe.asStream(), -1);
        entity.contentType = pipe.getMediaType();
        resp.setEntity(entity);
        return resp;
""".

:queryPostParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

:sourceLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    calli:header "Content-Location".

:sourcePort a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xml".

