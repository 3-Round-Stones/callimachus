#
#    Copyright (c) 2013 3 Round Stones Inc., Some Rights Reserved
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>;
    foaf:primaryTopic <DescribeService>.

<DescribeService> a owl:Class;
    rdfs:subClassOf <Viewable>;
    rdfs:label "Describe Service";
    rdfs:isDefinedBy <../../ontology>;
    calli:view <../templates/describe-view.xhtml>.

:GetRdfDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DescribeService>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:method "GET";
    calli:query "uri";
    calli:requires calli:reader;
    calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    calli:script """
        if (!rdfResource) rdfResource = this;
        var seen = {};
        seen[rdfResource.resource] = true;
        var queue = [];
        queue.push(rdfResource.resource);
        var con = this.objectConnection;
        var base = rdfResource.resource.stringValue();
        var baseIsHash = base.charAt(base.length - 1) == '#';
        var pushIfHash = function(object) {
            var uri = object.stringValue();
            if (object instanceof org.openrdf.model.URI) {
                if (uri.length > base.length && uri.indexOf(base) == 0) {
                    var chr = uri.charAt(base.length);
                    if (baseIsHash || chr == '#' && !seen[object]) {
                        seen[object] = true;
                        queue.push(object);
                    }
                }
            } else if (object instanceof org.openrdf.model.Resource) {
                if (!seen[object]) {
                    seen[object] = true;
                    queue.push(object);
                }
            }
        }
        var stmts = con.getStatements(null, org.openrdf.model.vocabulary.RDFS.ISDEFINEDBY, rdfResource.resource, false, []);
        try {
            while (stmts.hasNext()) {
                pushIfHash(stmts.next().subject);
            }
        } finally {
            stmts.close();
        }
        var last = null;
        return new org.openrdf.query.GraphQueryResult({
            close: function() {
                stmts.close();
            },
            getNamespaces: function() {
                var namespaces = con.getNamespaces();
                var map = new java.util.HashMap();
                while (namespaces.hasNext()) {
                    var ns = namespaces.next();
                    map.put(ns.getPrefix(), ns.getName());
                }
                return map;
            },
            hasNext: function() {
                while (!stmts.hasNext() && queue.length > 0) {
                    stmts.close();
                    stmts = con.getStatements(queue.shift(), null, null, false, []);
                }
                return stmts.hasNext();
            },
            next: function() {
                while (!stmts.hasNext() && queue.length > 0) {
                    stmts.close();
                    stmts = con.getStatements(queue.shift(), null, null, false, []);
                }
                var st = stmts.next();
                while (last != null && stmts.hasNext()
                        && st.subject == last.subject
                        && st.predicate == last.predicate
                        && st.object == last.object) {
                    st = stmts.next();
                }
                pushIfHash(st.object);
                last = st;
                return st;
            },
            remove: function() {
                stmts.remove();
            },
        });
    """.

:rdfResource a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetRdfDescribeService;
    rdfs:range rdfs:Resource;
    calli:type "text/uri-list";
    calli:query "uri".

:GetHtmlDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DescribeService>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:method "GET";
    calli:query "uri";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:script """
        return this.TransformDescribeService(this.GetRdfDescribeService(htmlResource));
    """.

:htmlResource a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetHtmlDescribeService;
    rdfs:range rdfs:Resource;
    calli:type "text/uri-list";
    calli:query "uri".

:TransformDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <DescribeService>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:post <../pipelines/describe.xpl?results&target={0}>.

:graphResult a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformDescribeService;
    rdfs:range <java:org.openrdf.query.GraphQueryResult>;
    calli:type "application/rdf+xml".
