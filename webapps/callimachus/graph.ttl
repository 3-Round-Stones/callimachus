# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<NamedGraph> a <CreatableIndex>, owl:Class;
	rdfs:subClassOf calli:NamedGraph, <File>;
	rdfs:label "Named Graph";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <graph.png>;
	calli:create <file-create.xhtml>;
	calli:type "application/rdf+xml".

<GraphDocument> a <CreatableIndex>, owl:Class;
	rdfs:subClassOf <File>;
	rdfs:label "Graph Document";
	rdfs:comment "Terse RDF Triple documents";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <graph.png>;
	calli:view <graph-view.xhtml>;
	calli:edit <graph-edit.xhtml>;
	calli:create <graph-create.xhtml>;
	calli:type "text/turtle".

################################
# Graph Document
################################

# GET /graph.ttl
:GetGraphDocument rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <GraphDocument>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
	msg:method "GET";
	msg:type "text/turtle";
	msg:header "cache-control:no-cache";
	msg:header "cache-control:cache-range";
	msg:script "return this.openReader(true)".

# POST ?create=/callimachus/File
:LookupGraphDocument owl:intersectionOf (</callimachus/toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <File> ]);
	msg:script """
		if (type == "text/turtle") {
			var uri = this.toUri().resolve("/callimachus/GraphDocument").toString();
			return this.objectConnection.getObject(uri);
		}
		return proceed();
	""".

# POST ?create=/callimachus/GraphDocument
:CreateGraphDocument owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <GraphDocument> ]);
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	msg:imports <File>;
	msg:imports foaf:Document;
	msg:script """
		var con = this.objectConnection;
		var vf = con.valueFactory;
		if (!location)
			throw new BadRequest("Missing location request header");
		if (location instanceof File) {
			location = location.RemoveFile();
		}
		var created = location;

		var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
		con.add(created.resource, RDFS.LABEL, label, []);

		created = con.addDesignation(created, this.toString());
		created = con.addDesignation(created, Document);

		created.UploadGraphDocument(new java.io.InputStreamReader(body, "UTF-8"));
		return created;
	""".

# PUT /graph.ttl
:UploadGraphDocument rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <GraphDocument>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT";
	msg:realm </callimachus/manifest>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.rio.RDFFormat>;
	msg:script """
		if (!reader)
			throw new BadRequest("Missing PUT request payload");
		var con = this.objectConnection;
		con.clear([this.resource]); //# clear graph
		var object = this;
		var inputStream = new org.openrdf.http.object.util.ProducerStream(function(outputStream) {
			var pipe = new java.io.OutputStreamWriter(outputStream, "UTF-8");
			var read;
			var buf = java.lang.reflect.Array.newInstance(java.lang.Character.TYPE, 1024);
			var out = object.openWriter();
			try {
				while ((read = reader.read(buf)) >= 0) {
					out.write(buf, 0, read); //# save to blob
					pipe.write(buf, 0, read); //# pipe to RDF store
				}
			} finally {
				out.close();
				pipe.close();
			}
		});
		
		java.lang.System.out.println("Parsing " + this);
		con.add(inputStream, this.toString(), RDFFormat.TURTLE, [this.resource]);

		this.touchRevision();
		con.commit();
		java.lang.System.gc();
		java.lang.System.out.println("Imported " + this);
	""".

:reader a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :UploadGraphDocument;
	rdfs:range <java:java.io.Reader>;
	msg:type "text/turtle".

################################
# Named Graph
################################

:GetNamedGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
	msg:method "GET";
	msg:type "application/rdf+xml;q=0.4";
	msg:transform :TransformNamedGraph;
	msg:sparql "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH $this { ?s ?p ?o } }".

:TransformNamedGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:type "application/xml";
	msg:transform <styles/TransformLayout>;
	msg:xslt <styles/graph.xsl>.

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :TransformNamedGraph;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/xml".

# POST ?create=/callimachus/File
:LookupNamedGraphFile owl:intersectionOf (</callimachus/toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <File> ]);
	msg:script """
		if (type == "application/rdf+xml") {
			var uri = this.toUri().resolve("/callimachus/NamedGraph").toString();
			return this.objectConnection.getObject(uri);
		}
		return proceed();
	""".

# POST ?create=/callimachus/NamedGraph
:PostNamedGraphCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <NamedGraph> ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:org.openrdf.rio.RDFFormat>;
	msg:imports <java:java.io.BufferedInputStream>;
	msg:imports <java:org.callimachusproject.util.MultipartParser>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <File>;
	msg:imports foaf:Document;
	msg:imports <graph-uploaded.xhtml>;
	msg:script """
		if (!location)
			throw new BadRequest("No graph location provided");
		if (location instanceof File) {
			location = location.RemoveFile();
		}

		var con = this.objectConnection;
		var vf = con.getValueFactory();
		var format = RDFFormat.forMIMEType(type.replace(/;.*/,""), RDFFormat.RDFXML);
		var fileName = location.resource.localName;
		var name = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/g, "$1");
		var label = vf.createLiteral(name.replace(/-/g, " "));
		var obj = location;
		var uri = obj.toString();

		java.lang.System.out.println("Parsing " + fileName);
		con.add(body, uri, format, [obj.resource]);
		obj = con.addDesignation(obj, this.toString());
		obj = con.addDesignation(obj, Document);
		con.add(obj.resource, RDFS.LABEL, label, []);

		this.touchRevision(); // update index page
		con.commit();
		java.lang.System.gc();
		java.lang.System.out.println("Imported " + uri);
		return obj;
	""".

