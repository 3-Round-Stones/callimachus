# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

################################
# Authentication
################################

# all common modification operations must be authenticated
calli:get-copy http:realm </accounts>.
calli:post-copy http:realm </accounts>.
calli:get-edit http:realm </accounts>.
calli:post-edit http:realm </accounts>.
calli:delete http:realm </accounts>.
calli:post-discussion http:realm </accounts>.

# Transcation operations must be authenticated
audit:Transaction http:realm </accounts>.

# User operations must be authorized
</accounts/user/User> http:realm </accounts>.

################################
# Authorization
################################

# interface method used by DigestRealmSupport
:AuthorizeCredential rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:boolean].

:credential a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential.

:method a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string.

:qs a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string.

:subject a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential.

# users associated with the subject are authorized
:authorize-maintainer owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			{
				$subject calli:scribe $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:curator $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:maintainer $credential
			}
		}
	""".

# members of groups associated with the subject are authorized
:authorize-member owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			?group calli:member $credential
			{
				$subject calli:scribe ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:curator ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($qs = "copy")
			} UNION {
				$subject calli:maintainer ?group
			}
		}
	""".

# users or groups associated as conservator of a class of the subject are authorized
:authorize-conservator owl:equivalentClass :AuthorizeCredential;
	obj:imports calli:Group;
	obj:imports <java:org.callimachusproject.annotations.conservator>;
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:script """
		function findAnnotatedClass(klass, ann) {
			if (klass.isAnnotationPresent(ann)) {
				return [klass];
			}
			var result = [];
			if (klass.getSuperclass()) {
				result = findAnnotatedClass(klass.getSuperclass(), ann);
			}
			var interfaces = klass.getInterfaces();
			for (var i = interfaces.length; i--;) {
				var face = findAnnotatedClass(interfaces[i], ann);
				for (var f = face.length; f--;) {
					for (var r = result.length; r--;) {
						if (result[r].isAssignableFrom(face[f])) {
							result.splice(r, 1); //# annotation overridden
						}
					}
					result.push(face[f]);
				}
			}
			return result;
		}
		if (method == "GET" || method == "HEAD" || method == "POST" && (qs == "edit" || qs == "discussion")) {
			if (qs == null || qs == "view" || qs == "edit" || qs == "discussion" || qs == "describe" || qs == "history"
						|| qs == "what-links-here" || qs == "related-changes" || qs == "introspect") {
				var annotated = findAnnotatedClass(subject.getClass(), conservator);
				for (var a = annotated.length; a--;) {
					var uri = annotated[a].getAnnotation(conservator).value();
					for (var u = uri.length; u--;) {
						if (credential.resource.stringValue().equals(uri[u]))
							return true;
						var group = objectConnection.objectFactory.createObject(uri[u], Group);
						if (group.calliMembers.contains(credential))
							return true;
					}
				}
			}
		}
		return proceed();
	""".

# users or groups associated as reviewer of a class of the subject are authorized
:authorize-reviewer owl:equivalentClass :AuthorizeCredential;
	obj:imports calli:Group;
	obj:imports <java:org.callimachusproject.annotations.reviewer>;
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:script """
		function findAnnotatedClass(klass, ann) {
			if (klass.isAnnotationPresent(ann)) {
				return [klass];
			}
			var result = [];
			if (klass.getSuperclass()) {
				result = findAnnotatedClass(klass.getSuperclass(), ann);
			}
			var interfaces = klass.getInterfaces();
			for (var i = interfaces.length; i--;) {
				var face = findAnnotatedClass(interfaces[i], ann);
				for (var f = face.length; f--;) {
					for (var r = result.length; r--;) {
						if (result[r].isAssignableFrom(face[f])) {
							result.splice(r, 1); //# annotation overridden
						}
					}
					result.push(face[f]);
				}
			}
			return result;
		}
		if (method == "GET" || method == "HEAD" || method == "POST" && qs == "discussion") {
			if (qs == null || qs == "view" || qs == "discussion" || qs == "describe" || qs == "history"
						|| qs == "what-links-here" || qs == "related-changes" || qs == "introspect") {
				var annotated = findAnnotatedClass(subject.getClass(), reviewer);
				for (var a = annotated.length; a--;) {
					var uri = annotated[a].getAnnotation(reviewer).value();
					for (var u = uri.length; u--;) {
						if (credential.resource.stringValue().equals(uri[u]))
							return true;
						var group = objectConnection.objectFactory.createObject(uri[u], Group);
						if (group.calliMembers.contains(credential))
							return true;
					}
				}
			}
		}
		return proceed();
	""".

# anybody with credentials can login and is welcome
:login-authorize owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$subject calli:authenticates [calli:member $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($subject = </accounts>)
			FILTER ($qs = "login" || $qs = "welcome")
		}
	""".

# transcations are authorized by the subject they modified
# TODO change to use obj:script and call AuthorizeCredential with each subject in transaction
:transaction-view-authorize owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$subject a audit:Transaction
			{
				GRAPH $subject { ?subj ?pred ?obj }
			} UNION {
				GRAPH $subject { [rdf:subject ?subj] }
			} UNION {
				$subject audit:contained [rdf:subject ?subj]
			}
			{
				?subj calli:reviewer $credential
			} UNION {
				?subj calli:maintainer $credential
			} UNION {
				?subj calli:reviewer [calli:member $credential]
			} UNION {
				?subj calli:maintainer [calli:member $credential]
			}
			FILTER ($method = "GET" || $method = "HEAD" || $method = "POST" && $qs = "discussion")
			FILTER ($qs = "view" || $qs = "describe" || $qs = "discussion" || !bound($qs))
		}
	""".

# any authenticated user can view any other user
:user-view-authorize owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$subject a </accounts/user/User>
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($qs = "view" || !bound($qs))
		}
	""".

# Group curators can create users
:user-create-authorize owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$subject a </accounts/group/Group>
			{
				$subject calli:scribe $credential
			} UNION {
				$subject calli:curator $credential
			} UNION {
				$subject calli:scribe [calli:member $credential]
			} UNION {
				$subject calli:curator [calli:member $credential]
			}
			FILTER ($qs = "user-create")
		}
	""".

