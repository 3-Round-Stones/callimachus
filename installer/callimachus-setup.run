#!/bin/sh
#
# Copyright (c) 2012 3 Round Stones Inc, Some Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

cygwin=false
darwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
Darwin*) darwin=true;;
esac

# Ensure that any user defined CLASSPATH variables are not used on startup.
CLASSPATH=

# For Cygwin, ensure paths are in UNIX format before anything is touched
if $cygwin; then
  [ -n "$JAVA_HOME" ] && JAVA_HOME=`cygpath --unix "$JAVA_HOME"`
fi

# use 'java_home' to search for other possible java candidate
if [ -z "$JAVA_HOME" -a -x /usr/libexec/java_home ] ; then
  JAVA_HOME=`/usr/libexec/java_home`
fi

# use 'which' to search for other possible java candidate
if [ -z "$JAVA_HOME" ] ; then
  JAVA=`which java`
  if [ -x "$JAVA" ] ; then
    while [ -h "$JAVA" ] ; do
      ls=`ls -ld "$JAVA"`
      link=`expr "$ls" : '.*-> \(.*\)$'`
      if expr "$link" : '/.*' > /dev/null; then
        JAVA="$link"
      else
        JAVA=`dirname "$JAVA"`/"$link"
      fi
    done
    HOME=`echo "$JAVA" | awk '{ print substr($1, 1, length($1)-9); }'`
    if [ -d "$HOME" ] ; then
      JAVA_HOME="$HOME"
    else
      JAVA_HOME=`which java | awk '{ print substr($1, 1, length($1)-9); }'`
    fi
  fi
fi

# try installing java using yum
if [ -z "$JAVA_HOME" -a -x "`which apt-get`" ] ; then
  yum -qy install java-1.6.0-openjdk
  if [ $?_VAL -gt 0 ]; then
	  echo "The JAVA_HOME environment variable is not defined"
	  echo "This environment variable is needed to run this server"
	  exit 1
  fi
fi

# use 'which' to search for other possible java candidate
if [ -z "$JAVA_HOME" ] ; then
  JAVA=`which java`
  if [ -x "$JAVA" ] ; then
    while [ -h "$JAVA" ] ; do
      ls=`ls -ld "$JAVA"`
      link=`expr "$ls" : '.*-> \(.*\)$'`
      if expr "$link" : '/.*' > /dev/null; then
        JAVA="$link"
      else
        JAVA=`dirname "$JAVA"`/"$link"
      fi
    done
    HOME=`echo "$JAVA" | awk '{ print substr($1, 1, length($1)-9); }'`
    if [ -d "$HOME" ] ; then
      JAVA_HOME="$HOME"
    else
      JAVA_HOME=`which java | awk '{ print substr($1, 1, length($1)-9); }'`
    fi
  fi
fi

# try installing java using apt-get
if [ -z "$JAVA_HOME" -a -x "`which apt-get`" ] ; then
  apt-get -qy update && apt-get -qy install java6-sdk
  if [ $?_VAL -gt 0 ]; then
	  echo "The JAVA_HOME environment variable is not defined"
	  echo "This environment variable is needed to run this server"
	  exit 1
  fi
fi

# use 'which' to search for other possible java candidate
if [ -z "$JAVA_HOME" ] ; then
  JAVA=`which java`
  if [ -x "$JAVA" ] ; then
    while [ -h "$JAVA" ] ; do
      ls=`ls -ld "$JAVA"`
      link=`expr "$ls" : '.*-> \(.*\)$'`
      if expr "$link" : '/.*' > /dev/null; then
        JAVA="$link"
      else
        JAVA=`dirname "$JAVA"`/"$link"
      fi
    done
    HOME=`echo "$JAVA" | awk '{ print substr($1, 1, length($1)-9); }'`
    if [ -d "$HOME" ] ; then
      JAVA_HOME="$HOME"
    else
      JAVA_HOME=`which java | awk '{ print substr($1, 1, length($1)-9); }'`
    fi
  fi
fi

# verify java instance
if [ -z "$JAVA_HOME" ] ; then
  echo "The JAVA_HOME environment variable is not defined"
  echo "This environment variable is needed to run this server"
  exit 1
fi

if $darwin; then
  exec "$JAVA_HOME/bin/java" -Xms64m -Xmx768m -Dfile.encoding=UTF-8 -DuseJavaUtilZip -jar "$0" "$@"
elif [ ! -z "$DISPLAY" ] ; then
  exec "$JAVA_HOME/bin/java" -Xms64m -Xmx768m -Dfile.encoding=UTF-8 -DuseJavaUtilZip -jar "$0" "$@"
else
  LOG="callimachus-install.log"
  "$JAVA_HOME/bin/java" -Xms64m -Xmx768m -Dfile.encoding=UTF-8 -DuseJavaUtilZip -jar "$0" -console "$@" 2> "$LOG"
  RETURN_VAL=$?
  if [ $RETURN_VAL -gt 0 ]; then
    cat "$LOG" >&2
  fi
  rm "$LOG"
  exit $RETURN_VAL
fi

## EOF ##
