# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Purl>.

<Purl> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:PURL;
    rdfs:label "PURL";
    rdfs:comment "Persistent Uniform Resource Location of a Web resource.";
    owl:equivalentClass </callimachus/PURL>, </callimachus/1.0/types/PURL>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/purl.png>;
    calli:view <../templates/purl-view.xhtml>;
    calli:edit <../templates/purl-edit.xhtml>;
    calli:create <../templates/purl-create.xhtml>.

:Redirect rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource].

:queryString a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Redirect;
    rdfs:range xsd:string;
    calli:type "application/x-www-form-urlencoded";
    calli:query "*".

:Proxy rdfs:subClassOf :Redirect.

:contentType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Proxy;
    rdfs:range xsd:string;
    calli:type "text/plain";
    calli:header "Content-Type".

:contentLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Proxy;
    rdfs:range xsd:string;
    calli:type "text/plain";
    calli:header "Content-Location".

:contentEntity a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Proxy;
    rdfs:range <java:org.apache.http.HttpEntity>;
    calli:type "*/*".

:GetRedirect rdfs:subClassOf :Redirect;
    calli:method "GET";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.apache.http.client.methods.HttpGet>;
    calli:imports <java:org.callimachusproject.server.exceptions.ResponseException>;
    calli:script """
        var cacheControl = this.calliCacheControl.toArray();
        var iter = this.FindPurlGetPattern().iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var status = row[0];
            var phrase = row[1];
            var pattern = row[2];
            var request = this.buildRequest("GET", pattern, queryString);
            if (request) {
                var location = request.getURI().toASCIIString();
                if (300 <= status && status < 400 ) {
                    // 301, 302, 303, 307, or 308 responses
                    return {
                        status:status,
                        message:phrase,
                        headers:{'location':location,'cache-control':cacheControl,'content-type':"text/plain"},
                        body:[location]
                    };
                }
                // 200, 203, 404, or 410 responses
                var resp = this.executeRequest(request);
                if (status < 300) {
                    status = resp.statusLine.statusCode;
                    phrase = resp.statusLine.reasonPhrase;
                }
                var headers = {'content-location': resp.getURI().toASCIIString(),'cache-control':cacheControl};
                if (resp.getFirstHeader('location')) {
                    headers['location'] = resp.getFirstHeader('location').value;
                }
                if (resp.getFirstHeader('content-type')) {
                    headers['content-type'] = resp.getFirstHeader('content-type').value;
                }
                if (resp.getFirstHeader('content-location')) {
                    headers['content-location'] = resp.getFirstHeader('content-location').value;
                }
                if (resp.getFirstHeader('last-modified')) {
                    headers['last-modified'] = resp.getFirstHeader('last-modified').value;
                }
                if (resp.getFirstHeader('etag')) {
                    headers['etag'] = resp.getFirstHeader('etag').value;
                }
                if (resp.getFirstHeader('content-version')) {
                    headers['content-version'] = resp.getFirstHeader('content-version').value;
                }
                return {
                    status:status,
                    message:phrase,
                    headers:headers,
                    body:resp.entity
                };
            }
        }
        if (queryString) {
            throw new org.callimachusproject.server.exceptions.MethodNotAllowed();
        } else {
            // default response
            return {
                status:303,
                message:'See Other',
                headers:{'location':this.toString() + "?view",'content-type':"text/plain"},
                body:[this.toString() + "?view"]
            };
        }
    """.

:PostRedirect rdfs:subClassOf :Proxy;
    calli:method "POST";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.apache.http.client.methods.HttpPost>;
    calli:imports <java:org.callimachusproject.server.exceptions.ResponseException>;
    calli:script """
        var iter = this.FindPurlPostPattern().iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var status = row[0];
            var phrase = row[1];
            var pattern = row[2];
            var request = this.buildRequest("POST", pattern, queryString);
            if (request) {
                var location = request.getURI().toASCIIString();
                if (300 <= status && status < 400 ) {
                    // 301, 302, 303, 307, or 308 responses
                    return {
                        status:status,
                        message:phrase,
                        headers:{'location':location,'content-type':"text/plain"},
                        body:[location]
                    };
                }
                // 200, 203, 404, or 410 responses
                if (contentType && !request.containsHeader('content-type')) {
                    request.setHeader('content-type', contentType);
                }
                if (contentLocation && !request.containsHeader('content-location')) {
                    request.setHeader('content-location', contentLocation);
                }
                if (contentEntity && !request.entity) {
                    request.entity = contentEntity;
                }
                var resp = this.executeRequest(request);
                if (status < 300) {
                    status = resp.statusLine.statusCode;
                    phrase = resp.statusLine.reasonPhrase;
                }
                var headers = {};
                if (resp.getFirstHeader('location')) {
                    headers['location'] = resp.getFirstHeader('location').value;
                }
                if (resp.getFirstHeader('content-type')) {
                    headers['content-type'] = resp.getFirstHeader('content-type').value;
                }
                if (resp.getFirstHeader('content-location')) {
                    headers['content-location'] = resp.getFirstHeader('content-location').value;
                }
                if (resp.getFirstHeader('content-version')) {
                    headers['content-version'] = resp.getFirstHeader('content-version').value;
                }
                return {
                    status:status,
                    message:phrase,
                    headers:headers,
                    body:resp.entity
                };
            }
        }
        throw new org.callimachusproject.server.exceptions.MethodNotAllowed();
    """.

:PutRedirect rdfs:subClassOf :Proxy;
    calli:method "PUT";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.apache.http.client.methods.HttpPut>;
    calli:imports <java:org.callimachusproject.server.exceptions.ResponseException>;
    calli:script """
        var iter = this.FindPurlPutPattern().iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var status = row[0];
            var phrase = row[1];
            var pattern = row[2];
            var request = this.buildRequest("PUT", pattern, queryString);
            if (request) {
                var location = request.getURI().toASCIIString();
                if (300 <= status && status < 400 ) {
                    // 301, 302, 303, 307, or 308 responses
                    return {
                        status:status,
                        message:phrase,
                        headers:{'location':location,'content-type':"text/plain"},
                        body:[location]
                    };
                }
                // 200, 203, 404, or 410 responses
                if (contentType && !request.containsHeader('content-type')) {
                    request.setHeader('content-type', contentType);
                }
                if (contentLocation && !request.containsHeader('content-location')) {
                    request.setHeader('content-location', contentLocation);
                }
                if (contentEntity && !request.entity) {
                    request.entity = contentEntity;
                }
                var resp = this.executeRequest(request);
                if (status < 300) {
                    status = resp.statusLine.statusCode;
                    phrase = resp.statusLine.reasonPhrase;
                }
                var headers = {};
                if (resp.getFirstHeader('location')) {
                    headers['location'] = resp.getFirstHeader('location').value;
                }
                if (resp.getFirstHeader('content-type')) {
                    headers['content-type'] = resp.getFirstHeader('content-type').value;
                }
                if (resp.getFirstHeader('content-location')) {
                    headers['content-location'] = resp.getFirstHeader('content-location').value;
                }
                if (resp.getFirstHeader('content-version')) {
                    headers['content-version'] = resp.getFirstHeader('content-version').value;
                }
                return {
                    status:status,
                    message:phrase,
                    headers:headers,
                    body:resp.entity
                };
            }
        }
        throw new org.callimachusproject.server.exceptions.MethodNotAllowed();
    """.

:PatchRedirect rdfs:subClassOf :Proxy;
    calli:method "PATCH";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.apache.http.client.methods.HttpPut>;
    calli:imports <java:org.callimachusproject.server.exceptions.ResponseException>;
    calli:script """
        var iter = this.FindPurlPatchPattern().iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var status = row[0];
            var phrase = row[1];
            var pattern = row[2];
            var request = this.buildRequest("PATCH", pattern, queryString);
            if (request) {
                var location = request.getURI().toASCIIString();
                if (300 <= status && status < 400 ) {
                    // 301, 302, 303, 307, or 308 responses
                    return {
                        status:status,
                        message:phrase,
                        headers:{'location':location,'content-type':"text/plain"},
                        body:[location]
                    };
                }
                // 200, 203, 404, or 410 responses
                if (contentType && !request.containsHeader('content-type')) {
                    request.setHeader('content-type', contentType);
                }
                if (contentLocation && !request.containsHeader('content-location')) {
                    request.setHeader('content-location', contentLocation);
                }
                if (contentEntity && !request.entity) {
                    request.entity = contentEntity;
                }
                var resp = this.executeRequest(request);
                if (status < 300) {
                    status = resp.statusLine.statusCode;
                    phrase = resp.statusLine.reasonPhrase;
                }
                var headers = {};
                if (resp.getFirstHeader('location')) {
                    headers['location'] = resp.getFirstHeader('location').value;
                }
                if (resp.getFirstHeader('content-type')) {
                    headers['content-type'] = resp.getFirstHeader('content-type').value;
                }
                if (resp.getFirstHeader('content-location')) {
                    headers['content-location'] = resp.getFirstHeader('content-location').value;
                }
                if (resp.getFirstHeader('content-version')) {
                    headers['content-version'] = resp.getFirstHeader('content-version').value;
                }
                return {
                    status:status,
                    message:phrase,
                    headers:headers,
                    body:resp.entity
                };
            }
        }
        throw new org.callimachusproject.server.exceptions.MethodNotAllowed();
    """.

:DeleteRedirect rdfs:subClassOf :Redirect;
    calli:method "DELETE";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:imports <java:org.apache.http.client.methods.HttpDelete>;
    calli:imports <java:org.callimachusproject.server.exceptions.ResponseException>;
    calli:script """
        var iter = this.FindPurlDeletePattern().iterator();
        while (iter.hasNext()) {
            var row = iter.next();
            var status = row[0];
            var phrase = row[1];
            var pattern = row[2];
            var request = this.buildRequest("DELETE", pattern, queryString);
            if (request) {
                var location = request.getURI().toASCIIString();
                if (300 <= status && status < 400 ) {
                    // 301, 302, 303, 307, or 308 responses
                    return {
                        status:status,
                        message:phrase,
                        headers:{'location':location,'content-type':"text/plain"},
                        body:[location]
                    };
                }
                // 200, 203, 404, or 410 responses
                var resp = this.executeRequest(request);
                if (status < 300) {
                    status = resp.statusLine.statusCode;
                    phrase = resp.statusLine.reasonPhrase;
                }
                var headers = {};
                if (resp.getFirstHeader('location')) {
                    headers['location'] = resp.getFirstHeader('location').value;
                }
                if (resp.getFirstHeader('content-type')) {
                    headers['content-type'] = resp.getFirstHeader('content-type').value;
                }
                if (resp.getFirstHeader('content-location')) {
                    headers['content-location'] = resp.getFirstHeader('content-location').value;
                }
                if (resp.getFirstHeader('last-modified')) {
                    headers['last-modified'] = resp.getFirstHeader('last-modified').value;
                }
                if (resp.getFirstHeader('etag')) {
                    headers['etag'] = resp.getFirstHeader('etag').value;
                }
                if (resp.getFirstHeader('content-version')) {
                    headers['content-version'] = resp.getFirstHeader('content-version').value;
                }
                return {
                    status:status,
                    message:phrase,
                    headers:headers,
                    body:resp.entity
                };
            }
        }
        throw new org.callimachusproject.server.exceptions.MethodNotAllowed();
    """.

:GetViewPage owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Purl> ]);
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:requires calli:subscriber;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:script """
        return proceed();
    """.

:FindPurlGetPattern rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?status ?phrase (str(?resource) AS ?pattern) {
            {
                $this calli:copy ?resource
                BIND (200 AS ?status)
                BIND ("Copy" AS ?phrase)
            } UNION {
                $this calli:canonical ?resource
                BIND (301 AS ?status)
                BIND ("Canonical" AS ?phrase)
            } UNION {
                $this calli:alternate ?resource
                BIND (302 AS ?status)
                BIND ("Alternate" AS ?phrase)
            } UNION {
                $this calli:describedby ?resource
                BIND (303 AS ?status)
                BIND ("Described by" AS ?phrase)
            } UNION {
                $this calli:resides ?resource
                BIND (307 AS ?status)
                BIND ("Resides" AS ?phrase)
            } UNION {
                $this calli:moved ?resource
                BIND (308 AS ?status)
                BIND ("Moved" AS ?phrase)
            } UNION {
                $this calli:missing ?resource
                BIND (404 AS ?status)
                BIND ("Not found" AS ?phrase)
            } UNION {
                $this calli:gone ?resource
                BIND (410 AS ?status)
                BIND ("Gone" AS ?phrase)
            }
        }
    """.

:FindPurlPostPattern rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?status ?phrase (str(?resource) AS ?pattern) {
            {
                $this calli:post ?resource
                BIND (200 AS ?status)
                BIND ("OK" AS ?phrase)
            } UNION {
                $this calli:resides ?resource
                BIND (307 AS ?status)
                BIND ("Resides" AS ?phrase)
            } UNION {
                $this calli:moved ?resource
                BIND (308 AS ?status)
                BIND ("Moved" AS ?phrase)
            } UNION {
                $this calli:missing ?resource
                BIND (404 AS ?status)
                BIND ("Not found" AS ?phrase)
            } UNION {
                $this calli:gone ?resource
                BIND (410 AS ?status)
                BIND ("Gone" AS ?phrase)
            }
        }
    """.

:FindPurlPutPattern rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?status ?phrase (str(?resource) AS ?pattern) {
            {
                $this calli:put ?resource
                BIND (204 AS ?status)
                BIND ("No Content" AS ?phrase)
            } UNION {
                $this calli:resides ?resource
                BIND (307 AS ?status)
                BIND ("Resides" AS ?phrase)
            } UNION {
                $this calli:moved ?resource
                BIND (308 AS ?status)
                BIND ("Moved" AS ?phrase)
            } UNION {
                $this calli:missing ?resource
                BIND (404 AS ?status)
                BIND ("Not found" AS ?phrase)
            } UNION {
                $this calli:gone ?resource
                BIND (410 AS ?status)
                BIND ("Gone" AS ?phrase)
            }
        }
    """.

:FindPurlPatchPattern rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?status ?phrase (str(?resource) AS ?pattern) {
            {
                $this calli:patch ?resource
                BIND (204 AS ?status)
                BIND ("No Content" AS ?phrase)
            } UNION {
                $this calli:resides ?resource
                BIND (307 AS ?status)
                BIND ("Resides" AS ?phrase)
            } UNION {
                $this calli:moved ?resource
                BIND (308 AS ?status)
                BIND ("Moved" AS ?phrase)
            } UNION {
                $this calli:missing ?resource
                BIND (404 AS ?status)
                BIND ("Not found" AS ?phrase)
            } UNION {
                $this calli:gone ?resource
                BIND (410 AS ?status)
                BIND ("Gone" AS ?phrase)
            }
        }
    """.

:FindPurlDeletePattern rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?status ?phrase (str(?resource) AS ?pattern) {
            {
                $this calli:delete ?resource
                BIND (204 AS ?status)
                BIND ("No Content" AS ?phrase)
            } UNION {
                $this calli:resides ?resource
                BIND (307 AS ?status)
                BIND ("Resides" AS ?phrase)
            } UNION {
                $this calli:moved ?resource
                BIND (308 AS ?status)
                BIND ("Moved" AS ?phrase)
            } UNION {
                $this calli:missing ?resource
                BIND (404 AS ?status)
                BIND ("Not found" AS ?phrase)
            } UNION {
                $this calli:gone ?resource
                BIND (410 AS ?status)
                BIND ("Gone" AS ?phrase)
            }
        }
    """.
