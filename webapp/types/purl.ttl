# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Purl>.

<Purl> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:Purl;
    rdfs:label "PURL";
    rdfs:comment "Persistent Uniform Resource Location of a Web resource.";
    owl:equivalentClass </callimachus/PURL>, </callimachus/1.0/types/PURL>, </callimachus/1.3/types/Purl>, </callimachus/1.4/types/Purl>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/purl.png>;
    calli:thumbnail <../images/purl.svg>;
    calli:view <../templates/purl-view.xhtml>;
    calli:edit <../templates/purl-edit.xhtml>;
    calli:create <../templates/purl-create.xhtml>.

:Redirect rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Purl>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>].

:suffix a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Redirect;
    rdfs:range xsd:string;
    msg:type "text/plain";
    msg:param "0".

:GetRedirect rdfs:subClassOf :Redirect;
    msg:method "GET";
    msg:path ".*";
    calli:requires calli:reader;
    calli:script """
        var cacheControl = this.calliCacheControl.toArray();
        var resp = this.createResponse("GET", suffix);
        if (resp) {
            if (cacheControl.length && resp.containsHeader("Cache-Control")) {
                resp.removeHeaders("Cache-Control");
            }
            for (var i=0; i<cacheControl.length; i++) {
                resp.addHeader("Cache-Control", cacheControl[i]);
            }
            return resp;
        } else if (suffix) {
            throw new org.openrdf.http.object.exceptions.NotFound("Not Found: " + this + suffix);
        } else {
            // default response
            return {
                status:303,
                message:'See Other',
                headers:{'location':this.toString() + "?view",'content-type':"text/plain"},
                body:[this.toString() + "?view"]
            };
        }
    """.

:Proxy rdfs:subClassOf :Redirect.

:contentType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Proxy;
    rdfs:range xsd:string;
    msg:type "text/plain";
    msg:headerParam "Content-Type".

:contentLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :Proxy;
    rdfs:range xsd:string;
    msg:type "text/plain";
    msg:headerParam "Content-Location".

:contentEntity a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :Proxy;
    rdfs:range <java:org.apache.http.HttpEntity>;
    msg:type "*/*".

:PostRedirect rdfs:subClassOf :Proxy;
    msg:method "POST";
    msg:path ".*";
    calli:requires calli:reader;
    calli:imports <java:org.apache.http.message.BasicHttpEntityEnclosingRequest>;
    calli:script """
        var req = new BasicHttpEntityEnclosingRequest("POST", suffix);
        if (contentType) req.setHeader("Content-Type", contentType);
        if (contentLocation) req.setHeader("Content-Location", contentLocation);
        if (contentEntity) req.setEntity(contentEntity);
        var resp = this.createResponse(req);
        if (resp) return resp;
        throw new org.openrdf.http.object.exceptions.MethodNotAllowed("No such method for " + this + suffix);
    """.

:PutRedirect rdfs:subClassOf :Proxy;
    msg:method "PUT";
    msg:path ".*";
    calli:requires calli:reader;
    calli:imports <java:org.apache.http.message.BasicHttpEntityEnclosingRequest>;
    calli:script """
        var req = new BasicHttpEntityEnclosingRequest("PUT", suffix);
        if (contentType) req.setHeader("Content-Type", contentType);
        if (contentLocation) req.setHeader("Content-Location", contentLocation);
        if (contentEntity) req.setEntity(contentEntity);
        var resp = this.createResponse(req);
        if (resp) return resp;
        throw new org.openrdf.http.object.exceptions.MethodNotAllowed("No such method for " + this + suffix);
    """.

:PatchRedirect rdfs:subClassOf :Proxy;
    msg:method "PATCH";
    msg:path ".*";
    calli:requires calli:reader;
    calli:imports <java:org.apache.http.message.BasicHttpEntityEnclosingRequest>;
    calli:script """
        var req = new BasicHttpEntityEnclosingRequest("PATCH", suffix);
        if (contentType) req.setHeader("Content-Type", contentType);
        if (contentLocation) req.setHeader("Content-Location", contentLocation);
        if (contentEntity) req.setEntity(contentEntity);
        var resp = this.createResponse(req);
        if (resp) return resp;
        throw new org.openrdf.http.object.exceptions.MethodNotAllowed("No such method for " + this + suffix);
    """.

:DeleteRedirect rdfs:subClassOf :Redirect;
    msg:method "DELETE";
    msg:path ".*";
    calli:requires calli:reader;
    calli:script """
        var resp = this.createResponse("DELETE", suffix);
        if (resp) return resp;
        throw new org.openrdf.http.object.exceptions.MethodNotAllowed("No such method for " + this + suffix);
    """.

:GetViewPage owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Purl> ]);
    calli:rel "alternate";
    msg:method "GET";
    msg:path "?view";
    calli:requires calli:subscriber;
    msg:type "text/html";
    msg:header "cache-control:no-cache";
    calli:script """
        return proceed();
    """.
