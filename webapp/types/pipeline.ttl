# 
#    Copyright (c) 2012 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>;
    foaf:primaryTopic <Pipeline>.

<Pipeline> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, calli:Pipeline;
    rdfs:label "Pipeline";
    rdfs:comment "XML Processing XProc file";
    owl:equivalentClass </callimachus/Pipeline>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/pipeline.png>;
    calli:view <../templates/pipeline-view.xhtml>;
    calli:edit <../templates/pipeline-edit.xhtml>;
    calli:create <../templates/pipeline-create.xhtml>;
    calli:mediaType "application/xproc+xml";
    calli:documentTag <http://www.w3.org/ns/xproc#pipeline>, <http://www.w3.org/ns/xproc#declare-step>, <http://www.w3.org/ns/xproc#library>.

# GET /pipeline/pipe.xpl
:GetPipelineSource rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/xproc+xml";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# POST ?create=/callimachus/Pipeline
:CreatePipeline owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Pipeline> ]);
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/[_\\-\\+\\s]+/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Document);

        created.UploadPipeline(body);
        return created;
    """.

# PUT /pipeline/pipe.xpl
:UploadPipeline rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:imports foaf:Document;
    calli:script """
        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = xprocStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        try {
            this.ValidatePipeline();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }
        this.touchRevision();
    """.

:xprocStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadPipeline;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xproc+xml".

:ValidatePipeline rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:post "../schemas/xproc.rng?validate\nContent-Location: {+0}\nContent-Type: application/xml".

################################
# Execute Pipeline             #
################################

# GET /pipeline.xpl?results
:GetResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "GET";
    calli:query "results";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:header "cache-control:no-store,no-transform";
    calli:script """
        var pipe = this.pipe();
        try {
            var iterator = queryGetParameters.keySet().iterator();
            while(iterator.hasNext()){
                var key = iterator.next();
                var value = queryGetParameters.get(key);
                if (key != "result" && value && value.length){
                    pipe.passOption(key, value[0]);
                } else if (value && value.length > 1) {
                    pipe.passOption(key, value[1]);
                }
            }
            return {
                status: 200, message: "OK",
                headers: {"content-type": pipe.getMediaType()},
                body: pipe.asStream()
            };
        } finally {
            pipe.close();
        }
    """.

:queryGetParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

# POST /pipeline.xpl?results
:PostResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "results";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:header "cache-control:no-store,no-transform";
    calli:script """
        var pipe = this.pipeStreamOf(sourcePort, sourceLocation, sourceType);
        try {
            var iterator = queryPostParameters.keySet().iterator();
            while(iterator.hasNext()){
                var key = iterator.next();
                var value = queryPostParameters.get(key);
                if (key != "result" && value && value.length){
                    pipe.passOption(key, value[0]);
                } else if (value && value.length > 1) {
                    pipe.passOption(key, value[1]);
                }
            }
            return {
                status: 200, message: "OK",
                headers: {"content-type": pipe.getMediaType()},
                body: pipe.asStream()
            };
        } finally {
            pipe.close();
        }
""".

:queryPostParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.util.Map>;
    calli:query "*";
    calli:type "application/x-www-form-urlencoded".

:sourceLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    calli:header "Content-Location";
    calli:type "text/uri-list".

:sourcePort a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:sourceType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    calli:header "Content-Type";
    calli:type "text/plain".

