# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Composite> a owl:Class;
    rdfs:label "Composite";
    rdfs:subClassOf <Serviceable>, calli:Composite;
    rdfs:isDefinedBy </callimachus>.

################################
# POST INSERT DATA
################################

:PostInsertData rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Serviceable>];
    calli:method "POST";
    calli:query "describe";
    calli:requires calli:administrator;
    calli:expect "201-created";
    calli:type "text/uri-list";
    calli:imports <java:org.openrdf.annotations.Iri>;
    calli:imports <java:org.openrdf.query.QueryLanguage>;
    calli:imports <java:org.callimachusproject.form.helpers.TripleAnalyzer>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.auth.AuthorizationManager>;
    calli:imports <Creatable>;
    calli:imports <Editable>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        //# Parse INSERT DATA
        var analyzer = new TripleAnalyzer();
        var string = analyzer.parseInsertData(insertData, this.toString());
        
        //# Verify input
        if (analyzer.isEmpty())
            throw new BadRequest("Missing data");
        if (!analyzer.isSingleton())
            throw new BadRequest("Only one entity can be inserted per request");
        if (analyzer.isDisconnectedNodePresent())
            throw new BadRequest("Blank nodes must be connected");
        var location = analyzer.subject;
        if (location.toString().indexOf(this.toString()) != 0)
            throw new BadRequest("Resource URI must start with: " + this);
        var local = location.toString().substring(this.toString().length);
        if (local.indexOf('/') == 0 && this.toString().lastIndexOf('/') != this.toString().length - 1) {
            local = local.substring(1);
        }
        if (local.lastIndexOf('/') == local.length - 1) {
            local = local.substring(0, local.length -1);
        }
        if (local.indexOf('/') >= 0)
            throw new BadRequest("Can only created nested components here");
        var newCopy = of.createObject(location, analyzer.getTypes(location));
        if (this.calliHasComponent.contains(newCopy))
            throw new Conflict("Resource already exists");
        if (!(newCopy instanceof Editable))
            throw new BadRequest("Resource is not Editable");

        //# Execute input
        var update = con.prepareUpdate(QueryLanguage.SPARQL, string, this.toString());
        update.setBinding("this", this.resource);
        update.execute();

        var iter = this.FindCreator(newCopy).iterator();
        if (!iter.hasNext())
            throw new InternalServerError("Could not find user");
        var authorization = new AuthorizationManager();
        while (iter.hasNext()) {
            var user = iter.next();
            function findConcepts(klass, visited, callback) {
                if (visited.contains(klass))
                    return true;
                visited.add(klass);
                if (klass.isAnnotationPresent(Iri)) {
                    callback(klass.getAnnotation(Iri).value());
                }
                var sup = klass.getSuperclass();
                if (sup) {
                    findConcepts(sup, visited, callback);
                }
                var interfaces = klass.getInterfaces();
                for (var i = 0; i < interfaces.length; i++) {
                    findConcepts(interfaces[i], visited, callback);
                }
                return false;
            }
            var creatable = false;
            findConcepts(newCopy.getClass(), new java.util.HashSet(), function(type) {
                var cls = con.getObject(type);
                if (cls instanceof Creatable) {
                    creatable = true;
                    if (!authorization.isAuthorized(user.toString(), cls, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                        throw new Forbidden("You are not permitted to create " + cls + " resources");
                }
            });
            if (!creatable)
                throw new Forbidden("You are not permitted to create this type of resource");
        }

        //# Add permissions and component membership
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.SelectAllReaders());
        newCopy.calliSubscriber.addAll(this.SelectAllSubscribers());
        newCopy.calliEditor.addAll(this.SelectAllEditors());
        newCopy.calliAdministrator.addAll(this.SelectAllAdministrators());
        this.calliHasComponent.add(newCopy);
        var iter = analyzer.getResources().iterator();
        while (iter.hasNext()) {
            var partner = iter.next();
            if (!partner.toString().equals(this.toString())) {
                con.getObject(partner).touchRevision(); // FIXME this shouldn't be needed
            }
        }
        return newCopy;
    """.

:insertData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostInsertData;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/sparql-update".

################################
# Create
################################

:GetCreatorPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:query "create";
    calli:requires calli:contributor;
    calli:type "text/html";
    calli:imports <Creatable>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!(create instanceof Creatable))
            throw new BadRequest("Cannot create this class here: " + create);
        if (!create.calliCreate || create.calliCreate.isEmpty())
            throw new InternalServerError("No create template");
        if (create.calliCreate.size() != 1)
            throw new InternalServerError("Multiple create templates");
        var page = create.calliCreate.iterator().next();
        return create.GetPageTemplate(page, page.FindRealmOf(this));
    """.

:PostFactoryCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "create";
    calli:requires calli:contributor;
    calli:type "message/x-response";
    calli:imports <Creatable>;
    calli:imports <java:org.callimachusproject.io.MultipartParser>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.xml.XMLEventReaderFactory>;
    calli:imports <java:org.callimachusproject.server.auth.AuthorizationManager>;
    calli:script """
        if (!location)
            throw new BadRequest("No location provided");
        if (!(create instanceof Creatable))
            throw new BadRequest("Cannot create: " + create);
        var creatorUri = this.toString();
        var createdUri = location.toString();
        var dest = createdUri.substring(0, createdUri.lastIndexOf('/', createdUri.length - 2) + 1);
        if (creatorUri != dest && creatorUri != dest.substring(0, dest.length - 1))
            throw new BadRequest("Location URI must be nested");
        if (createdUri.search(/[\\s\\#\\?]/) >= 0 || createdUri.search(/^\\w+:\\/\\/\\S+/) != 0)
            throw new BadRequest("Fragement or name resources are not supported");
        var ftype = type;
        var documentTag = null;
        var bio = new org.callimachusproject.io.LatencyInputStream(body);
        try {
            if (type && type.indexOf("multipart/form-data") == 0) {
                bio.mark(1024);
                var parser = new MultipartParser(bio);
                var file = parser.next();
                var headers = parser.getHeaders();
                var disposition = headers.get("content-disposition");
                if (disposition && disposition.indexOf("filename=") >= 0) {
                    ftype = headers.get("content-type");
                    var xml = ftype == "text/xml" || ftype == "application/xml";
                    if (xml || ftype == "application/octet-stream" || ftype.indexOf("application/x-") == 0) {
                        var fileName = disposition.replace(/.*filename="/g, '').replace(/".*/g, '');
                        var mimetypes = new javax.activation.MimetypesFileTypeMap();
                        var mtype = mimetypes.getContentType(fileName);
                        if (!"application/octet-stream".equals(mtype)) {
                            ftype = mtype;
                        }
                    }
                    bio = new org.callimachusproject.io.LatencyInputStream(file);
                } else { // not a file upload
                    bio.reset();
                }
            } else if (!ftype) {
                var mimetypes = new javax.activation.MimetypesFileTypeMap();
                ftype = mimetypes.getContentType(location.toString());
            }
            if (!ftype) {
                ftype = "application/octet-stream";
            } else if (ftype == "text/xml" || ftype == "application/xml" ||
                    ftype.indexOf("+xml") > 0) {
                bio.mark(1024);
                var xmlFactory = XMLEventReaderFactory.newInstance();
                var xml = xmlFactory.createXMLEventReader(createdUri, bio);
                var qname = xml.nextTag().name;
                if (qname.namespaceURI) {
                    var ns = qname.namespaceURI;
                    if (ns.indexOf('#') < 0 && ns.lastIndexOf('/') < ns.length - 1 && ns.lastIndexOf(':') < ns.length - 1) {
                        ns = ns + '#';
                    }
                    var of = this.objectConnection.objectFactory;
                    documentTag = of.createObject(ns + qname.localPart);
                }
                bio.reset();
            }
        } catch (e if e.javaException) {
            throw new BadRequest(e.javaException);
        }
        var construct = create.LookupConstructor(documentTag, ftype);
        var newCopy = construct.PostCreate(bio, location, ftype);
        var authorization = new AuthorizationManager();
        var iter = this.FindCreator(newCopy).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (!authorization.isAuthorized(user.toString(), construct, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                throw new Forbidden("You are not permitted to create " + construct + " resources");
        }
        newCopy.calliEditor.addAll(this.FindContributor(newCopy));
        newCopy.calliReader.addAll(this.SelectAllReaders());
        newCopy.calliSubscriber.addAll(this.SelectAllSubscribers());
        newCopy.calliEditor.addAll(this.SelectAllEditors());
        newCopy.calliAdministrator.addAll(this.SelectAllAdministrators());
        if (intermediate) {
            var revision = this.provWasGeneratedBy;
            this.calliHasComponent.add(newCopy);
            this.provWasGeneratedBy = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(newCopy);
        }
        return { status:201, message:'Created', headers:{ location:newCopy.toString(), 'content-type':'text/plain' }, body:[newCopy.toString()] };
    """.

:body a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:create a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:GetCreatorPage :PostFactoryCreate)];
    rdfs:range <Creatable>;
    calli:query "create";
    calli:type "text/uri-list".

:intermediate a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range xsd:boolean;
    calli:query "intermediate".

:location a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFactoryCreate;
    calli:query "location";
    calli:type "text/uri-list".

:type a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFactoryCreate;
    rdfs:range xsd:string;
    calli:header "Content-Type".

################################
# Export
################################

:ExportComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <Folder>;
    calli:imports <Composite>;
    calli:imports <File>;
    calli:imports <Class>;
    calli:script """
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var xf = new org.callimachusproject.io.RDFXMLStreamWriterFactory();
        function writeTo(triples, entryStream) {
            try {
                var writer = xf.createWriter(entryStream, component.toString());
                writer.startRDF();
                var namespaces = component.objectConnection.getNamespaces();
                while (namespaces.hasNext()) {
                    var ns = namespaces.next();
                    writer.handleNamespace(ns.getPrefix(), ns.getName());
                }
                while (triples.hasNext()) {
                    var st = triples.next();
                    var pred = st.predicate.toString();
                    if (pred != "http://www.w3.org/ns/prov#wasGeneratedBy"
                            && pred != "http://www.openrdf.org/rdf/2011/keyword#phone") {
                        writer.handleStatement(st);
                    }
                }
                writer.endRDF();
            } finally {
                entryStream.close();
            }
        }
        var writtenNames = new java.util.HashSet();
        var components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component.toString().indexOf(baseURI) != 0)
                continue;
            var name = component.toString().substring(baseURI.length);
            if (!writtenNames.add(name))
                continue;
            var time = 0;
            if (component.provWasGeneratedBy && component.provWasGeneratedBy.provEndedAtTime) {
                time = component.provWasGeneratedBy.provEndedAtTime.toGregorianCalendar().getTimeInMillis();
            } else {
                time = java.lang.System.currentTimeMillis();
            }
            if (name.lastIndexOf('/') == name.length - 1 && component instanceof Folder) {
                //# Export Folder
                if (component.calliDescribedby.empty
                        && this.calliReader == component.calliReader
                        && this.calliSubscriber == component.calliSubscriber
                        && this.calliEditor == component.calliEditor
                        && this.calliAdministrator == component.calliAdministrator) {
                    carStream.writeFolderEntry(name, time).close();
                } else {
                    //# Export Folder Triples
                    var triples = component.GetRdfFolderDescription();
                    try {
                        writeTo(triples, carStream.writeResourceEntry(name, time, "application/rdf+xml"));
                    } finally {
                        triples.close();
                    }
                }
            } else if (component instanceof File) {
                //# Export File
                var content = component.openInputStream();
                if (content) {
                    try {
                        var entryStream = carStream.writeFileEntry(name, time, component.GetContentMediaType());
                        try {
                            var read;
                            while ((read = content.read(buf)) >= 0) {
                                entryStream.write(buf, 0, read);
                            }
                        } finally {
                            entryStream.close();
                        }
                    } finally {
                        content.close();
                    }
                } else if (component.objectConnection.hasStatement(null, null, null, false, [component.resource])) {
                    //# Export Graph
                    var triples = component.objectConnection.getStatements(null, null, null, false, [component.resource]);
                    try {
                        writeTo(triples, carStream.writeFileEntry(name, time, "application/rdf+xml"));
                    } finally {
                        triples.close();
                    }
                }
            } else if (component instanceof Class) {
                //# Export Schema
                var triples = component.GetRdfDescription();
                try {
                    writeTo(triples, carStream.writeSchemaEntry(name, time, "application/rdf+xml"));
                } finally {
                    triples.close();
                }
            } else {
                //# Export Triples
                var triples = component.GetRdfDescription();
                try {
                    writeTo(triples, carStream.writeResourceEntry(name, time, "application/rdf+xml"));
                } finally {
                    triples.close();
                }
            }
            //# Export nested components
            if (component instanceof Composite) {
                component.ExportComponents(baseURI, carStream);
            }
        }
    """.

:baseURI a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :ExportComponents;
    rdfs:range xsd:string.

:carStream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :ExportComponents;
    rdfs:range <java:org.callimachusproject.io.CarOutputStream>.

:DeleteComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <Composite>;
    calli:imports <java:org.openrdf.model.BNode>;
    calli:imports <java:org.openrdf.model.URI>;
    calli:imports <java:javax.tools.FileObject>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.getValueFactory();
        function removeTriples(subject, hash) {
            var stmts = con.getStatements(subject, null, null, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    if (st.object instanceof BNode && !st.object.equals(subject)) {
                        removeTriples(st.object, hash);
                    } else if (st.object instanceof URI && !st.object.equals(subject)) {
                        if (st.object.stringValue().indexOf(hash) == 0) {
                            removeTriples(st.object, hash);
                        } else {
                            con.getObjectFactory().createObject(st.object).touchRevision();
                        }
                    }
                    con.remove(st, []);
                }
            } finally {
                stmts.close();
            }
        }
        var components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component instanceof Composite) {
                component.DeleteComponents();
            }

            con.clear([component.resource]); //# clear graph
            removeTriples(component.resource, component.resource.stringValue() + '#'); //# follow blank and hash references
            if (component instanceof FileObject) {
                component['delete'](); //# remove document
            }
            components.remove();
        }
    """.

################################
# Helper Messages
################################

# find the user that will create $thing
:FindCreator rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
        }
    """.

:thing a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreator.

# find the user that created $thing if they are not otherwise editors
:FindContributor rdfs:subClassOf :FindCreator;
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            ?activity prov:used $thing; prov:wasAssociatedWith ?contributor
            FILTER NOT EXISTS {
                {
                    $this ?editor ?contributor
                } UNION {
                    $this ?editor [calli:member ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor ?contributor]
                } UNION {
                    $this rdf:type/rdfs:subClassOf* [?editor [calli:member ?contributor]]
                }
                FILTER (?editor = calli:editor || ?editor = calli:administrator)
            }
        }
    """.

:SelectAllReaders rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?reader
        WHERE {
            {
                $this calli:reader ?reader
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:reader ?reader
            }
        }
    """.

:SelectAllSubscribers rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?subscriber
        WHERE {
            {
                $this calli:subscriber ?subscriber
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:subscriber ?subscriber
            }
        }
    """.

:SelectAllEditors rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?editor
        WHERE {
            {
                $this calli:editor ?editor
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:editor ?editor
            }
        }
    """.

:SelectAllAdministrators rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom calli:Party];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?admin
        WHERE {
            {
                $this calli:administrator ?admin
            } UNION {
                $this rdf:type/rdfs:subClassOf*/calli:administrator ?admin
            }
        }
    """.

