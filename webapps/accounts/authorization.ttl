# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

################################
# Authentication
################################

# all common modification operations must be authenticated
</callimachus/operations/copy.ttl#GetCopyPage> msg:realm </accounts>.
</callimachus/operations/copy.ttl#PostCopy> msg:realm </accounts>.
</callimachus/operations/edit.ttl#GetEditPage> msg:realm </accounts>.
</callimachus/operations/edit.ttl#PostEdit> msg:realm </accounts>.
</callimachus/operations/delete.ttl#Delete> msg:realm </accounts>.
</callimachus/queries/discussion.ttl#PostDiscussion> msg:realm </accounts>.

# Transaction operations must be authenticated
audit:Transaction a owl:Class; msg:realm </accounts>.

################################
# Authorization
################################

# interface method used by DigestRealmSupport
:AuthorizeCredential rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean].

:credential a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential.

:method a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string;.

:object a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential.

:query a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string.

# users associated with the object are authorized
:AuthorizeMaintainer owl:equivalentClass :AuthorizeCredential;
	msg:sparql  """
		ASK {
			{
				$object calli:scribe $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:curator $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:maintainer $credential
			}
		}
	""".

# members of groups associated with the object are authorized
:AuthorizeMember owl:equivalentClass :AuthorizeCredential;
	msg:sparql  """
		ASK {
			?group calli:member $credential
			{
				$object calli:scribe ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:curator ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:maintainer ?group
			}
		}
	""".

# users or groups associated as conservator of a class of the object are authorized
:AuthorizeConservator owl:equivalentClass :AuthorizeCredential;
	msg:script <authorization.js#isConservator>.

# users or groups associated as reviewer of a class of the object are authorized
:AuthorizeReviewer owl:equivalentClass :AuthorizeCredential;
	msg:script <authorization.js#isReviewer>.

# anybody with credentials can login and is welcome
:AuthorizeLoginPage owl:equivalentClass :AuthorizeCredential;
	msg:sparql  """
		ASK {
			$object calli:authenticates [calli:member $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($object = </accounts>)
			FILTER ($query = "login" || $query = "settings" || $query = "contributions")
		}
	""".

# any authenticated user can view any other user
:AuthorizeUserView owl:equivalentClass :AuthorizeCredential;
	msg:sparql  """
		ASK {
			$object a </accounts/User>
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER (!bound($query) || $query = "view" || $query = "discussion")
		}
	""".

# Group curators can create users if they can also create groups
:AuthorizeUserCreate owl:equivalentClass :AuthorizeCredential;
	msg:imports </accounts/Group>;
	msg:script """
		if (query == "usercreate" && object instanceof Group)
			return this.AuthorizeCredential(credential, method, object, "copy");
		return proceed();
	""".

# transcations are authorized by the object they modified
:AuthorizeTransactionView owl:equivalentClass :AuthorizeCredential;
	msg:script <authorization.js#isViewingTransaction>.

:ListSubjectsOfTransaction rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue </accounts>];
	msg:sparql  """
		SELECT DISTINCT ?subj
		WHERE {
			$transaction a audit:Transaction
			{
				GRAPH $transaction { ?subj ?pred ?obj }
			} UNION {
				GRAPH $transaction { [rdf:subject ?subj] }
			} UNION {
				$transaction audit:contained [rdf:subject ?subj]
			}
			OPTIONAL { ?subj a ?trans FILTER(?trans = audit:Transaction) }
			FILTER (!bound(?trans))
		}
	""".

:transaction a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :ListSubjectsOfTransaction;
	rdfs:range audit:Transaction.

