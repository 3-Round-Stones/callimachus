# 
#    Copyright (c) 2014 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <ExtensibleMarkup>.

<ExtensibleMarkup> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>;
    rdfs:label "XML file" ;
    rdfs:comment "A file encoded in Extensible Markup Language (XML)." ;
    owl:equivalentClass </callimachus/1.3/types/ExtensibleMarkup>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/xml.png>;
    calli:thumbnail <../images/xml.svg>;
    calli:edit <../templates/xml-edit.xhtml>;
    calli:create <../templates/xml-create.xhtml>;
    calli:mediaType "application/xml".

# GET /file.xml
:GetExtensibleMarkup rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ExtensibleMarkup>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/xml";
    calli:header "cache-control:cache-range";
    calli:script "return this.openInputStream()".

# POST ?create=/callimachus/ExtensibleMarkup
:PostExtensibleMarkupCreate owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <ExtensibleMarkup>]);
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:javax.mail.util.ByteArrayDataSource>;
    calli:imports <java:javax.mail.internet.MimeMultipart>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports <File>;
    calli:imports foaf:Document ;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/[_\\-\\+\\s]+/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        //# dcterms:created
        var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
        con.add(created.resource, DCTERMS.CREATED, vf.createLiteral(now), []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Document);

        var out = created.PutExtensibleMarkup(body) ;

        return created;
    """.

:PutExtensibleMarkup rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ExtensibleMarkup>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:script """
        //# dcterms:modified
        var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
        this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);

        var out = this.openOutputStream() ;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var read;
        try {
            while ((read = xmlStream.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }
        try {
            this.ValidateExtensibleMarkup();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }
        this.touchRevision();
    """.
:xmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PutExtensibleMarkup;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xml".

:ValidateExtensibleMarkup rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ExtensibleMarkup>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:post "../schemas/xml.rng?validate\nContent-Location: {+0}\nContent-Type: application/xml".
