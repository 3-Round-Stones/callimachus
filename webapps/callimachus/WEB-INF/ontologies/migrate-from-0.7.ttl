@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:MigrateSkos owl:equivalentClass calli:Started;
	msg:imports <java:org.openrdf.model.vocabulary>;
	msg:script """
		var con = this.objectConnection;
		var vf = con.valueFactory;
		var skos = "http://www.w3.org/2004/02/skos/core#";
		var calli = "http://callimachusproject.org/rdf/2009/framework#";
		var maintainer = vf.createURI(calli, "maintainer");

		var skosConceptScheme = vf.createURI(skos, "ConceptScheme");
		var schemes = con.getStatements(null, RDF.TYPE, skosConceptScheme, true, []);
		try {
			while (schemes.hasNext()) {
				var st = schemes.next();
				if (!con.hasStatement(st.subject, RDFS.LABEL, null, true, [])) {
					var prefLabels = con.getStatements(st.subject, vf.createURI(skos, "prefLabel"), null, true, []);
					try {
						while (prefLabels.hasNext()) {
							var obj = prefLabels.next().object;
							java.lang.System.err.println("Migrating label " + st.subject);
							con.add(st.subject, RDFS.LABEL, obj, []);
						}
					} finally {
						prefLabels.close();
					}
				}
			}
		} finally {
			schemes.close();
		}

		function migrate(concept) {
			var skosConcept = vf.createURI(skos, concept);
			var concepts = con.getStatements(null, RDF.TYPE, skosConcept, true, []);
			try {
				while (concepts.hasNext()) {
					var st = concepts.next();
					var maintainers = con.getStatements(st.subject, maintainer, null, true, []);
					try {
						while (maintainers.hasNext()) {
							var obj = maintainers.next().object.stringValue();
							if (obj.indexOf("/group/admin") > 0) {
								var origin = obj.substring(0, obj.indexOf("/group/admin"));
								var type = vf.createURI(origin + "/callimachus/skos/" + concept);
								if (!con.hasStatement(st.subject, RDF.TYPE, type, true, [])) {
									java.lang.System.err.println("Migrating " + st.subject);
									con.add(st.subject, RDF.TYPE, type, []);
								}
								break;
							}
						}
					} finally {
						maintainers.close();
					}
				}
			} finally {
				concepts.close();
			}
		}

		migrate("ConceptScheme");
		migrate("Concept");
		proceed();
	""".

