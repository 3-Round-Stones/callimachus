# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Folder> a <Creatable>, owl:Class;
    rdfs:subClassOf <Composite>, <PURL>, calli:Folder;
    rdfs:label "Folder";
    rdfs:comment "A folder of resources";
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/users>,</group/staff>,</group/admin>;
    calli:icon <images/folder.png>;
    calli:view <templates/folder-view.xhtml>;
    calli:edit <templates/folder-edit.xhtml>;
    calli:create <templates/folder-create.xhtml>.

# when a Folder is created
:CreateFolder owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <Folder> ]);
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        var uri = location.toString();
        if (uri.lastIndexOf('/') != uri.length - 1)
            throw new BadRequest("Folders must end with a slash");
        return proceed();
    """.

################################
# POST file
################################

:PostFileSlug rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    rdfs:subClassOf [owl:onProperty :fileClass; owl:hasValue <File>];
    calli:method "POST";
    calli:query "contents";
    calli:requires calli:administrator;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.engine.model.TermFactory>;
    calli:script """
        if (!slug)
            throw new BadRequest("Missing Slug HTTP header");
        if (!contentType)
            throw new BadRequest("Missing Content-Type HTTP header");
        if (!content)
            throw new BadRequest("Missing request content");
        var con = this.objectConnection;
        var name = decodeURIComponent(slug);
        name = name.replace(/[-\\s]+/g, '-');
        name = java.text.Normalizer.normalize(name, java.text.Normalizer.Form.NFD);
        name = name.replace(/[^\\w-]/g, '');
        if (name == name.toUpperCase()) {
            name = name.toLowerCase();
        }
        var uri = TermFactory.newInstance(this.toString()).resolve(encodeURIComponent(name));
        return this.PostFactoryCreate(content, fileClass, false, con.getObject(uri), contentType);
    """.

:slug a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostFileSlug;
    rdfs:range xsd:string;
    calli:header "Slug".

:contentType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostFileSlug;
    rdfs:range xsd:string;
    calli:header "Content-Type".

:content a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFileSlug;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:fileClass a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostFileSlug.

################################
# List folder contents
################################

:GetFolderFeed rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:query "contents";
    calli:rel "contents";
    calli:requires calli:reader;
    calli:type "application/atom+xml;q=0.9";
    calli:header "cache-control:no-cache";
    calli:copy <pipelines/folder-contents-atom.xpl?results&target=$0>.

################################
# Recent Changes
################################

:GetFolderChanges rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:query "changes";
    calli:rel "alternate";
    calli:requires calli:subscriber;
    calli:type "text/html";
    calli:copy </callimachus/pipelines/folder-changes-html.xpl?results&target=$0>.
    
:GetFolderChangeAtom rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:query "changes";
    calli:requires calli:subscriber;
    calli:type "application/atom+xml;q=0.9";
    calli:header "cache-control:no-store";
    calli:copy <pipelines/folder-changes-atom.xpl?results&target=$0>.
    
################################
# Export folder contents
################################

:DownloadFolderComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    calli:method "GET";
    calli:query "archive";
    calli:rel calli:archive;
    calli:requires calli:administrator;
    calli:type "message/x-response";
    calli:header "cache-control:no-store";
    calli:imports <java:org.apache.http.ProtocolVersion>;
    calli:imports <java:org.apache.http.message.BasicHttpResponse>;
    calli:imports <java:org.apache.http.entity.InputStreamEntity>;
    calli:script """
        var http11 = new ProtocolVersion("HTTP", 1, 1);
        var resp = new BasicHttpResponse(http11, 200, "OK");
        var name = this.resource.localName;
        var filename = this.toUri().path.substring(1).replace(/\\//g, '-') + this.toUri().authority.replace(/:.*/,'') + '.car';
        resp.setHeader("Content-Disposition", 'attachment;filename="' + filename + '"');
        var baseURI = this.toString();
        if (this.calliHasComponent.isEmpty() || baseURI.charAt(baseURI.length - 1) != '/')
            return null;
        var component = this;
        var entity = new InputStreamEntity(new org.callimachusproject.server.util.ProducerStream(function(outputStream) {
            var carStream = new org.callimachusproject.io.CarOutputStream(outputStream);
            component.ExportComponents(baseURI, carStream);
            carStream.finish();
        }), -1);
        entity.contentType = "application/zip";
        resp.setEntity(entity);
        return resp;
    """.

:GetRdfFolderDescription rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            $this a <Folder>, calli:Folder;
                rdfs:label ?label;
                calli:describedby ?describedby;
                calli:reader ?reader;
                calli:subscriber ?subscriber;
                calli:editor ?editor;
                calli:administrator ?administrator.
        } WHERE {
            $this a <Folder>
            {
                $this rdfs:label ?label
            } UNION {
                $this calli:describedby ?describedby
            } UNION {
                $this calli:reader ?reader
            } UNION {
                $this calli:subscriber ?subscriber
            } UNION {
                $this calli:editor ?editor
            } UNION {
                $this calli:administrator ?administrator
            }
        }
    """.

################################
# Import folder contents
################################

:GetFolderUploadPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    rdfs:subClassOf [owl:onProperty :folder_import_xhtml; owl:hasValue <pages/folder-import.xhtml>];
    calli:method "GET";
    calli:query "import";
    calli:requires calli:administrator;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:script """
        return folder_import_xhtml.Construct(this, 'import');
    """.

:folder_import_xhtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetFolderUploadPage.

:ImportFolderComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "POST";
    calli:query "import";
    calli:requires calli:administrator;
    calli:expect "302-see-other";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        var bio = new org.callimachusproject.io.LatencyInputStream(formData);
        var multipart = new org.callimachusproject.io.MultipartParser(bio);
        var inputStream = multipart.next();
        try {
            println("Importing folder content from: " + multipart.headers.get("content-disposition"));
            this.UploadFolderComponents(inputStream, null, null);
            println("Imported folder content for: " + this);
            return this;
        } finally {
            inputStream.close();
            if (multipart.next() != null)
                throw new BadRequest("Only one file can be uploaded");
        }
    """.

:formData a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :ImportFolderComponents;
    rdfs:range <java:java.io.InputStream>;
    calli:type "multipart/form-data".

:DeleteFolderContents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "DELETE";
    calli:query "archive";
    calli:requires calli:administrator;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        var con = this.objectConnection;
        var dependency = new java.util.HashSet(this.FindComponentsWithExternalDependent());
        this.DeleteComponents(); //# remove existing components
        var iter = dependency.iterator();
        while (iter.hasNext()) {
            var stmts = con.getStatements(null, null, iter.next().resource, true, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    var pred = st.predicate;
                    if ("http://www.w3.org/1999/02/22-rdf-syntax-ns#".equals(pred.namespace))
                        continue;
                    if ("http://www.w3.org/ns/prov#".equals(pred.namespace))
                        continue;
                    var subj = st.subject;
                    if (subj instanceof org.openrdf.model.URI)
                        throw new BadRequest("The folder contents cannot be deleted as they are required by at least: " + subj);
                    throw new BadRequest("The folder contents cannot be deleted as they are required by other resources");
                }
            } finally {
                stmts.close();
            }
        }
    """.

:UploadFolderComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    rdfs:subClassOf [owl:onProperty :uploadFileClass; owl:hasValue <File>];
    rdfs:subClassOf [owl:onProperty :schemaGraphClass; owl:hasValue <SchemaGraph>];
    calli:method "PUT";
    calli:query "archive";
    calli:requires calli:administrator;
    calli:imports <Composite>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:imports <java:org.openrdf.model.vocabulary.RDF>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.getValueFactory();
        function readFrom(type, entryStream, uri, graphs) {
            var inserter = new org.callimachusproject.form.helpers.TripleInserter(con);
            inserter.enforceContext(graphs);
    		var registry = org.openrdf.rio.RDFParserRegistry.getInstance();
			var parser = registry.get(registry.getFileFormatForMIMEType(type)).getParser();
            parser.setValueFactory(vf);
            parser.setRDFHandler(inserter);
            parser.parse(entryStream, uri);
            if (inserter.isEmpty())
                throw new BadRequest("Missing resource information for: " + uri);
            if (!inserter.isSingleton())
                throw new BadRequest("Multiple resources for: " + uri);
            if (inserter.getSubject().toString() != uri)
                throw new BadRequest("Wrong subject for: " + uri);
            if (inserter.isDisconnectedNodePresent())
                throw new BadRequest("Blank nodes must be connected in: " + uri);
        }
        var baseURI = this.toString();
        if (baseURI.lastIndexOf('/') != baseURI.length - 1) {
            baseURI = baseURI + '/';
        }
        var File = uploadFileClass;
        var SchemaGraph = schemaGraphClass.resource;
        var dependency = new java.util.HashSet(this.FindComponentsWithExternalDependent());
        this.DeleteComponents(); //# remove existing components
        var name;
        var carStream = new org.callimachusproject.io.CarInputStream(payload);
        while (name = carStream.readEntryName()) {
            var uri = baseURI + name;
            var location = con.getObject(uri);
            var folder = null;
            var container = this.FindExistingContainer(location);
            if (!container) {
                container = folder = con.getObject(uri.substring(0, uri.lastIndexOf('/', uri.length - 2) + 1));
                if (!(container instanceof Composite)) {
                    container = folder = this.DesignateAsFolder(container);
                }
            }
            var entryStream = carStream.getEntryStream();
            var type = carStream.getEntryType();
            try {
                if (carStream.isFolderEntry()) {
                    this.DesignateAsFolder(location);
                    dependency.remove(location);
                } else if (carStream.isFileEntry()) {
                    if (!(container instanceof Composite))
                        throw new BadRequest("Schema data about " + container + " must be imported before " + uri);
                    container.PostFactoryCreate(entryStream, File, null, location, type);
                    dependency.remove(location);
                } else if (carStream.isResourceEntry()) {
                    readFrom(type, entryStream, uri, []);
                    if (folder) {
                        folder.calliHasComponent.add(location);
                    }
                    dependency.remove(location);
                } else if (carStream.isSchemaEntry()) {
                    var graphURI = vf.createURI(con.getActivityURI().stringValue() + "#schema");
                    con.add(graphURI, RDF.TYPE, SchemaGraph, []);
                    readFrom(type, entryStream, uri, [graphURI]);
                    //# copy rdf:type to activity graph
                    con.add(con.getStatements(vf.createURI(uri), RDF.TYPE, null, false, [graphURI]), [con.getActivityURI()]);
                    if (folder) {
                        folder.calliHasComponent.add(location);
                    }
                    dependency.remove(location);
                    con.recompileSchemaOnClose();
                }
            } catch (e) {
                println("Could not import " + name + " a " + type + " into " + container);
                throw e;
            } finally {
                entryStream.close();
            }
        }
        var iter = dependency.iterator();
        while (iter.hasNext()) {
            var stmts = con.getStatements(null, null, iter.next().resource, true, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    var pred = st.predicate;
                    if ("http://www.w3.org/1999/02/22-rdf-syntax-ns#".equals(pred.namespace))
                        continue;
                    if ("http://www.w3.org/ns/prov#".equals(pred.namespace))
                        continue;
                    if ("http://www.openrdf.org/rdf/2009/auditing#".equals(pred.namespace))
                        continue;
                    throw new BadRequest("Required resource(s) not present, including: " + st.object);
                }
            } finally {
                stmts.close();
            }
        }
    """.

:payload a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :UploadFolderComponents;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/zip".

:uploadFileClass a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :UploadFolderComponents.

:schemaGraphClass a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :UploadFolderComponents.

:FindComponentsWithExternalDependent rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Serviceable>];
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?component {
            $this calli:hasComponent+ ?component .
            ?external ?dependent ?component
            FILTER (!isIRI(?external) || !strstarts(str(?external), str($this)))
            FILTER (?dependent != prov:used && ?dependent != prov:wasInformedBy)
            FILTER (?dependent != rdf:subject && ?dependent != rdf:object)
        }
    """.

:FindExistingContainer rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
        PREFIX skosxl:<http://www.w3.org/2008/05/skos-xl#>
        PREFIX dc:<http://purl.org/dc/elements/1.1/>
        PREFIX dcterms:<http://purl.org/dc/terms/>
        PREFIX foaf:<http://xmlns.com/foaf/0.1/>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT ?composite {
            ?composite calli:hasComponent $component
        }
    """.

:component a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :FindExistingContainer.

:DesignateAsFolder rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Folder>];
    calli:imports <Folder>;
    calli:imports <Composite>;
    calli:imports <java:org.openrdf.model.vocabulary.RDF>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (nonFolder instanceof Folder)
            return nonFolder;
        var con = this.objectConnection;
        var vf = con.getValueFactory();
        var uri = nonFolder.toString();
        var container = this.FindExistingContainer(nonFolder);
        if (!container) {
            container = con.getObject(uri.substring(0, uri.lastIndexOf('/', uri.length - 2) + 1));
            if (!(container instanceof Folder)) {
                container = this.DesignateAsFolder(container);
            }
        }
        if (!(container instanceof Composite))
            throw new BadRequest("Schema data about " + container + " must be imported before " + uri);
        var label = decodeURI(uri.substring(uri.lastIndexOf('/', uri.length - 2) + 1, uri.length - 1)).replace(/-/g, ' ');
        con.add(nonFolder.resource, RDFS.LABEL, vf.createLiteral(label), []);
        nonFolder.calliReader.addAll(container.calliReader);
        nonFolder.calliSubscriber.addAll(container.calliSubscriber);
        nonFolder.calliEditor.addAll(container.calliEditor);
        nonFolder.calliAdministrator.addAll(container.calliAdministrator);
        container.calliHasComponent.add(nonFolder);
        con.add(nonFolder.resource, RDF.TYPE, vf.createURI("http://callimachusproject.org/rdf/2009/framework#Folder"), []);
        return con.addDesignation(nonFolder, Folder);
    """.

:nonFolder a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :DesignateAsFolder.

