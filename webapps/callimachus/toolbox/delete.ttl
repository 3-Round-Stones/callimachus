# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:Delete rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Editable];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "DELETE";
	msg:realm </callimachus/manifest>;
	msg:imports <java:org.openrdf.model.BNode>;
	msg:imports <java:org.openrdf.model.URI>;
	msg:imports <java:javax.tools.FileObject>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:script """
		var con = this.objectConnection;
		var stmts = con.getStatements(null, null, this.resource, []);
		try {
			while (stmts.hasNext()) {
				var st = stmts.next();
				var subj = st.subject;
				var pred = st.predicate.stringValue();
				if (pred != "http://www.w3.org/1999/02/22-rdf-syntax-ns#subject"
						&& pred != "http://www.w3.org/1999/02/22-rdf-syntax-ns#object") {
					//# Don't allow removal if used in a complex structure (like an rdf:List)
					if (subj instanceof BNode)
						throw new Conflict("This resource is currently is use and cannot be removed");
					if (subj.stringValue().indexOf('#') >= 0)
						throw new Conflict("This resource is currently referenced: " + subj);
					con.remove(st, []);
				}
			}
		} finally {
			stmts.close();
		}

		function removeTriples(subject, hash) {
			var stmts = con.getStatements(subject, null, null, []);
			try {
				while (stmts.hasNext()) {
					var st = stmts.next();
					if (st.object instanceof BNode && !st.object.equals(subject)) {
						removeTriples(st.object, hash);
					} else if (st.object instanceof URI && !st.object.equals(subject)) {
						if (st.object.stringValue().indexOf(hash) == 0) {
							removeTriples(st.object, hash);
						} else {
							con.getObjectFactory().createObject(st.object).touchRevision();
						}
					}
					con.remove(st, []);
				}
			} finally {
				stmts.close();
			}
		}

		con.clear([this.resource]); //# clear graph
		removeTriples(this.resource, this.resource.stringValue() + '#'); //# follow blank and hash references
		if (this instanceof FileObject) {
			this['delete'](); //# remove document
		}
	""".

:DeleteComposite owl:intersectionOf ( :Delete
		[owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (calli:Editable calli:Composite)]]);
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:script """
		if (this.HasComponents())
			throw new Conflict("Child resources must be deleted first");
		return proceed();
	""".

:HasComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Composite];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality 1];
	msg:sparql """
		ASK {
			$this calli:hasComponent ?child
		}
	""".

:DeleteCreatable owl:intersectionOf ( :Delete
		[owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (calli:Editable calli:Creatable)]]);
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:script """
		if (this.HasInstanceChildren())
			throw new Conflict("Member resources must be deleted first");
		return proceed();
	""".

:HasInstanceChildren rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:Creatable];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:cardinality 1];
	msg:sparql """
		ASK {
			?child a $this
		}
	""".

