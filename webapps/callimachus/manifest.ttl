@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Manifest> rdfs:subClassOf <Viewable>, <Editable>, calli:Manifest;
	rdfs:isDefinedBy </callimachus>;
	calli:view <manifest-view.xhtml>;
	calli:edit <manifest-edit.xhtml>.

:GetOldTemplate rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <manifest>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	calli:method "GET";
	calli:query "template";
	calli:expect "302-see-other";
	calli:type "text/uri-list";
	msg:script """
		return "/manifest?layout";
	""".

:GetLayout rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Manifest>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	calli:method "GET";
	calli:query "layout";
	calli:type "text/xsl";
	msg:imports <transforms/layout.xsl>;
	msg:imports <styles>;
	msg:imports <scripts>;
	msg:imports <themes/default/layout.xhtml>;
	msg:script """
		var layout = layout_xhtml;
		try {
			if (this.calliTheme) {
				layout = this.calliTheme.calliLayout;
			}
		} catch (e) {
			e.javaException.printStackTrace();
		}
		var sb = [];
		sb.push('<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">');
		sb.push('<xsl:param name="systemId" />');
		sb.push('<xsl:param name="query" />');
		sb.push('<xsl:param name="template" select="false()" />');
		sb.push('<xsl:variable name="manifest">' + this + '</xsl:variable>');
		sb.push('<xsl:variable name="styles">' + styles + '</xsl:variable>');
		sb.push('<xsl:variable name="scripts">' + scripts + '</xsl:variable>');
		sb.push('<xsl:variable name="layout">' + layout + '</xsl:variable>');
		sb.push('<xsl:variable name="favicon">' + this.calliFavicon + '</xsl:variable>');
		sb.push('<xsl:variable name="menu">' + this.calliMenu + '?items</xsl:variable>');
		sb.push('<xsl:variable name="variation">' + (this.calliVariation ? this.calliVariation : '') + '</xsl:variable>');
		sb.push('<xsl:variable name="rights">');
		try {
			if (this.calliRights) {
				sb.push(new org.openrdf.repository.object.xslt.XSLTransformer().transform(this.calliRights).asString());
			}
		} catch (e) {
			e.javaException.printStackTrace();
		}
		sb.push('</xsl:variable>');
		sb.push('<xsl:include href="' + layout_xsl + '" />');
		sb.push('</xsl:stylesheet>');
		return sb.join('\\n');
	""".

:PostEditManifest owl:intersectionOf (<toolbox/edit.ttl#PostEdit>
		[owl:onProperty msg:target; owl:allValuesFrom <Manifest>]);
	msg:imports <java:org.callimachusproject.server.HTTPObjectServer>;
	msg:script "HTTPObjectServer.resetAllCache(); return proceed();".

