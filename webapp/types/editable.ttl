# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>;
    foaf:primaryTopic <Editable>.

<Editable> a owl:Class;
    rdfs:label "Editable";
    rdfs:subClassOf <Serviceable>;
    owl:equivalentClass </callimachus/Editable>;
    rdfs:isDefinedBy <../../ontology>.

:GetEditPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:rel "edit-form";
    calli:method "GET";
    calli:query "edit";
    calli:requires calli:editor;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:script """
        function findTemplate(obj, ann) {
            var annotated = findAnnotatedClass(obj.getClass(), ann);
            if (annotated) {
                var uri = annotated.getAnnotation(ann).value();
                if (uri.length != 1)
                    throw new InternalServerError("Multiple templates for " + annotated.simpleName);
                var template = obj.objectConnection.getObject(uri[0]);
                if (template.Construct)
                    return template;
                throw new InternalServerError("Missing template");
            }
            throw new InternalServerError("No template");
        }

        function findAnnotatedClass(klass, ann) {
            if (klass.isAnnotationPresent(ann)) {
                return klass;
            }
            var result;
            if (klass.getSuperclass()) {
                result = findAnnotatedClass(klass.getSuperclass(), ann);
            }
            var interfaces = klass.getInterfaces();
            for (var i = interfaces.length; i--;) {
                var face = findAnnotatedClass(interfaces[i], ann);
                if (face) {
                    if (!result || result.isAssignableFrom(face)) {
                        result = face;
                    } else if (!face.isAssignableFrom(result)) {
                        throw new InternalServerError("Conflicting templates for "
                            + result.simpleName +  " and " + face.simpleName);
                    }
                }
            }
            return result;
        }

        return findTemplate(this, Packages.calli.edit).Construct(this, 'edit');
    """.

:PostEdit rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Editable>];
    calli:method "POST";
    calli:query "edit";
    calli:requires calli:editor;
    calli:expect "200-modified";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:script """
        function findTemplate(obj, ann) {
            var annotated = findAnnotatedClass(obj.getClass(), ann);
            if (annotated) {
                var uri = annotated.getAnnotation(ann).value();
                if (uri.length != 1)
                    throw new InternalServerError("Multiple templates for " + annotated.simpleName);
                var template = obj.objectConnection.getObject(uri[0]);
                if (template.Construct)
                    return template;
                throw new InternalServerError("Missing template");
            }
            throw new InternalServerError("No template");
        }

        function findAnnotatedClass(klass, ann) {
            if (klass.isAnnotationPresent(ann)) {
                return klass;
            }
            var result;
            if (klass.getSuperclass()) {
                result = findAnnotatedClass(klass.getSuperclass(), ann);
            }
            var interfaces = klass.getInterfaces();
            for (var i = interfaces.length; i--;) {
                var face = findAnnotatedClass(interfaces[i], ann);
                if (face) {
                    if (!result || result.isAssignableFrom(face)) {
                        result = face;
                    } else if (!face.isAssignableFrom(result)) {
                        throw new InternalServerError("Conflicting templates for "
                            + result.simpleName +  " and " + face.simpleName);
                    }
                }
            }
            return result;
        }

        var template = findTemplate(this, Packages.calli.edit);
        template.calliEditResource(this, inputStream);
        var parent = this.SelectParentComposite();
        if (parent) {
            parent.touchRevision();
        }
        return this;
    """.

:inputStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostEdit;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/sparql-update".

################################
# DELETE
################################

:DeleteIfNotUsed rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "DELETE";
    calli:requires calli:editor;
    calli:type "message/x-response";
    calli:imports <java:org.openrdf.model.BNode>;
    calli:imports <java:org.openrdf.model.URI>;
    calli:imports <java:javax.tools.FileObject>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:script """
        var con = this.objectConnection;
        var stmts = con.getStatements(null, null, this.resource, []);
        var redirect = "/";
        try {
            while (stmts.hasNext()) {
                var st = stmts.next();
                var subj = st.subject;
                var pred = st.predicate.stringValue();
                if (pred != "http://www.w3.org/1999/02/22-rdf-syntax-ns#subject"
                        && pred != "http://www.w3.org/1999/02/22-rdf-syntax-ns#object"
                        && pred != "http://www.w3.org/ns/prov#specializationOf"
                        && pred != "http://www.w3.org/ns/prov#wasAssociatedWith") {
                    //# Don't allow removal if used in a complex structure (like an rdf:List)
                    if (subj instanceof BNode)
                        throw new Conflict(st.object + " is currently is use and cannot be removed");
                    if (subj.stringValue().indexOf('#') >= 0)
                        throw new Conflict(st.object + " resource is currently referenced by " + subj);
                    if (pred == "http://callimachusproject.org/rdf/2009/framework#hasComponent") {
                        redirect = subj.stringValue();
                    }
                    con.remove(st, []);
                }
            }
        } finally {
            stmts.close();
        }

        this.Delete();
        return {
            status:200,message:"Deleted",
            headers:{'content-type':"text/uri-list"},
            body:[redirect]
        };
    """.

:Delete rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Editable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <java:org.openrdf.model.BNode>;
    calli:imports <java:org.openrdf.model.URI>;
    calli:imports <java:javax.tools.FileObject>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:script """
        var con = this.objectConnection;
        function removeTriples(subject, hash) {
            var stmts = con.getStatements(subject, null, null, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    con.remove(st, []);
                    if (st.object instanceof BNode && !st.object.equals(subject)) {
                        removeTriples(st.object, hash);
                    } else if (st.object instanceof URI && !st.object.equals(subject)) {
                        if (st.object.stringValue().indexOf(hash) == 0) {
                            removeTriples(st.object, hash);
                        } else {
                            con.getObjectFactory().createObject(st.object).touchRevision();
                        }
                    }
                }
            } finally {
                stmts.close();
            }
        }

        con.clear([this.resource]); //# clear graph
        removeTriples(this.resource, this.resource.stringValue() + '#'); //# follow blank and hash references
        if (this instanceof FileObject) {
            this['delete'](); //# remove document
        }
    """.

