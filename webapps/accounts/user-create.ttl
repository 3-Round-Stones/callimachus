@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

rdfs:label a rdf:Property.
rdfs:comment a rdf:Property.

:PostUserCreate owl:intersectionOf (</callimachus/operations/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <User> ]);
	msg:imports <User>;
	msg:imports </user/>;
	msg:imports </accounts>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	msg:imports <java:java.net.URLEncoder>;
	msg:script """
		var ds = new ByteArrayDataSource(body, "multipart/form-data") ;
		var multipart = new MimeMultipart(ds);
		//# read form
		var username = multipart.getBodyPart(0).content;
		var email = multipart.getBodyPart(1).content;
		var label = multipart.getBodyPart(2).content;
		var comment = multipart.getBodyPart(3).content;
		var subject = multipart.getBodyPart(4).content;
		var body5 = multipart.getBodyPart(5).content;
		if (!label)
			throw new BadRequest("Missing label");
		if (!username)
			throw new BadRequest("Missing name");
		if (!email)
			throw new BadRequest("Missing email");
		if (!subject)
			throw new BadRequest("Missing subject");
		if (!body5)
			throw new BadRequest("Missing message");

		//# assign id TODO use "location" instead
		var uri = user + URLEncoder.encode(username).replace(/%20/g, "+").toLowerCase();
		var newUser = this.objectConnection.getObject(uri);
		if (newUser instanceof User)
			throw new Conflict("User already exists: " + newUser);
		newUser = this.objectConnection.addDesignation(newUser, User);
		newUser = this.objectConnection.addDesignation(newUser, "http://callimachusproject.org/rdf/2009/framework#Party");
		newUser = this.objectConnection.addDesignation(newUser, "http://callimachusproject.org/rdf/2009/framework#User");

		//# populate resource
		newUser.calliName = username;
		newUser.calliEmail = email;
		newUser.rdfsLabels.add(label);
		if (comment) {
			newUser.rdfsComments.add(comment);
		}
		this.PropagatePermissions(newUser);

		//# generate and save a password
		var password = newUser.generatePassword();
		var token = username + ":" + accounts.calliAuthName + ":" + password;
		newUser.calliAlgorithm = "MD5";
		newUser.calliEncoded = DigestUtils.md5(new java.lang.String(token).getBytes("UTF-8"));
		//# email the password to the email address provided
		var fromUser = newUser.FindUserCreator();
		if (!fromUser || !fromUser.sendMessage)
			throw new BadRequest("Could not find creator user");
		body5 = body5.replace(/@@PASSWORD@@/g, password);
		fromUser.sendMessage(subject + '\\n' + body5, label + " <" + email + ">");
		return newUser;
	""".

# find the user that created $this
:FindUserCreator rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <User>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom calli:User];
	msg:sparql  """
		SELECT DISTINCT ?contributor
		WHERE {
			{
				audit:current-trx audit:contributor ?contributor
			} UNION {
				GRAPH ?graph { $this a ?type }
				?graph audit:contributor ?contributor
			}
		} LIMIT 1
	""".

