# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:GetDescription rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
	msg:title "RDF Describe";
	msg:rel "describedby";
	msg:method "GET";
	msg:query "describe";
	msg:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
	msg:transform :TransformDescription;
	msg:script """
		var queue = [];
		queue.push(this.resource);
		var con = this.objectConnection;
		var base = this.resource.stringValue();
		var baseIsHash = base.charAt(base.length - 1) == '#';
		var stmts = con.getStatements(null, org.openrdf.model.vocabulary.RDFS.ISDEFINEDBY, this.resource, false, []);
		try {
			while (stmts.hasNext()) {
				queue.push(stmts.next().subject);
			}
		} finally {
			stmts.close();
		}
		return new org.openrdf.query.GraphQueryResult({
			close: function() {
				stmts.close();
			},
			getNamespaces: function() {
				var namespaces = con.getNamespaces();
				var map = new java.util.HashMap();
				while (namespaces.hasNext()) {
					var ns = namespaces.next();
					map.put(ns.getPrefix(), ns.getName());
				}
				return map;
			},
			hasNext: function() {
				while (!stmts.hasNext() && queue.length > 0) {
					stmts.close();
					stmts = con.getStatements(queue.shift(), null, null, false, []);
				}
				return stmts.hasNext();
			},
			next: function() {
				while (!stmts.hasNext() && queue.length > 0) {
					stmts.close();
					stmts = con.getStatements(queue.shift(), null, null, false, []);
				}
				var st = stmts.next();
				var uri = st.object.stringValue()
				if (st.object instanceof org.openrdf.model.URI) {
					if (uri.length > base.length && uri.indexOf(base) == 0) {
						var chr = uri.charAt(base.length);
						if (baseIsHash || chr == '#') {
							queue.push(st.object);
						}
					}
				} else if (st.object instanceof org.openrdf.model.Resource) {
					queue.push(st.object);
				}
				return st;
			},
			remove: function() {
				stmts.remove();
			},
		});
	""".

:TransformDescription rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:type "application/xhtml+xml";
	msg:transform <../styles/TransformLayout>;
	msg:xslt <describe.xsl>.

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :TransformDescription;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/rdf+xml".

