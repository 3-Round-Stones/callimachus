# 
#    Copyright (c) 2011 Talis Inc., Steve Battle and James Leigh, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <ZipArchive>.

<ZipArchive> a <Creatable>, owl:Class;
    rdfs:subClassOf calli:ZipArchive, <File>;
    rdfs:label "ZIP archive" ;
    rdfs:comment "A ZIP archive file.";
    owl:equivalentClass </callimachus/1.3/types/ZipArchive>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/archive.png>;
    calli:thumbnail <../images/archive.svg>;
    calli:create <../templates/file-create.xhtml>;
    calli:mediaType "application/zip".

# GET /archive.zip
:GetZip rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ZipArchive>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/zip";
    calli:header "cache-control:cache-range";
    calli:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.openInputStream()".

# GET /archive.zip?contents
:GetZipContents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ZipArchive>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:javax.xml.stream.XMLEventReader>];
    calli:method "GET";
    calli:query "contents";
    calli:rel "contents";
    calli:requires calli:reader;
    calli:type "application/atom+xml";
    calli:script """
        var id = this.toString() + '?contents';
        var pattern = this.toString() + '?entry={entry}';
        return this.createAtomFeedFromArchive(id, pattern);
    """.

# GET /archive.zip?entry=/
:GetZipEntry rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ZipArchive>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    calli:method "GET";
    calli:query "entry";
    calli:requires calli:reader;
    calli:type "message/x-response";
    calli:header "cache-control:cache-range";
    calli:script """
        var type = this.getZipEntryType(entry);
        var stream = this.readZipEntry(entry);
        if (!stream) throw new org.callimachusproject.server.exceptions.NotFound();
        return {
            status: 200, message: "OK",
            headers:{"content-type": type},
            body: stream
        };
    """.

:entry a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :GetZipEntry;
    rdfs:range xsd:string;
    calli:query "entry";
    calli:type "text/plain".

:PutZipArchive rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <ZipArchive> ];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:script "return this.ReplaceFileContent(stream, 'application/zip', true);".

:stream a owl:DatatypeProperty, owl:FunctionalProperty ;
    rdfs:domain :PutZipArchive ;
    rdfs:range <java:java.io.InputStream> ;
    calli:type "application/zip" .

:ValidateZip owl:intersectionOf (<editable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <ZipArchive>]);
    calli:script "this.validateZipAndClose(this.openInputStream());".

