# 
#    Portions Copyright (c) 2011 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix prov:<http://www.w3.org/ns/prov#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Creatable>.

<Creatable> a owl:Class;
    rdfs:label "Creatable";
    rdfs:subClassOf <Serviceable>;
    owl:equivalentClass </callimachus/Creatable>, </callimachus/1.0/types/Creatable>, </callimachus/1.3/types/Creatable>;
    rdfs:isDefinedBy <../../ontology>.

:GetCreatePage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:rel "create-form";
    calli:method "GET";
    calli:query "create";
    calli:requires calli:author;
    calli:type "text/html";
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:script """
        if (!this.calliCreate || this.calliCreate.isEmpty())
            throw new InternalServerError("No create template");
        if (this.calliCreate.size() != 1)
            throw new InternalServerError("Multiple create templates");
        var page = this.calliCreate.iterator().next();
        var stream = page.openInputStream();
        if (!stream)
            throw new InternalServerError(page + " does not exist");
        try {
            return this.TransformCreatePage(page, stream, targetOfCreate);
        } finally {
            stream.close();
        }
    """.

:targetOfCreate a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetCreatePage.

:TransformCreatePage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:post "../pipelines/creatable-html.xpl?results&target={targetOfHtml}\nContent-Location: {+createPage}\nContent-Type: application/xhtml+xml".

:createPage a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :TransformCreatePage.

:createPageStream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :TransformCreatePage;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xhtml+xml".

:targetOfHtml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :TransformCreatePage.

# POST ?create=/callimachus/File
:LookupConstructor rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?class {
            {
                # xml type with correct document tag
                ?class rdfs:subClassOf+ $this
                FILTER bound($documentTag)
                FILTER EXISTS { ?class calli:documentTag $documentTag }
                BIND (0 AS ?preference)
            } UNION {
                # non-xml type or xml type without document tag
                ?class rdfs:subClassOf+ $this
                FILTER bound($mediaType)
                FILTER EXISTS { ?class calli:mediaType $mediaType }
                FILTER NOT EXISTS { ?class calli:documentTag ?tag }
                BIND (1 AS ?preference)
            } UNION {
                # supported media type alias (document tag not considered)
                ?class rdfs:subClassOf+ $this; calli:mediaType ?typ2
                FILTER (
                    (
                        (sameTerm($mediaType,"application/javascript") || sameTerm($mediaType,"text/javascript"))
                        && (sameTerm(?typ2,"application/javascript") || sameTerm(?typ2,"text/javascript"))
                    ) || (
                        (sameTerm($mediaType,"application/xslt+xml") || sameTerm($mediaType,"text/xsl"))
                        && (sameTerm(?typ2,"application/xslt+xml") || sameTerm(?typ2,"text/xsl"))
                    ) || (
                        (sameTerm($mediaType,"application/java-archive") || sameTerm($mediaType,"application/zip"))
                        && (sameTerm(?typ2,"application/java-archive") || sameTerm(?typ2,"application/zip"))
                    ) || (
                        (sameTerm($mediaType,"image/x-png") || sameTerm($mediaType,"image/png"))
                        && (sameTerm(?typ2,"image/x-png") || sameTerm(?typ2,"image/png"))
                    ) || (
                        (sameTerm($mediaType,"image/pjpeg") || sameTerm($mediaType,"image/jpeg"))
                        && (sameTerm(?typ2,"image/pjpeg") || sameTerm(?typ2,"image/jpeg"))
                    )
                )
                BIND (2 AS ?preference)
            }
        } ORDER BY ?preference LIMIT 1
    """.

:documentTag a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :LookupConstructor;
    calli:type "text/uri-list".

:mediaType a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :LookupConstructor;
    rdfs:range xsd:string.

# override this method for subclass create methods
:PostCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Serviceable>];
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.UnsupportedMediaType>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        created = con.addDesignation(location, this.toString());
        if (created instanceof File) {
            //# rdfs:label
            var local = created.resource.localName;
            var filename = local.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
            var label = vf.createLiteral(decodeURIComponent(filename).replace(/[_\\-\\+\\s]+/g, " "));
            con.add(created.resource, RDFS.LABEL, label, []);

            //# dcterms:created
            var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
            con.add(created.resource, DCTERMS.CREATED, vf.createLiteral(now), []);

            created = con.addDesignation(created, Document);
            created.ReplaceFileContent(body, type, false);
            return created;
        }
        var template = this.calliCreate.iterator().next();
        if (!template)
            throw new InternalServerError("Cannot create " + this.toString() + " with " + type);
        if (type != "application/rdf+xml" && type.indexOf("application/rdf+xml;") != 0
                && type != "text/turtle" && type.indexOf("text/turtle;") != 0)
            throw new UnsupportedMediaType("File format is not recognized: " + type + " for " + location);
        var newCopy = template.calliCreateResource(body, type, this.toString(), created);
        newCopy = newCopy.objectConnection.addDesignation(newCopy, this.toString());
        this.touchRevision(); // FIXME this shouldn't be needed
        return newCopy;
    """.

:body a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostCreate;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*".

:location a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:PostCreate :VerifyCreate)];
    calli:type "text/uri-list".

:type a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostCreate;
    rdfs:range xsd:string.

# override this method for subclass verify create methods
:VerifyCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Creatable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:script """
        if (statements && !statements.isEmpty()) {
            var template = this.calliCreate.iterator().next();
            if (!template)
                throw new InternalServerError("Cannot create " + this.toString() + ", no create template");
            template.calliVerifyCreatedResource(location, statements, this.toString());
        }
        try {
            location.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + location);
        }
    """.

:statements a owl:ObjectProperty;
    rdfs:domain :VerifyCreate;
    calli:range <java:org.openrdf.model.Statement>.

