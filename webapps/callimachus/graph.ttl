# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix sd:<http://www.w3.org/ns/sparql-service-description#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<SchemaGraph> a owl:Class;
    rdfs:subClassOf <Serviceable>;
    rdfs:label "Schema Graph";
    rdfs:isDefinedBy </callimachus>.

<NamedGraph> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, sd:NamedGraph;
    rdfs:label "Named Graph";
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/admin>;
    calli:icon <images/graph.png>;
    calli:create <templates/file-create.xhtml>;
    calli:mediaType "application/rdf+xml";
    calli:documentTag <http://www.w3.org/1999/02/22-rdf-syntax-ns#RDF>.

<GraphDocument> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, sd:NamedGraph;
    rdfs:label "Graph Document";
    rdfs:comment "Terse RDF Triple documents";
    rdfs:isDefinedBy </callimachus>;
    calli:author </group/admin>;
    calli:icon <images/graph.png>;
    calli:edit <templates/graph-edit.xhtml>;
    calli:create <templates/graph-create.xhtml>;
    calli:mediaType "text/turtle".

################################
# Graph Document
################################

# GET /graph.ttl
:GetGraphDocument rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <GraphDocument>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "text/turtle";
    calli:header "cache-control:no-cache";
    calli:header "cache-control:cache-range";
    calli:script "return this.openReader(true)".

# POST ?create=/callimachus/GraphDocument
:CreateGraphDocument owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <GraphDocument> ]);
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:java.net.URLDecoder>;
    calli:imports <java:org.callimachusproject.server.HTTPObjectServer>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:imports sd:NamedGraph;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        if (!location)
            throw new BadRequest("Missing location request header");
        if (location instanceof File) {
            location = location.RemoveFile();
        }
        var created = location;

        var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        created = con.addDesignation(created, this.toString());
        created = con.addDesignation(created, Document);
        created = con.addDesignation(created, NamedGraph);

        created.UploadGraphDocument(new org.callimachusproject.io.TextReader(body, "UTF-8"));
        return created;
    """.

# PUT /graph.ttl
:UploadGraphDocument rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <GraphDocument>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:script """
        if (!reader)
            throw new BadRequest("Missing PUT request payload");
        var con = this.objectConnection;
        con.clear([this.resource]); //# clear graph
        var object = this;
        var inputStream = new org.callimachusproject.server.util.ProducerStream(function(outputStream) {
            var pipe = new java.io.OutputStreamWriter(outputStream, "UTF-8");
            var read;
            var buf = java.lang.reflect.Array.newInstance(java.lang.Character.TYPE, 1024);
            var out = object.openWriter();
            try {
                while ((read = reader.read(buf)) >= 0) {
                    out.write(buf, 0, read); //# save to blob
                    pipe.write(buf, 0, read); //# pipe to RDF store
                }
            } finally {
                out.close();
                pipe.close();
            }
        });
        
        java.lang.System.err.println("Parsing " + this);
        con.add(inputStream, this.toString(), RDFFormat.TURTLE, [this.resource]);

        this.touchRevision();
        con.recompileSchemaOnClose();
    """.

:reader a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :UploadGraphDocument;
    rdfs:range <java:java.io.Reader>;
    calli:type "text/turtle".

################################
# Named Graph
################################

# GET /graph.rdf
:GetNamedGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <NamedGraph>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    calli:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    calli:type "application/rdf+xml;q=0.4";
    msg:sparql "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH $this { ?s ?p ?o } }".

# POST ?create=/callimachus/NamedGraph
:PostNamedGraphCreate owl:intersectionOf (<creatable.ttl#PostCreate>
        [owl:onProperty msg:target; owl:hasValue <NamedGraph> ]);
    calli:imports <java:java.net.URLEncoder>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:imports <java:org.callimachusproject.io.MultipartParser>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <File>;
    calli:imports foaf:Document;
    calli:imports sd:NamedGraph;
    calli:script """
        if (!location)
            throw new BadRequest("No graph location provided");
        if (location instanceof File) {
            location = location.RemoveFile();
        }

        var con = this.objectConnection;
        var vf = con.getValueFactory();
        var format = RDFFormat.forMIMEType(type.replace(/;.*/,""), RDFFormat.RDFXML);
        var fileName = location.resource.localName;
        var name = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/g, "$1");
        var label = vf.createLiteral(name.replace(/-/g, " "));
        var obj = location;
        var uri = obj.toString();

        obj = con.addDesignation(obj, this.toString());
        obj = con.addDesignation(obj, Document);
        obj = con.addDesignation(obj, NamedGraph);
        con.add(obj.resource, RDFS.LABEL, label, []);

        obj.UploadNamedGraph(body);
        return obj;
    """.

# PUT /graph.rdf
:UploadNamedGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <NamedGraph>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:script """
        if (!graphStream)
            throw new BadRequest("Missing PUT request payload");
        var con = this.objectConnection;
        con.clear([this.resource]); //# clear graph
        var object = this;
        
        java.lang.System.err.println("Parsing " + this);
        con.add(graphStream, this.toString(), RDFFormat.RDFXML, [this.resource]);

        this.touchRevision();
        java.lang.System.err.println("Imported " + this);
        con.recompileSchemaOnClose();
    """.

:graphStream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :UploadNamedGraph;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/rdf+xml".

