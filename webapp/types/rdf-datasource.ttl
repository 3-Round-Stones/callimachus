#
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
#    Portions Copyright (c) 2011-2013 3 Round Stones Inc, Some Rights Reserved
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix sd:<http://www.w3.org/ns/sparql-service-description#>.
@prefix void:<http://rdfs.org/ns/void#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <RdfDatasource>.

<RdfDatasource> a <Creatable>, owl:Class;
    rdfs:subClassOf <Viewable>, <Editable>, calli:RdfDatasource;
    owl:equivalentClass </callimachus/1.0/types/Datasource>, </callimachus/1.3/types/RdfDatasource>, </callimachus/1.4/types/RdfDatasource>;
    rdfs:label "RDF datasource";
    rdfs:comment "A SPARQL endpoint service for a mutable dataset";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/datasource.png>;
    calli:thumbnail <../images/datasource.svg>;
    calli:view <../templates/rdf-datasource-view.xhtml>;
    calli:edit <../templates/rdf-datasource-edit.xhtml>;
    calli:create <../templates/rdf-datasource-create.xhtml>;
    msg:mixin "org.callimachusproject.behaviours.DatasourceSupport".

:DeleteDatasource owl:intersectionOf ( <serviceable.ttl#Delete>
        [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>]);
    calli:script """
        this.purgeDatasource();
        return proceed();
    """.

################################
# Callimachus UI               #
################################

# GET query parameter
:GetHtmlResults rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:method "GET";
    msg:path "\\?((.*&)?query=.*)";
    calli:requires calli:reader;
    msg:type "text/html";
    msg:header "cache-control:no-validate";
    calli:script """
        return this.TransformResult(this.postPercentEncoded("application/xml", this.toString(), queryString).entity.content);
    """.

:queryString a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetHtmlResults;
    rdfs:range <java:java.util.Map>;
    msg:param "1";
    msg:type "application/x-www-form-urlencoded".

:GetHtmlDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:method "GET";
    msg:path "?resource=";
    calli:requires calli:reader;
    msg:type "text/html";
    calli:script """
        return this.TransformDescribeService(this.getIndirectResource(htmlResource, "application/rdf+xml").entity.content);
    """.

:htmlResource a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :GetHtmlDescribeService;
    rdfs:range rdfs:Resource;
    msg:type "text/uri-list";
    msg:param "resource".

# POST application/x-www-form-urlencoded
:PostWebForm rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:method "POST";
    calli:requires calli:editor;
    msg:type "text/html";
    calli:script """
        var resp = this.postPercentEncoded("application/xml", this.toString(), formMap);
        if (resp && resp.entity && resp.entity.content)
            return this.TransformResult(resp.entity.content);
        return null;
    """.

:formMap a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostWebForm;
    rdfs:range <java:java.util.Map>;
    msg:type "application/x-www-form-urlencoded".

:TransformDescribeService rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:type "text/html";
    calli:post "../pipelines/describe.xpl?results&target={this}".

:graphResult a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformDescribeService;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/rdf+xml".

# Transformer
:TransformResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfDatasource>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    msg:type "text/html";
    calli:post "../pipelines/sparql.xpl?results&target={this}".

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformResult;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/xml".


