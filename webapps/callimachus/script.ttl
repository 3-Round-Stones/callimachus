# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a </callimachus/SchemaGraph>.

<Script> a <CreatableIndex>, owl:Class;
	rdfs:subClassOf <File>;
	rdfs:label "Script";
	rdfs:comment "Script files";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <script.png>;
	calli:view <script-view.xhtml>;
	calli:edit <script-edit.xhtml>;
	calli:create <script-create.xhtml>;
	calli:type "text/javascript".

# GET /script.js
:GetJavaScript rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Script>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
	msg:method "GET";
	msg:type "text/javascript";
	msg:header "cache-control:no-cache";
	msg:header "cache-control:cache-range";
	msg:script "return this.openReader(true)".

# POST ?create=/callimachus/File
:LookupScriptFile owl:intersectionOf (</callimachus/toolbox/create.ttl#LookupConstructor>
		[owl:onProperty msg:target; owl:hasValue <File> ]);
	msg:script """
		if (type == "text/javascript" || type == "application/javascript") {
			var uri = this.toUri().resolve("/callimachus/Script").toString();
			return this.objectConnection.getObject(uri);
		}
		return proceed();
	""".

# POST ?create=/callimachus/Script
:CreateScript owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Script> ]);
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.callimachusproject.server.HTTPObjectServer>;
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
	msg:imports <File>;
	msg:imports foaf:Document;
	msg:script """
		var con = this.objectConnection;
		var vf = con.valueFactory;
		if (!location)
			throw new BadRequest("Missing location request header");
		if (location instanceof File) {
			location = location.RemoveFile();
		}
		var created = location;

		var filename = created.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
		con.add(created.resource, RDFS.LABEL, label, []);

		created = con.addDesignation(created, this.toString());
		created = con.addDesignation(created, Document);

		this.touchRevision(); // update index page

		created.UploadScript(new java.io.InputStreamReader(body, "UTF-8"));
		return created;
	""".

# PUT /script.js
:UploadScript rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Script>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT";
	msg:realm </callimachus/manifest>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.callimachusproject.server.HTTPObjectServer>;
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.query.QueryLanguage>;
	msg:script """
		if (!reader)
			throw new BadRequest("Missing PUT request payload");
		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Character.TYPE, 1024);
		var out = this.openWriter();
		try {
			while ((read = reader.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		this.touchRevision();
	""".

:reader a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :UploadScript;
	rdfs:range <java:java.io.Reader>;
	msg:type "text/javascript".

