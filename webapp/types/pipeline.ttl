# 
#    Copyright (c) 2012 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Pipeline>.

<Pipeline> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, calli:Pipeline;
    rdfs:label "XProc pipeline";
    rdfs:comment "A pipeline definition in XML Processing (XProc) format.";
    owl:equivalentClass </callimachus/Pipeline>, </callimachus/1.0/types/Pipeline>, </callimachus/1.3/types/Pipeline>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/pipeline.png>;
    calli:thumbnail <../images/pipeline.svg>;
    calli:view <../templates/pipeline-view.xhtml>;
    calli:edit <../templates/pipeline-edit.xhtml>;
    calli:create <../templates/pipeline-create.xhtml>;
    calli:mediaType "application/xproc+xml";
    calli:documentTag <http://www.w3.org/ns/xproc#pipeline>, <http://www.w3.org/ns/xproc#declare-step>, <http://www.w3.org/ns/xproc#library>.

# GET /pipeline/pipe.xpl
:GetPipelineSource rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    msg:type "application/xproc+xml";
    msg:header "cache-control:no-cache";
    msg:header "cache-control:cache-range";
    msg:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.openInputStream()".

# PUT /pipeline/pipe.xpl
:UploadPipeline rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "PUT";
    calli:requires calli:editor;
    calli:script "return this.ReplaceFileContent(xprocStream, 'application/xproc+xml', true);".

:xprocStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadPipeline;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/xproc+xml".

:ValidatePipeline owl:intersectionOf (<serviceable.ttl#Validate>
        [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>]);
    calli:post "../schemas/xproc.rng?validate\nContent-Location: {+0}\nContent-Type: application/xml".

################################
# Execute Pipeline             #
################################

# GET /pipeline.xpl?results
:GetResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "GET";
    msg:path "\\?(results.*)";
    calli:requires calli:reader;
    msg:header "cache-control:no-store,no-transform";
    calli:script """
        var pipe = this.pipe();
        try {
            var iterator = queryGetParameters.keySet().iterator();
            while(iterator.hasNext()){
                var key = iterator.next();
                var value = queryGetParameters.get(key);
                if (key != "results" && value && value.length){
                    pipe.passOption(key, value[0]);
                } else if (value && value.length > 1) {
                    pipe.passOption(key, value[1]);
                }
            }
            return {
                status: 200, message: "OK",
                headers: {"content-type": pipe.getMediaType()},
                body: pipe.asStream()
            };
        } finally {
            pipe.close();
        }
    """.

:queryGetParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :GetResult;
    rdfs:range <java:java.util.Map>;
    msg:param "1";
    msg:type "application/x-www-form-urlencoded".

# POST /pipeline.xpl?results
:PostResult rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Pipeline>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "POST";
    msg:path "\\?(results.*)";
    calli:requires calli:reader;
    msg:header "cache-control:no-store,no-transform";
    calli:script """
        var pipe = this.pipeStreamOf(sourcePort, sourceLocation, sourceType);
        try {
            var iterator = queryPostParameters.keySet().iterator();
            while(iterator.hasNext()){
                var key = iterator.next();
                var value = queryPostParameters.get(key);
                if (key != "results" && value && value.length){
                    pipe.passOption(key, value[0]);
                } else if (value && value.length > 1) {
                    pipe.passOption(key, value[1]);
                }
            }
            return {
                status: 200, message: "OK",
                headers: {"content-type": pipe.getMediaType()},
                body: pipe.asStream()
            };
        } finally {
            pipe.close();
        }
""".

:queryPostParameters a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.util.Map>;
    msg:param "1";
    msg:type "application/x-www-form-urlencoded".

:sourceLocation a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    msg:headerParam "Content-Location";
    msg:type "text/uri-list".

:sourcePort a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :PostResult;
    rdfs:range <java:java.io.InputStream>;
    msg:type "*/*".

:sourceType a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostResult;
    rdfs:range xsd:string;
    msg:headerParam "Content-Type";
    msg:type "text/plain".

