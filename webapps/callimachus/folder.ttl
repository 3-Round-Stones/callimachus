# 
#    Copyright (c) 2011 3 Round Stones Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix skosxl:<http://www.w3.org/2008/05/skos-xl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix :<#>.

<Folder> a <Creatable>, owl:Class;
	rdfs:subClassOf <Composite>, <Viewable>, <Editable>, calli:Folder;
	rdfs:label "Folder";
	rdfs:comment "A folder of resources";
	rdfs:isDefinedBy </callimachus>;
	calli:icon <folder.png>;
	calli:view <folder-view.xhtml>;
	calli:edit <folder-edit.xhtml>;
	calli:create <folder-create.xhtml>.

:RedirectToIndex rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
	msg:method "GET";
	msg:type "message/x-response";
	msg:imports <java:org.apache.http.ProtocolVersion>;
	msg:imports <java:org.apache.http.message.BasicHttpResponse>;
	msg:script """
		var http11 = new ProtocolVersion("HTTP", 1, 1);
		var resp = new BasicHttpResponse(http11, 303, "Directory Index");
		var target = this.calliDescribedBy;
		if (target) {
			resp.addHeader("Location", target.toString());
		} else {
			resp.addHeader("Location", this.toString() + "?view");
		}
		return resp;
	""".

################################
# List folder contents
################################

:GetFolderFeed rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:query "feed";
	msg:type "application/sparql-results+xml";
	msg:header "cache-control:no-cache";
	msg:transform :TransformIntoAtom;
	msg:sparql """
		SELECT DISTINCT ?id ?totalResults ?title ?icon ?summary ?updated
				?author_uri ?author_name ?reader_uri ?reader_name ?contributor_uri ?contributor_name
				?editor_uri ?editor_name ?administrator_uri ?administrator_name
				(if(bound(?folder), ?id, ?folder) as ?link_href) # TODO append '?feed' to ?id
				(if(bound(?folder), "alternate", ?folder) as ?link_rel)
				(if(bound(?folder), "application/atom+xml", ?folder) as ?link_type)
				(?id as ?content_src)
				(
					if(?local_type = <AnimatedGraphic>, "image/gif",
					if(?local_type = <Article>, "application/docbook+xml",
					if(?local_type = <IconGraphic>, "image/vnd.microsoft.icon",
					if(?local_type = <NamedGraph>, "application/rdf+xml",
					if(?local_type = <GraphDocument>, "text/turtle",
					if(?local_type = <NamedQuery>, "application/sparql-query",
					if(?local_type = <NetworkGraphic>, "image/png",
					if(?local_type = <Page>, "application/xhtml+xml",
					if(?local_type = <Photo>, "image/jpeg",
					if(?local_type = <Script>, "text/javascript",
					if(?local_type = <Style>, "text/css",
					if(?local_type = <Transform>, "text/xsl",
					if(?local_type = <TextFile>, "text/plain",
					if(?local_type = <VectorGraphic>, "image/svg+xml",
				?content_type)))))))))))))) as ?content_type) {
			{
				{
					SELECT ($this as ?id) (count(?part) as ?totalResults) {
						$this calli:hasComponent ?part
					} GROUP BY $this
				}
			} UNION {
				$this calli:hasComponent ?id
				FILTER (isIRI(?id))
			} OPTIONAL {
				?id skos:prefLabel ?title
			} OPTIONAL {
				?id foaf:name ?title
			} OPTIONAL {
				?id rdfs:label ?title
			} OPTIONAL {
				?id skosxl:literalForm ?title
			} OPTIONAL {
				?id dcterms:title ?title
			} OPTIONAL {
				?id rdfs:comment ?summary
			} OPTIONAL {
				?id a [calli:icon ?icon]
			} OPTIONAL {
				?id audit:revision ?revision . ?revision audit:committedOn ?updated
				OPTIONAL {
					?revision audit:contributor ?author_uri
					OPTIONAL {
						?author_uri rdfs:label ?author_name
					}
				}
			} OPTIONAL {
				?id calli:reader ?reader_uri
				OPTIONAL {
					?reader_uri rdfs:label ?reader_name
				}
			} OPTIONAL {
				?id calli:contributor ?contributor_uri
				OPTIONAL {
					?contributor_uri rdfs:label ?contributor_name
				}
			} OPTIONAL {
				?id calli:editor ?editor_uri
				OPTIONAL {
					?editor_uri rdfs:label ?editor_name
				}
			} OPTIONAL {
				?id calli:administrator ?administrator_uri
				OPTIONAL {
					?administrator_uri rdfs:label ?administrator_name
				}
			} OPTIONAL {
				?id a ?local_type
				FILTER (
					?local_type = <AnimatedGraphic> ||
					?local_type = <Article> ||
					?local_type = <IconGraphic> ||
					?local_type = <Image> ||
					?local_type = <NamedGraph> ||
					?local_type = <GraphDocument> ||
					?local_type = <NamedQuery> ||
					?local_type = <NetworkGraphic> ||
					?local_type = <Page> ||
					?local_type = <Photo> ||
					?local_type = <Script> ||
					?local_type = <Style> ||
					?local_type = <Transform> ||
					?local_type = <TextFile> ||
					?local_type = <VectorGraphic>
				)
			} OPTIONAL {
				?id a ?folder
				FILTER (?folder = <Folder>)
			}
		} ORDER BY desc(?totalResults) ?id LIMIT 101 # itself + 100 components
	""".

:TransformIntoAtom rdfs:subClassOf msg:Message;
   rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
   rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
   msg:type "application/atom+xml";
   msg:xslt <styles/sparql-results-atom.xsl>.

:sparqlResult a owl:FunctionalProperty, owl:ObjectProperty;
   rdfs:domain :TransformIntoAtom;
   rdfs:range <java:java.io.InputStream>;
   msg:type "application/sparql-results+xml".

################################
# Export folder contents
################################

:DownloadFolderComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:query "export";
	msg:realm </callimachus/manifest>;
	msg:type "application/zip";
	msg:header "cache-control:no-cache";
	msg:script """
		if (this.calliHasComponent.isEmpty())
			return null; // FIXME use zip with only a manifest
		var baseURI = this.toString();
		var component = this;
		return new org.openrdf.http.object.util.ProducerStream(function(outputStream) {
			var zipStream = new java.util.zip.ZipOutputStream(outputStream);
			component.ExportFolderComponents(baseURI, zipStream);
			zipStream.finish();
		});
	""".

:ExportFolderComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:imports <Folder>;
	msg:script """
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var xf = new org.callimachusproject.rio.RDFXMLStreamWriterFactory();
		var components = this.calliHasComponent.iterator();
		while (components.hasNext()) {
			var component = components.next();
			var uri = component.toString();
			var updated = component.auditRevision;
			if (uri.indexOf(baseURI) == 0 && baseURI.lastIndexOf('/') == baseURI.length - 1) {
				uri = uri.substring(baseURI.length);
			}
			//# Create directory
			if (uri.lastIndexOf('/') == uri.length - 1) {
				var entry = new java.util.zip.ZipEntry(uri);
				if (updated) {
					entry.setTime(updated.getCommittedOn().toGregorianCalendar().getTimeInMillis());
				}
				zipStream.putNextEntry(entry);
			}
			//# Export Triples
			var triples = component.GetDescription();
			try {
				var suffix = ".rdf";
				if (uri.lastIndexOf('/') == uri.length - 1) {
					var suffix = "index.rdf";
				}
				var entry = new java.util.zip.ZipEntry(uri + suffix);
				if (updated) {
					entry.setTime(updated.getCommittedOn().toGregorianCalendar().getTimeInMillis());
				}
				zipStream.putNextEntry(entry);
				var writer = xf.createWriter(zipStream, component.toString() + suffix);
				writer.startRDF();
				var namespaces = component.objectConnection.getNamespaces();
				while (namespaces.hasNext()) {
					var ns = namespaces.next();
					writer.handleNamespace(ns.getPrefix(), ns.getName());
				}
				while (triples.hasNext()) {
					writer.handleStatement(triples.next());
				}
				writer.endRDF();
			} finally {
				triples.close();
			}
			//# Export BLOB
			var content = component.openInputStream();
			if (content != null) {
				try {
					var entry = new java.util.zip.ZipEntry(uri);
					if (updated) {
						entry.setTime(updated.getCommittedOn().toGregorianCalendar().getTimeInMillis());
					}
					zipStream.putNextEntry(entry);
					var read;
					while ((read = content.read(buf)) >= 0) {
						zipStream.write(buf, 0, read);
					}
				} finally {
					content.close();
				}
			} else if (component.objectConnection.hasStatement(null, null, null, false, [component.resource])) {
				var triples = component.objectConnection.getStatements(null, null, null, false, [component.resource]);
				try {
					var entry = new java.util.zip.ZipEntry(uri);
					if (updated) {
						entry.setTime(updated.getCommittedOn().toGregorianCalendar().getTimeInMillis());
					}
					zipStream.putNextEntry(entry);
					var writer = xf.createWriter(zipStream, component.toString());
					writer.startRDF();
					var namespaces = component.objectConnection.getNamespaces();
					while (namespaces.hasNext()) {
						var ns = namespaces.next();
						writer.handleNamespace(ns.getPrefix(), ns.getName());
					}
					while (triples.hasNext()) {
						writer.handleStatement(triples.next());
					}
					writer.endRDF();
				} finally {
					triples.close();
				}
			}
			//# Export nested components
			if (component instanceof Folder) {
				component.ExportFolderComponents(baseURI, zipStream);
			}
		}
	""".

:baseURI a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :ExportFolderComponents;
	rdfs:range xsd:string.

:zipStream a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :ExportFolderComponents;
	rdfs:range <java:java.util.zip.ZipOutputStream>.

################################
# Import folder contents
################################

:GetFolderUploadPage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET";
	msg:query "import";
	msg:type "text/html";
	msg:header "cache-control:no-cache";
	msg:realm </callimachus/manifest>;
	msg:imports <pages/folder-import.xhtml>;
	msg:script """
		return folder_import_xhtml.calliConstructHTML(this, "import");
	""".

:UploadFolderComponents rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
	msg:method "POST";
	msg:query "import";
	msg:realm </callimachus/manifest>;
	msg:expect "302-see-other";
	msg:script """
		var bio = new java.io.BufferedInputStream(payload, 65536);
		var multipart = new org.callimachusproject.util.MultipartParser(bio);
		var inputStream;
		while (inputStream = multipart.next()) {
			try {
				var bin = new java.io.BufferedInputStream(inputStream, 1024);
				if (Packages.info.aduna.io.ZipUtil.isZipStream(bin)) {
					var entry;
					var zipStream = new java.util.zip.ZipInputStream(bin);
					while (entry = zipStream.getNextEntry()) {
						var entryChannel = java.nio.channels.Channels.newChannel(zipStream);
						var noclose = new java.nio.channels.ReadableByteChannel({
							read: function(dst) {
								return entryChannel.read(dst);
							},
							isOpen: function() {
								return entryChannel.isOpen();
							},
							close: function() {}
						});
						var entryStream = java.nio.channels.Channels.newInputStream(noclose);
						this.ImportFolderComponent(entry.name, entryStream);
						zipStream.closeEntry();
					}
				} else {
					var disposition = multipart.headers.get("content-disposition");
					var filename = disposition.match(/filename="([^"]*)"/)[1];
					this.ImportFolderComponent(filename, bin);
				}
			} finally {
				inputStream.close();
			}
		}
		return this;
	""".

:payload a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :UploadFolderComponents;
	rdfs:range <java:java.io.InputStream>;
	msg:type "multipart/form-data".

:ImportFolderComponent rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Folder>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:imports <Folder>;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();
		var baseURI = this.toString();
		if (baseURI.lastIndexOf('/') != baseURI.length - 1) {
			baseURI = baseURI + '/';
		}
		var uri = baseURI + encodeURI(fileName);
		var mimetypes = new javax.activation.MimetypesFileTypeMap();
		var type = mimetypes.getContentType(fileName);
		var calliHasComponent = vf.createURI("http://callimachusproject.org/rdf/2009/framework#hasComponent");
		if (!con.hasStatement(null, calliHasComponent, vf.createURI(uri), true, [])) {
			con.add(this.resource, calliHasComponent, vf.createURI(uri), []);
		}
		if ("application/rdf+xml".equals(type)) {
			con.add(inputStream, uri, org.openrdf.rio.RDFFormat.RDFXML, [vf.createURI(uri)]);
		} else {
			var outputStream = con.getBlobObject(uri).openOutputStream() ;
			var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
			var read;
			try {
				while ((read = inputStream.read(buf)) >= 0) {
					outputStream.write(buf, 0, read);
				}
			} finally {
				outputStream.close();
			}
		}
		this.touchRevision();
	""".

:fileName a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :ImportFolderComponent;
	rdfs:range xsd:string.

:inputStream a owl:FunctionalProperty, owl:ObjectProperty;
	rdfs:domain :ImportFolderComponent;
	rdfs:range <java:java.io.InputStream>.



