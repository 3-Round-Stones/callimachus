# 
#    Portions Copyright (c) 2009-10 Zepheira LLC, Some Rights Reserved
#    Portions Copyright (c) 2010-11 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <../SchemaGraph>.

<../Viewable> a owl:Class;
    rdfs:label "Viewable";
    rdfs:subClassOf <../Serviceable>;
    rdfs:isDefinedBy </callimachus>.

:GetViewPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Viewable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:script """
        function findTemplate(obj, ann) {
            var annotated = findAnnotatedClass(obj.getClass(), ann);
            if (annotated) {
                var uri = annotated.getAnnotation(ann).value();
                if (uri.length != 1)
                    throw new InternalServerError("Multiple templates for " + annotated.simpleName);
                return uri[0];
            }
            throw new InternalServerError("No template");
        }

        function findAnnotatedClass(klass, ann) {
            if (klass.isAnnotationPresent(ann)) {
                return klass;
            }
            var result;
            if (klass.getSuperclass()) {
                result = findAnnotatedClass(klass.getSuperclass(), ann);
            }
            var interfaces = klass.getInterfaces();
            for (var i = interfaces.length; i--;) {
                var face = findAnnotatedClass(interfaces[i], ann);
                if (face) {
                    if (!result || result.isAssignableFrom(face)) {
                        result = face;
                    } else if (!face.isAssignableFrom(result)) {
                        throw new InternalServerError("Conflicting templates for "
                            + result.simpleName +  " and " + face.simpleName);
                    }
                }
            }
            return result;
        }

        var realm = this.FindRealm();
        var template = findTemplate(this, Packages.calli.view) + "?template&realm=" + realm;
        var con = this.objectConnection;
        var bindings = new org.openrdf.query.impl.MapBindingSet();
        bindings.addBinding("this", this.resource);
        var engine = org.callimachusproject.engine.TemplateEngine.getInstance();
        var results = engine.getTemplate(template).evaluate(bindings, con);
        return this.PostViewTemplateResults(template, results);
    """.

:PostViewTemplateResults rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <../Viewable>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:type "text/html";
    calli:post <../pipelines/render-html.xpl?result&template={template}&this=$0&query=view>.

:template a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostViewTemplateResults;
    rdfs:range xsd:string.

:xml a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostViewTemplateResults;
    rdfs:range <java:org.openrdf.query.TupleQueryResult>;
    calli:type "application/sparql-results+xml".
