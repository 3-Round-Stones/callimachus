# 
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<Page> a calli:Creatable, <IndexClass>, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, calli:Copyable, calli:Page;
	rdfs:label "Page";
	rdfs:comment "New pages can be created using the link provided or by adding a relative link to a new page (without extension) in an existing page";
	calli:icon <page.png>;
	calli:edit <page-edit.xhtml>;
	calli:copy <page-copy.xhtml>;
	calli:create <page-edit.xhtml>;
	calli:uriSpace </page/>;
	calli:reader </group/users>;
	calli:editor </group/staff>;
	calli:administrator </group/admin>.

# GET /page/MainPage
:FindWikiPage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (
		[msg:matching </page/*>] [owl:complementOf calli:Viewable])]];
	rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
	msg:method "GET", "HEAD";
	msg:expect "302-found";
	msg:imports calli:Viewable;
	msg:script """
		var uri = this.toString().toLowerCase().replace(/%20/g, '-');
		if (uri.indexOf('.xhtml') != uri.length - 6) {
			uri = uri + ".xhtml";
		}
		var page = this.objectConnection.getObject(uri);
		if (page instanceof Viewable)
			return page + "?view";
		return page.toUri().resolve("/callimachus/Page") + "?create#!" + page.toUri().getPath();
	""".

# GET /page/MainPage.xhtml?view
:GetPage owl:intersectionOf (</callimachus/operations/view.ttl#GetViewPage>
		[owl:onProperty msg:target; owl:allValuesFrom <Page>]);
	msg:script """
		return this.calliConstruct(this, 'view');
	""".

# GET /page/MainPage.xhtml
:GetPageSource rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:type "application/xhtml+xml";
	msg:header "cache-control:no-cache";
	msg:header "cache-control:cache-range";
	msg:script "return this.openInputStream()".

# POST /page/MainPage.xhtml?copy
:PostTemplateCopy owl:intersectionOf (</callimachus/operations/copy.ttl#PostCopy>
		[owl:onProperty msg:target; owl:allValuesFrom <Page>]);
	msg:script """
		var created = proceed();
		this.objectConnection.commit();
		created.UploadPage(new java.net.URL(this.toString()).openStream());
		return created;
	""".

# GET /callimachus/Page?schemes
# Called from page create/edit to load scheme options
:ListScheme rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <Page>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:method "GET";
	msg:query "schemes";
	msg:type "application/xml";
	msg:header "cache-control:no-store";
	msg:sparql """
		SELECT ?uri ?label
		WHERE {
			?uri a skos:ConceptScheme; rdfs:label ?label
		}
	""".

# POST /callimachus/Page?create
:CreatePage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:hasValue <Page>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
	msg:method "POST";
	msg:query "create";
	msg:realm </accounts>;
	msg:expect "201-created";
	msg:type "text/uri-list";
	msg:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports calli:Page;
	msg:script """
		if (!location) {
			throw new BadRequest("Missing location request header");
		}
		var template = this.calliCreate;
		if (!template)
			throw new InternalServerError("No create template");
		var created = this.objectConnection.getObject(this.toUri().resolve(location).toString());
		if (created.toString().indexOf(this.toUri().resolve("/page/").toString()) != 0) {
			throw new BadRequest("Wrong location namespace");
		}
		if (created instanceof Page) {
			throw new BadRequest("Page already exists");
		}
		created = this.objectConnection.addDesignation(created, this.toString());
		this.PropagatePermissions(created);
		this.touchRevision(); // update index page
		this.objectConnection.commit();
		created.UploadPage(inputStream);
		return created;
	""".

:location a owl:FunctionalProperty, owl:DatatypeProperty;
	rdfs:domain :CreatePage;
	rdfs:range xsd:string;
	msg:header "Location".

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :CreatePage;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/xhtml+xml".

:local a calli:LocalRealm;
	calli:domain </page/>.

# PUT /page/MainPage.xhtml
# Called by client, copy operation, create operation, and MainPage initialization
:UploadPage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Page>];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT";
	msg:realm </accounts>, :local;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:java.net.URLDecoder>;
	msg:imports <java:org.openrdf.http.object.HTTPObjectServer>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports calli:Page;
	msg:script """
		if (!xhtmlStream)
			throw new BadRequest("Missing PUT request payload");
		var con = this.objectConnection;
		var vf = con.getValueFactory();

		this.calliDeleteWebResource();

		var filename = this.resource.localName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		var label = vf.createLiteral(URLDecoder.decode(filename, "UTF-8").replace(/-/g, " "));
		con.add(this.resource, RDFS.LABEL, label, []);

		this.objectConnection.addDesignation(this, Page);

		var read;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var out = this.openOutputStream();
		try {
			while ((read = xhtmlStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
		HTTPObjectServer.resetAllCache();
	""".

:xhtmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :UploadPage;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/xhtml+xml".

