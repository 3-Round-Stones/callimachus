# 
#    Copyright (c) 2010 Zepheira LLC, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

################################
# Authentication
################################

# all common modification operations must be authenticated
</callimachus/operations/copy.ttl#GetCopyPage> http:realm </accounts>.
</callimachus/operations/copy.ttl#PostCopy> http:realm </accounts>.
</callimachus/operations/edit.ttl#GetEditPage> http:realm </accounts>.
</callimachus/operations/edit.ttl#PostEdit> http:realm </accounts>.
</callimachus/operations/delete.ttl#Delete> http:realm </accounts>.
</callimachus/queries/discussion.ttl#PostDiscussion> http:realm </accounts>.

# Transcation operations must be authenticated
audit:Transaction a owl:Class; http:realm </accounts>.

# User operations must be authorized
</accounts/user/User> http:realm </accounts>.

################################
# Authorization
################################

# interface method used by DigestRealmSupport
:AuthorizeCredential rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:cardinality "1"^^xsd:nonNegativeInteger];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:boolean].

:credential a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	obj:name "credential".

:method a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string;
	obj:name "method".

:object a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	obj:name "object".

:query a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :AuthorizeCredential;
	rdfs:range xsd:string;
	obj:name "query".

# users associated with the object are authorized
:AuthorizeMaintainer owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			{
				$object calli:scribe $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:curator $credential
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:maintainer $credential
			}
		}
	""".

# members of groups associated with the object are authorized
:AuthorizeMember owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			?group calli:member $credential
			{
				$object calli:scribe ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:curator ?group
				FILTER ($method = "GET" || $method = "HEAD" || $method = "POST")
				FILTER ($query = "copy")
			} UNION {
				$object calli:maintainer ?group
			}
		}
	""".

# users or groups associated as conservator of a class of the object are authorized
:AuthorizeConservator owl:equivalentClass :AuthorizeCredential;
	obj:imports </accounts/group/Group>;
	obj:imports <java:org.callimachusproject.annotations.conservator>;
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:script """
		if (method == "GET" || method == "HEAD" || method == "POST" && (query == "edit" || query == "discussion")) {
			if (query == null || query == "view" || query == "edit" || query == "discussion" || query == "describe" || query == "history"
						|| query == "whatlinkshere" || query == "related-changes" || query == "introspect") {
				var annotated = this.FindAnnotatedClass(conservator, object.getClass());
				for (var a = annotated.length; a--;) {
					var uri = annotated[a].getAnnotation(conservator).value();
					for (var u = uri.length; u--;) {
						if (credential.resource.stringValue().equals(uri[u]))
							return true;
						var group = this.objectConnection.objectFactory.createObject(uri[u], Group);
						if (group.calliMembers.contains(credential))
							return true;
					}
				}
			}
		}
		return proceed();
	""".

# users or groups associated as reviewer of a class of the object are authorized
:AuthorizeReviewer owl:equivalentClass :AuthorizeCredential;
	obj:imports </accounts/group/Group>;
	obj:imports <java:org.callimachusproject.annotations.reviewer>;
	obj:imports <java:org.openrdf.http.object.exceptions.InternalServerError>;
	obj:script """
		if (method == "GET" || method == "HEAD" || method == "POST" && query == "discussion") {
			if (query == null || query == "view" || query == "discussion" || query == "describe" || query == "history"
						|| query == "whatlinkshere" || query == "related-changes" || query == "introspect") {
				var annotated = this.FindAnnotatedClass(reviewer, object.getClass());
				for (var a = annotated.length; a--;) {
					var uri = annotated[a].getAnnotation(reviewer).value();
					for (var u = uri.length; u--;) {
						if (credential.resource.stringValue().equals(uri[u]))
							return true;
						var group = this.objectConnection.objectFactory.createObject(uri[u], Group);
						if (group.calliMembers.contains(credential))
							return true;
					}
				}
			}
		}
		return proceed();
	""".

:FindAnnotatedClass rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:objectResponse; owl:cardinality 1];
	obj:script """
		if (klass.isAnnotationPresent(ann)) {
			return [klass];
		}
		var result = [];
		if (klass.getSuperclass()) {
			result = this.FindAnnotatedClass(ann, klass.getSuperclass());
		}
		var interfaces = klass.getInterfaces();
		for (var i = interfaces.length; i--;) {
			var face = this.FindAnnotatedClass(ann, interfaces[i]);
			for (var f = face.length; f--;) {
				for (var r = result.length; r--;) {
					if (result[r].isAssignableFrom(face[f])) {
						result.splice(r, 1); //# annotation overridden
					}
				}
				result.push(face[f]);
			}
		}
		return result;
	""".

:ann a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :FindAnnotatedClass;
	rdfs:range <java:java.lang.Class>.

:klass a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :FindAnnotatedClass;
	rdfs:range <java:java.lang.Class>.

# anybody with credentials can login and is welcome
:AuthorizeLoginPage owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$object calli:authenticates [calli:member $credential]
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($object = </accounts>)
			FILTER ($query = "login" || $query = "welcome")
		}
	""".

# any authenticated user can view any other user
:AuthorizeUserView owl:equivalentClass :AuthorizeCredential;
	obj:sparql """
		ASK {
			$object a </accounts/user/User>
			FILTER ($method = "GET" || $method = "HEAD")
			FILTER ($query = "view" || !bound($query))
		}
	""".

# Group curators can create users if they can also create groups
:AuthorizeUserCreate owl:equivalentClass :AuthorizeCredential;
	obj:imports </accounts/group/Group>;
	obj:script """
		if (query == "usercreate" && object instanceof Group)
			return this.AuthorizeCredential(credential, method, object, "copy");
		return proceed()
	""".

# transcations are authorized by the object they modified
:AuthorizeTransactionView owl:equivalentClass :AuthorizeCredential;
	obj:imports audit:Transaction;
	obj:script """
		if (proceed())
			return true;
		if (method == "GET" || method == "HEAD" || method == "POST" && query == "discussion") {
			if (query == null || query == "view" || query == "discussion" || query == "describe" || query == "history"
						|| query == "whatlinkshere" || query == "related-changes" || query == "introspect") {
				if (object instanceof Transaction) {
					var iter = this.ListSubjectsOfTransaction(object).iterator();
					while (iter.hasNext()) {
						if (this.AuthorizeCredential(credential, "GET", iter.next(), null))
							return true;
					}
				}
			}
		}
		return false;
	""".

:ListSubjectsOfTransaction rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target; owl:hasValue </accounts>];
	obj:sparql """
		SELECT DISTINCT ?subj
		WHERE {
			$transaction a audit:Transaction
			{
				GRAPH $transaction { ?subj ?pred ?obj }
			} UNION {
				GRAPH $transaction { [rdf:subject ?subj] }
			} UNION {
				$transaction audit:contained [rdf:subject ?subj]
			}
			OPTIONAL { ?subj a ?transaction FILTER(?transaction = audit:Transaction) }
			FILTER (!bound(?transaction))
		}
	""".

:transaction a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :ListSubjectsOfTransaction;
	rdfs:range audit:Transaction.

