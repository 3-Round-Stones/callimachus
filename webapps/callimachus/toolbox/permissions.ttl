# 
#    Copyright (c) 2011 Talis Inc, Some Rights Reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix dc:<http://purl.org/dc/elements/1.1/>.
@prefix dcterms:<http://purl.org/dc/terms/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <../SchemaGraph>.

:GetPermissions rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:javax.xml.stream.XMLEventReader>];
	calli:method "GET";
	calli:query "permissions";
	calli:realm </>;
	calli:type "application/xhtml+xml";
	calli:header "cache-control:no-cache";
	calli:transform <../transforms/TransformPage>;
	msg:imports <permissions.xhtml>;
	msg:script """
		return permissions_xhtml.calliConstruct(this);
	""".

# used by permissions.xhtml
:GetRdfTypes rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:literalSet; owl:allValuesFrom xsd:string];
	calli:method "GET";
	calli:query "rdftype";
	calli:type "text/uri-list";
	msg:imports <java:org.openrdf.annotations.Iri>;
	msg:script """
		function addConcepts(klass, concepts, visited) {
			if (visited.contains(sup))
				return concepts;
			visited.add(klass);
			if (klass.isAnnotationPresent(Iri)) {
				concepts.add(klass.getAnnotation(Iri).value());
			}
			var sup = klass.getSuperclass();
			if (sup) {
				addConcepts(sup, concepts, visited);
			}
			var interfaces = klass.getInterfaces();
			for (var i = 0; i < interfaces.length; i++) {
				addConcepts(interfaces[i], concepts, visited);
			}
			return concepts;
		}
		return addConcepts(this.getClass(), new java.util.TreeSet(), new java.util.HashSet());
	""".

:PostPermissions rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:cardinality 1];
	calli:method "POST";
	calli:query "permissions";
	calli:realm </>;
	calli:expect "201-modified";
	msg:imports <permissions.xhtml>;
	msg:script """
		permissions_xhtml.calliEditResource(this, msg.input);
		var parent = this.SelectParentComposite();
		if (parent) {
			parent.touchRevision();
		}
		return this;
	""".

:input a owl:ObjectProperty; a owl:FunctionalProperty;
	rdfs:domain :PostPermissions;
	rdfs:range <java:java.io.InputStream>;
	calli:type "application/sparql-update".

:PostClassPermissions owl:intersectionOf ( :PostPermissions
		[owl:onProperty msg:target; owl:allValuesFrom owl:Class]);
	msg:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.sail.auditing.vocabulary.Audit>;
	msg:imports <java:org.openrdf.model.vocabulary.RDF>;
	msg:imports <../SchemaGraph>;
	msg:script """
		var before = this.calliAdministrator.empty;
		var ret = proceed();
		if (!before) {
			var obj = this.objectConnection.getObject(this.resource);
			if (obj.calliAdministrator.empty) {
				throw new BadRequest("Cannot remove all class administrators");
			}
		}
		var con = this.objectConnection;
		var of = con.objectFactory;
		con.addDesignation(of.createObject(Audit.CURRENT_TRX), SchemaGraph);
		con.recompileSchemaOnClose();
		return ret;
	""".

:SelectParentComposite rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom calli:Composite];
	msg:sparql """
		SELECT ?composite
		WHERE {
			?composite calli:hasComponent $this
		}
		LIMIT 1
	""".

