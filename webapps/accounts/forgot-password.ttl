@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix obj:<http://www.openrdf.org/rdf/2009/object#>.
@prefix http:<http://www.openrdf.org/rdf/2009/httpobject#>.
@prefix audit:<http://www.openrdf.org/rdf/2009/auditing#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

:anybody a calli:AnybodyRealm;
	calli:origin </>;
	calli:domain </accounts?forgotpassword>.

# Linked from request password email
:GetForgotPasswordPage rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:functionalLiteralResponse;
		owl:allValuesFrom xsd:string];
	http:method "GET";
	http:operation "forgotpassword";
	http:type "text/html";
	http:cache-control "no-store";
	http:realm :anybody;
	obj:imports <forgot-password.xhtml>;
	obj:script """
		return forgot_password_xhtml.calliConstructHTML(this);
	""".

# Sends request for password reset emails
# Submitted by form in the unauthorized page
:PostForgotPassword rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom owl:Nothing];
	http:method "POST";
	http:operation "forgotpassword";
	obj:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	obj:imports <java:org.apache.commons.codec.digest.DigestUtils>;
	obj:imports <mail-request-password.xhtml>;
	obj:imports <java:java.io.CharArrayWriter>;
	obj:imports <java:java.util.Random>;
	obj:imports <java:java.lang.Integer>;
	obj:imports <java:java.lang.System>;
	obj:script """
		if (!formEmail)
			throw new BadRequest("Missing Email");
		var iter = FindUsersByEmail(formEmail).iterator();
		if (!iter.hasNext()) {
			java.lang.System.err.println("No users with email " + formEmail + " found");
		}
		while (iter.hasNext()) {
			var user = iter.next();
			var ha1 = DigestUtils.md5Hex(user.calliEncoded);
			var nonce = Integer.toHexString(new Random(System.nanoTime()).nextInt());
			var ha2 = DigestUtils.md5Hex(user.toString());
			var token = DigestUtils.md5Hex(ha1 + ":" + nonce + ":" + ha2);
			var qs = "?resetpassword&amp;nonce=" + nonce + "&amp;token=" + token;
			var body = mail_request_password_xhtml.calliConstructHTML(user);
			body = body.replaceAll("\\\\?resetpassword", user + "?resetpassword");
			body = body.replaceAll("\\\\?resetpassword", qs);
			user.sendMessage(body, user.rdfsLabels.iterator().next() + " <" + formEmail + ">");
			java.lang.Thread.sleep(new java.util.Random().nextInt() % 2000 + 2000);
		}
	""".

:formEmail a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :PostForgotPassword;
	rdfs:range xsd:string;
	http:type "text/plain".

# Looks up user by email address
# Used to request password reset
:FindUsersByEmail rdfs:subClassOf obj:Message;
	rdfs:subClassOf [owl:onProperty obj:target;
		owl:hasValue </accounts>];
	rdfs:subClassOf [owl:onProperty obj:objectResponse;
		owl:allValuesFrom calli:User];
	obj:sparql """
		SELECT REDUCED ?user
		WHERE {
			$this calli:authenticates [calli:member ?user].
			?user calli:email $email
		}
	""".

:email a owl:DatatypeProperty, owl:FunctionalProperty;
	rdfs:domain :FindUsersByEmail;
	rdfs:range xsd:string;
	obj:name "email".

