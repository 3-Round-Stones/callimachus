# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <SchemaGraph>.

<Profile> a owl:Class;
    rdfs:subClassOf <Viewable>;
    rdfs:isDefinedBy </callimachus>.

<./> calli:hasComponent <profile>.

<profile> a <Profile>;
    rdfs:label "profile";
    calli:administrator </group/admin>.

:GetRdfProfile rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Profile>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.model.impl.LinkedHashModel>];
    calli:method "GET";
    calli:requires calli:editor;
    calli:type "application/rdf+xml;q=0.9", "text/turtle;q=0.9";
    calli:header "cache-control:no-validate";
    calli:header "cache-control:max-age=60";
    calli:imports <java:org.openrdf.model.impl.LinkedHashModel>;
    calli:script """
        var vf = this.objectConnection.valueFactory;
        var xsd = "http://www.w3.org/2001/XMLSchema#";
        var rdfa = "http://www.w3.org/ns/rdfa#";
        var token = vf.createURI(xsd, "NMTOKEN");
        var anyURI = vf.createURI(xsd, "anyURI");
        var ns = this.resource + "#";
        var namespaces = this.objectConnection.namespaces.asList();
        var model = new LinkedHashModel();
        for (var i = 0; i < namespaces.size(); i++) {
            var prefix = namespaces.get(i).prefix;
            var uri = namespaces.get(i).name;
            var node = vf.createURI(ns, prefix);
            model.setNamespace(prefix, uri);
            model.add(node, vf.createURI(rdfa, "prefix"), vf.createLiteral(prefix, token), []);
            model.add(node, vf.createURI(rdfa, "uri"), vf.createLiteral(uri, anyURI), []);
        }
        return model;
    """.
# GET /callimachus/profile?view
:GetHtmlProfile owl:intersectionOf (<viewable.ttl#GetViewPage>
        [owl:onProperty msg:target; owl:allValuesFrom <Profile>]);
    calli:rel "alternate";
    calli:method "GET";
    calli:query "view";
    calli:requires calli:editor;
    calli:type "text/html";
    calli:header "cache-control:no-validate";
    calli:header "cache-control:max-age=300";
    calli:script """
        return this.TransformProfile(this.GetRdfProfile());
    """.

:TransformProfile rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Profile>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:string];
    calli:type "text/html";
    calli:post <pipelines/profile.xpl?results&target=$0>.

:model a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :TransformProfile;
    rdfs:range <java:org.openrdf.model.impl.LinkedHashModel>;
    calli:type "application/rdf+xml".

:GetJsonProfile rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Profile>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.ByteArrayOutputStream>];
    calli:method "GET";
    calli:requires calli:reader;
    calli:type "application/json;q=0.9";
    calli:header "cache-control:no-validate";
    calli:header "cache-control:max-age=60";
    calli:imports <java:java.io.ByteArrayOutputStream>;
    calli:script """
        var output = new java.io.ByteArrayOutputStream();
        var writer = new java.io.OutputStreamWriter(output, "UTF-8");
        var namespaces = this.objectConnection.namespaces.asList();
        writer.write("{");
        for (var i = 0; i < namespaces.size(); i++) {
            var prefix = namespaces.get(i).prefix;
            var uri = namespaces.get(i).name;
            writer.write('"');
            writer.write(prefix);
            writer.write('":"');
            writer.write(uri);
            writer.write('"');
            if (i < namespaces.size() - 1) {
                writer.write(",\\n");
            }
        }
        writer.write("}");
        writer.flush();
        return output;
    """.

:PostProfile rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Profile>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Profile>];
    calli:method "POST";
    calli:requires calli:editor;
    calli:expect "303-see-other";
    calli:type "text/uri-list";
    calli:realm </>;
    calli:script """
        var iter = form.entrySet().iterator();
        while (iter.hasNext()) {
            var entry = iter.next();
            this.objectConnection.setNamespace(entry.key, entry.value[0]);
        }
        var namespaces = this.objectConnection.namespaces.asList();
        for (var i = 0; i < namespaces.size(); i++) {
            var prefix = namespaces.get(i).prefix;
            if (!form.containsKey(prefix)) {
                this.objectConnection.removeNamespace(prefix);
            }
        }
        return this;
    """.

:form a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :PostProfile;
    rdfs:range <java:java.util.Map>;
    calli:type "application/x-www-form-urlencoded".

