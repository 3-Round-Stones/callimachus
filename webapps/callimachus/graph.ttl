# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<Graph> a calli:Creatable, owl:Class;
	rdfs:subClassOf calli:NamedGraph;
	rdfs:label "Graph";
	calli:icon <graph.png>;
	calli:create <graph-create.xhtml>;
	calli:uriSpace </>.

:GetGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
	msg:method "GET";
	msg:type "application/rdf+xml;q=0.4", "text/turtle;q=0.5";
	msg:transform :TransformGraph;
	msg:sparql "CONSTRUCT { ?s ?p ?o } WHERE { GRAPH $this { ?s ?p ?o } }".

:TransformGraph rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom calli:NamedGraph];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
	msg:type "application/xml";
	msg:transform <styles/styles.ttl#TransformLayout>;
	msg:xslt <styles/graph.xsl>.

:inputStream a owl:ObjectProperty, owl:FunctionalProperty;
	rdfs:domain :TransformGraph;
	rdfs:range <java:java.io.InputStream>;
	msg:type "application/xml".

:PostGraphCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Graph> ]);
	msg:imports calli:NamedGraph;
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <java:org.openrdf.rio.RDFFormat>;
	msg:imports <java:java.io.BufferedInputStream>;
	msg:imports <java:org.callimachusproject.util.MultipartParser>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <Graph>;
	msg:imports <graph-uploaded.xhtml>;
	msg:script """
		var parser = new MultipartParser(new BufferedInputStream(body, 65536));
		var file = parser.next();
		var headers = parser.getHeaders();
		var disposition = headers.get("content-disposition");
		if (!disposition || disposition.indexOf("filename") < 0)
			throw new BadRequest("No file provided");

		var con = this.objectConnection;
		var vf = con.getValueFactory();
		var fileName = disposition.replace(/.*filename="/g, '').replace(/".*/g, '');
		var format = RDFFormat.forFileName(fileName, RDFFormat.RDFXML);
		var name = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/g, "$1");
		var label = vf.createLiteral(name.replace(/-/g, " "));
		var obj = location;
		if (!obj)
			throw new BadRequest("No graph location provided");

		java.lang.System.out.println("Clearing " + uri);
		con.removeDesignation(obj, NamedGraph);
		con.removeDesignation(obj, Graph);
		con.remove(this.resource, RDFS.LABEL, vf.createLiteral(label), []);
		con.clear([vf.createURI(uri)]);
		obj.touchRevision();

		var oldLocal = URLEncoder.encode(fileName, "UTF-8").replace(/%20/g, "+");
		var oldUri = this.toUri().resolve("/graph/") + oldLocal;
		var oldObj = con.getObject(oldUri);
		con.removeDesignation(oldObj, NamedGraph);
		con.removeDesignation(oldObj, Graph);
		con.clear([vf.createURI(oldUri)]);

		java.lang.System.out.println("Parsing " + fileName);
		con.add(file, uri, format, [vf.createURI(uri)]);
		con.addDesignation(obj, NamedGraph);
		con.addDesignation(obj, Graph);
		con.add(this.resource, RDFS.LABEL, label, []);
		parser.close();
		con.commit();
		java.lang.System.gc();
		java.lang.System.out.println("Imported " + uri);
		return graph_uploaded_xhtml.calliConstructHTML(obj);
	""".

