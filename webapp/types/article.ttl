# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Article>.

<Article> a <Creatable>, owl:Class;
    rdfs:subClassOf <Book>;
    rdfs:label "Article";
    rdfs:comment "An Article is a DocBook file, a popular and open standard for marking up technical documentation.";
    owl:equivalentClass </callimachus/Article>, </callimachus/1.0/types/Article>, </callimachus/1.3/types/Article>, </callimachus/1.4/types/Article>;
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/users>,</auth/groups/staff>,</auth/groups/power>,</auth/groups/admin>;
    calli:icon <../images/article.png>;
    calli:thumbnail <../images/article.svg>;
    calli:edit <../templates/article-edit.xhtml>;
    calli:create <../templates/article-create.xhtml>;
    calli:mediaType "application/docbook+xml";
    calli:documentTag <http://docbook.org/ns/docbook#article>.

:ReplaceArticle owl:intersectionOf (<file.ttl#ReplaceFileContent>
        [owl:onProperty msg:target; owl:allValuesFrom <Article> ]);
    calli:imports <java:org.openrdf.http.object.exceptions.ServiceUnavailable>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports foaf:Document;
    calli:script """
        if (modified) {
            //# dcterms:modified
            var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
            this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);
        }

        if (contentType.indexOf("application/xhtml+xml") == 0) {
            content = this.ConvertXhtmlDocbook(content);
        }

        var read;
        var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
        var out = this.openOutputStream();
        try {
            while ((read = content.read(buf)) >= 0) {
                out.write(buf, 0, read);
            }
        } finally {
            out.close();
        }

        try {
            this.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }
    """.

# PUT /books/main-article.docbook?xhtml
:UploadXhtmlArticle rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "PUT";
    msg:path "?xhtml";
    calli:requires calli:editor;
    calli:script "return this.ReplaceFileContent(xhtmlStream, 'application/xhtml+xml', true);".

:xhtmlStream a owl:ObjectProperty; a owl:FunctionalProperty;
    rdfs:domain :UploadXhtmlArticle;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/xhtml+xml".

# GET /books/main-article.docbook?xhtml
:GetArticleXhtml rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:method "GET";
    msg:path "?xhtml";
    calli:rel "edit-media";
    calli:requires calli:reader;
    msg:type "application/xhtml+xml";
    msg:header "cache-control:no-cache";
    calli:post "../transforms/article-edit-xhtml.xsl?results\nContent-Location: {+0}\nContent-Type: application/docbook+xml".

:ConvertXhtmlDocbook rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:type "application/docbook+xml";
    calli:post "../transforms/article-save-xhtml.xsl?results".

:xhtmlInput a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :ConvertXhtmlDocbook;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/xhtml+xml".

:DeleteArticleIfNotUsed rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Article>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.apache.http.HttpResponse>];
    msg:method "DELETE";
    msg:path "?xhtml";
    calli:requires calli:editor;
    calli:script """
        return this.DeleteIfNotUsed();
    """.

