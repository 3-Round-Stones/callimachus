# 
#    Copyright (c) 2010 James Leigh, Some rights reserved
#    Copyright (c) 2011 Talis Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix sd:<http://www.w3.org/ns/sparql-service-description#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>.

<RdfSchemaGraph> a owl:Class;
    rdfs:subClassOf <Serviceable>;
    rdfs:label "RDF Schema graph";
    owl:equivalentClass </callimachus/SchemaGraph>, </callimachus/1.0/types/SchemaGraph>, </callimachus/1.3/types/RdfSchemaGraph>, </callimachus/1.4/types/RdfSchemaGraph>;
    rdfs:isDefinedBy <../../ontology>.

<RdfGraph> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, sd:NamedGraph;
    owl:equivalentClass </callimachus/1.0/types/NamedGraph>, </callimachus/1.3/types/RdfGraph>, </callimachus/1.4/types/RdfGraph>;
    rdfs:label "RDF/XML graph";
    rdfs:comment "RDF document encoded as a RDF/XML file.";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/graph.png>;
    calli:thumbnail <../images/graph.svg>;
    calli:create <../templates/file-create.xhtml>;
    calli:view <../templates/graph-view.xhtml>;
    calli:mediaType "application/rdf+xml";
    calli:documentTag <http://www.w3.org/1999/02/22-rdf-syntax-ns#RDF>.

<RdfTurtle> a <Creatable>, owl:Class;
    rdfs:subClassOf <File>, sd:NamedGraph;
    owl:equivalentClass </callimachus/1.0/types/GraphDocument>, </callimachus/1.3/types/RdfTurtle>, </callimachus/1.4/types/RdfTurtle>;
    rdfs:label "RDF Turtle graph";
    rdfs:comment "RDF document encoded as a Turtle file.";
    rdfs:isDefinedBy <../../ontology>;
    calli:administrator </auth/groups/super>;
    calli:author </auth/groups/admin>;
    calli:icon <../images/graph.png>;
    calli:thumbnail <../images/graph.svg>;
    calli:create <../templates/graph-create.xhtml>;
    calli:view <../templates/graph-view.xhtml>;
    calli:edit <../templates/graph-edit.xhtml>;
    calli:mediaType "text/turtle".

################################
# Graph Document
################################

# GET /graph.ttl
:GetGraphDocument rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfTurtle>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    msg:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    msg:type "text/turtle";
    msg:header "cache-control:no-cache";
    msg:header "cache-control:cache-range";
    msg:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.openReader(true)".

# PUT /graph.ttl
:UploadGraphDocument rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfTurtle>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.apache.commons.io.input.ReaderInputStream>;
    calli:imports <java:java.nio.charset.Charset>;
    calli:script """
        var stream = new ReaderInputStream(reader, Charset.defaultCharset());
        return this.ReplaceFileContent(stream, 'text/turtle', true);
    """.

:reader a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :UploadGraphDocument;
    rdfs:range <java:java.io.Reader>;
    msg:type "text/turtle".

:ReplaceGraphDocument owl:intersectionOf (<file.ttl#ReplaceFileContent>
        [owl:onProperty msg:target; owl:allValuesFrom <RdfTurtle>]);
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:imports <java:org.openrdf.http.object.io.ProducerStream>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports <java:java.nio.charset.Charset>;
    calli:imports sd:NamedGraph;
    calli:script """
        if (modified) {
            //# dcterms:modified
            var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
            this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);
        }

        if (!content)
            throw new BadRequest("Missing PUT request payload");
        var con = this.objectConnection;
        con.addDesignation(this, NamedGraph);
        con.clear([this.resource]); //# clear graph
        var object = this;
        var inputStream = new ProducerStream(function(pipe) {
            var read;
            var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
            var out = object.openOutputStream();
            try {
                while ((read = content.read(buf)) >= 0) {
                    out.write(buf, 0, read); //# save to blob
                    pipe.write(buf, 0, read); //# pipe to RDF store
                }
            } finally {
                out.close();
                pipe.close();
            }
        });
        
        java.lang.System.err.println("Parsing " + this);
        var reader = new org.callimachusproject.io.TextReader(inputStream, Charset.defaultCharset());
        con.add(reader, this.toString(), RDFFormat.TURTLE, [this.resource]);

        this.touchRevision();

        if (this.IsRdfSchemaGraph()) {
            var stream = this.openInputStream();
            try {
                this.setSchemaGraph(this.resource, stream, RDFFormat.TURTLE);
            } finally {
                stream.close();
            }
        }
        this.resetAllCache();
    """.

:IsRdfSchemaGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfTurtle>];
    rdfs:subClassOf [owl:onProperty msg:literal; owl:allValuesFrom xsd:boolean];
    msg:sparql "ASK { $this a <RdfSchemaGraph> }".

################################
# Named Graph
################################

# GET /graph.rdf
:GetNamedGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfGraph>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.InputStream>];
    msg:method "GET";
    calli:rel "edit-media";
    calli:requires calli:reader;
    msg:type "application/rdf+xml";
    msg:header "cache-control:no-cache";
    msg:header "cache-control:cache-range";
    msg:header "Link:<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return this.openInputStream()".

# PUT /graph.rdf
:UploadRdfGraph rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <RdfGraph>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    msg:method "PUT";
    calli:requires calli:editor;
    calli:imports <java:org.apache.commons.io.input.ReaderInputStream>;
    calli:imports <java:java.nio.charset.Charset>;
    calli:script """
        return this.ReplaceFileContent(graphStream, 'application/rdf+xml', true);
    """.

:graphStream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :UploadRdfGraph;
    rdfs:range <java:java.io.InputStream>;
    msg:type "application/rdf+xml".

:ReplaceRdfGraph owl:intersectionOf (<file.ttl#ReplaceFileContent>
        [owl:onProperty msg:target; owl:allValuesFrom <RdfGraph>]);
    calli:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
    calli:imports <java:org.openrdf.http.object.io.ProducerStream>;
    calli:imports <java:org.openrdf.rio.RDFFormat>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports sd:NamedGraph;
    calli:script """
        if (modified) {
            //# dcterms:modified
            var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
            this.objectConnection.add(this.resource, DCTERMS.MODIFIED, this.objectConnection.valueFactory.createLiteral(now), []);
        }

        if (!content)
            throw new BadRequest("Missing PUT request payload");
        var con = this.objectConnection;
        con.addDesignation(this, NamedGraph);
        con.clear([this.resource]); //# clear graph
        var object = this;
        var inputStream = new ProducerStream(function(pipe) {
            var read;
            var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
            var out = object.openOutputStream();
            try {
                while ((read = content.read(buf)) >= 0) {
                    out.write(buf, 0, read); //# save to blob
                    pipe.write(buf, 0, read); //# pipe to RDF store
                }
            } finally {
                out.close();
                pipe.close();
            }
        });
        
        java.lang.System.err.println("Parsing " + this);
        con.add(inputStream, this.toString(), RDFFormat.RDFXML, [this.resource]);

        this.touchRevision();
        this.resetAllCache();
    """.

