# 
#    Copyright (c) 2011 3 Round Stones Inc., Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix ldp:<http://www.w3.org/ns/ldp#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix :<#>.

<> a <RdfSchemaGraph>;
    foaf:primaryTopic <Composite>.

<Composite> a owl:Class;
    rdfs:label "Composite";
    rdfs:subClassOf <Serviceable>, calli:Composite;
    owl:equivalentClass </callimachus/Composite>, </callimachus/1.0/types/Composite>, </callimachus/1.3/types/Composite>;
    rdfs:isDefinedBy <../../ontology>.

################################
# GET describedby
################################

:GetEditContainerPage owl:intersectionOf ( <editable.ttl#GetEditPage>
        [owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (<Editable> <Composite>)]]);
    calli:rel "edit-form";
    calli:method "GET";
    calli:query "edit";
    calli:requires calli:editor;
    calli:type "text/html";
    calli:header "cache-control:no-cache";
    calli:header "Link:<http://www.w3.org/ns/ldp#IndirectContainer>;rel=\"type\",<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return proceed();".

:GetContainerMetadata owl:intersectionOf ( <editable.ttl#GetMetadata>
        [owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (<Editable> <Composite>)]]);
    calli:method "GET";
    calli:query "edit";
    calli:requires calli:editor;
    calli:type "text/turtle;q=0.6", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2";
    calli:header "Link:<http://www.w3.org/ns/ldp#IndirectContainer>;rel=\"type\",<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return proceed();".

:GetHtmlContainerDescription owl:intersectionOf ( <serviceable.ttl#GetHtmlDescription>
        [owl:onProperty msg:target; owl:allValuesFrom <Composite>]);
    calli:title "RDF Describe";
    calli:rel "describedby";
    calli:method "GET";
    calli:query "describe";
    calli:requires calli:reader;
    calli:type "text/html";
    calli:header "Link:<http://www.w3.org/ns/ldp#IndirectContainer>;rel=\"type\",<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:script "return proceed();".

:GetRdfContainerDescription owl:intersectionOf ( <serviceable.ttl#GetRdfDescription>
        [owl:onProperty msg:target; owl:allValuesFrom <Composite>]);
    calli:title "RDF Describe";
    calli:rel "describedby";
    calli:method "GET";
    calli:query "describe";
    calli:requires calli:reader;
    calli:type "text/turtle;q=0.6", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2";
    calli:header "Link:<http://www.w3.org/ns/ldp#IndirectContainer>;rel=\"type\",<http://www.w3.org/ns/ldp#Resource>;rel=\"type\"";
    calli:imports <java:org.callimachusproject.io.DescribeResult>;
    calli:imports <java:org.callimachusproject.io.FilteredGraphResult>;
    calli:script """
        var con = this.objectConnection;
        if (preferDescription && preferDescription.match(/^ *return *= *representation *;/)) {
            var m = preferDescription.match(/; *(include|omit) *= *"([^"]*)"/);
            if (m && m[1] == 'include') {
                var inc = m[2];
                var result = new FilteredGraphResult();
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMinimalContainer") >= 0) {
                    result.addResult(this.FindMinimalContainer(queryDescription))
                        .addResult(new DescribeResult(this.resource, con));
                } else if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMembership") >= 0) {
                    result.addResult(this.FindMembershipTriples());
                }
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferMembership") < 0) {
                    result.omitPredicate(con.valueFactory.createURI("http://callimachusproject.org/rdf/2009/framework#hasComponent"));
                }
                if (inc.indexOf("http://www.w3.org/ns/ldp#PreferContainment") >= 0) {
                    result.addResult(this.FindContainmentTriples(queryDescription));
                }
                return result;
            } else if (m && m[1] == 'omit') {
                var omit = m[2];
                var result = new FilteredGraphResult();
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMinimalContainer") < 0) {
                    result.addResult(this.FindMinimalContainer(queryDescription))
                        .addResult(new DescribeResult(this.resource, con));
                } else if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMembership") < 0) {
                    result.addResult(this.FindMembershipTriples());
                }
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferMembership") >= 0) {
                    result.omitPredicate(con.valueFactory.createURI("http://callimachusproject.org/rdf/2009/framework#hasComponent"));
                }
                if (omit.indexOf("http://www.w3.org/ns/ldp#PreferContainment") < 0) {
                    result.addResult(this.FindContainmentTriples(queryDescription));
                }
                return result;
            }
        }
        return new FilteredGraphResult()
            .addResult(new DescribeResult(this.resource, con))
            .addResult(this.FindMinimalContainer(queryDescription))
            .addResult(this.FindContainmentTriples(queryDescription));
    """.

:FindMinimalContainer rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX dcterms: <http://purl.org/dc/terms/>
        PREFIX skos:<http://www.w3.org/2004/02/skos/core#>
        PREFIX ldp: <http://www.w3.org/ns/ldp#>
        PREFIX foaf:<http://xmlns.com/foaf/0.1/>
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            ?container foaf:primaryTopic ?self;
                a ldp:IndirectContainer, ldp:Container, ldp:RDFSource;
                ldp:membershipResource ?self;
                ldp:hasMemberRelation calli:hasComponent;
                ldp:insertedContentRelation foaf:primaryTopic
        } WHERE {
            BIND ($this AS ?self)
            BIND (iri(concat(str($this), "?", $queryContainer)) AS ?container)
        }
    """.

:queryContainer a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :FindMinimalContainer;
    rdfs:range xsd:string.

:FindContainmentTriples rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX ldp: <http://www.w3.org/ns/ldp#>
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            ?container ldp:contains ?member, ?media
        } WHERE {
            $this calli:hasComponent ?component
            BIND (iri(concat(str($this), "?", $queryMember)) AS ?container)
            BIND (iri(concat(str(?component), "?", $queryMember)) AS ?member)
            OPTIONAL {
                ?component a ?type .
                ?doctype owl:equivalentClass* ?type .
                ?doctype rdfs:subClassOf* <File>
                BIND (?component AS ?media)
            }
        }
    """.

:queryMember a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :FindContainmentTriples;
    rdfs:range xsd:string.

:FindMembershipTriples rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:org.openrdf.query.GraphQueryResult>];
    msg:sparql """
        PREFIX calli: <http://callimachusproject.org/rdf/2009/framework#>
        CONSTRUCT {
            $this calli:hasComponent ?component
        } WHERE {
            $this calli:hasComponent ?component
        }
    """.

################################
# Create
################################

:PostLDPCreate rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    rdfs:subClassOf [owl:onProperty :fileClass; owl:hasValue <File>].

:create a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain [owl:unionOf (:GetCreatorPage :PostLDPCreate :FindCreatableVersion :LookupConstructor)];
    calli:query "create";
    calli:type "text/uri-list".

:fileClass a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostLDPCreate.

:intermediate a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLDPCreate;
    rdfs:range xsd:boolean;
    calli:query "intermediate".

:link a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLDPCreate;
    rdfs:range xsd:string;
    calli:header "Link";
    calli:type "text/plain".

:slug a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLDPCreate;
    rdfs:range xsd:string;
    calli:header "Slug";
    calli:type "text/plain".

:type a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostLDPCreate;
    rdfs:range xsd:string;
    calli:header "Content-Type";
    calli:type "text/plain".

:GetCreatorPage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:method "GET";
    calli:query "create";
    calli:requires calli:contributor;
    calli:type "text/html";
    calli:imports <Creatable>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:script """
        if (!(create instanceof Creatable)) {
            var createAlternate = this.FindCreatableVersion(create);
            if (!(createAlternate instanceof Creatable))
                throw new BadRequest("Cannot create: " + create);
            create = createAlternate;
        }
        if (!create.calliCreate || create.calliCreate.isEmpty())
            throw new InternalServerError("No create template");
        if (create.calliCreate.size() != 1)
            throw new InternalServerError("Multiple create templates");
        var page = create.calliCreate.iterator().next();
        var stream = page.openInputStream();
        if (!stream)
            throw new InternalServerError(page + " does not exist");
        try {
            return this.TransformCreatePage(page, stream);
        } finally {
            stream.close();
        }
    """.

:TransformCreatePage rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <java:java.io.Reader>];
    calli:post "../pipelines/creatable-html.xpl?results&target={0}\nContent-Location: {+createPage}\nContent-Type: application/xhtml+xml".

:createPage a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :TransformCreatePage.

:createPageStream a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :TransformCreatePage;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/xhtml+xml".

:PostRdfCreate rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "create";
    calli:requires calli:contributor;
    calli:expect "201-created";
    calli:type "message/x-response";
    calli:script """
        return this.PostRDFSource(create, fileClass, intermediate, link, createData, slug, type, true);
    """.

:createData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostRdfCreate;
    rdfs:range <java:java.io.InputStream>;
    calli:type "text/turtle", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2".

:PostRdfDescribe rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "describe";
    calli:requires calli:administrator;
    calli:expect "201-created";
    calli:type "message/x-response";
    calli:script """
        var resp = this.PostRDFSource(create, fileClass, intermediate, link, describeData, slug, type, false);
        if (resp.headers.link.indexOf('NonRDFSource') > 0) return resp;
        var createdUri = resp.headers.location;
        return {
            status: 201,
            message: 'Created',
            headers:{
                link: '<' + createdUri + '>;rev="describedby";anchor="' + createdUri + '?describe"',
                location: createdUri + '?describe',
                'content-type': 'text/uri-list'
            },
            body: [createdUri + '?describe']
        };
    """.

:describeData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostRdfDescribe;
    rdfs:range <java:java.io.InputStream>;
    calli:type "text/turtle", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2".

:PostRdfEdit rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "edit";
    calli:requires calli:contributor;
    calli:expect "201-created";
    calli:type "message/x-response";
    calli:script """
        var resp = this.PostRDFSource(create, fileClass, intermediate, link, editData, slug, type, true);
        var createdUri = resp.headers.location;
        if (resp.headers.link.indexOf('NonRDFSource') > 0) return {
            status: 201,
            message: 'Created',
            headers:{
                link: [
                    '<' + createdUri + '>;rev="edit-media";anchor="' + createdUri + '"',
                    '<' + createdUri + '?edit>;rel="describedby";anchor="' + createdUri + '"',
                    '<http://www.w3.org/ns/ldp#NonRDFSource>;rel="type";anchor="' + createdUri + '"'
                ].join(','),
                location: createdUri,
                'content-type': 'text/uri-list'
            },
            body: [createdUri]
        };
        return {
            status: 201,
            message: 'Created',
            headers:{
                link: '<' + createdUri + '>;rev="describedby";anchor="' + createdUri + '?edit"',
                location: createdUri + '?edit',
                'content-type': 'text/uri-list'
            },
            body: [createdUri + '?edit']
        };
    """.

:editData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostRdfEdit;
    rdfs:range <java:java.io.InputStream>;
    calli:type "text/turtle", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2".

:PostRDFSource rdfs:subClassOf :PostLDPCreate;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.ServiceUnavailable>;
    calli:imports <java:org.openrdf.rio.helpers.StatementCollector>;
    calli:imports <Composite>;
    calli:imports <Serviceable>;
    calli:script """
        if (link && link.match(/<http:..www.w3.org.ns.ldp#BasicContainer>[^<]*; *rel="type"/))
            throw new BadRequest("ldp:BasicContainer interaction model is not supported");
        if (link && link.match(/<http:..www.w3.org.ns.ldp#DirectContainer>[^<]*; *rel="type"/))
            throw new BadRequest("ldp:DirectContainer interaction model is not supported");
        if (link && link.match(/<http:..www.w3.org.ns.ldp#NonRDFSource>[^<]*; *rel="type"/))
            return this.PostNonRDFSource(create, fileClass, intermediate, link, rdfData, slug, type);

        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        var nfd = slug && java.text.Normalizer.normalize(decodeURIComponent(slug), java.text.Normalizer.Form.NFD);
        var local = nfd && encodeURI(nfd).replace(/%25(\\w\\w)/g, '%$1').replace(/%20/g, '+');
        if (local == null || local.length === 0) {
            local = java.util.UUID.randomUUID().toString();
        }
        var createdUri;
        var creatorUri = this.getResource().stringValue();
        var needSlash = creatorUri.charAt(creatorUri.length-1) != '/';
        if (needSlash) {
            createdUri = creatorUri + "/" + local;
        } else {
            createdUri = creatorUri + local;
        }
        if (local.indexOf('/') >= 0 && local.indexOf('/') != local.length-1)
            throw new BadRequest("Resource " + local + " must not include a slash");
        if (local.search(/[\\s\\#\\?]/) >= 0)
            throw new BadRequest("Fragement or name resources are not supported as primary topic: '" + local + "'");

        //# Insert RDF DATA
        var statements = new StatementCollector();
        var created = this.insertComponentGraph(rdfData, type, createdUri, statements);
        if (create) {
            created = created.objectConnection.addDesignation(created, create.toString());
            create.touchRevision(); // FIXME this shouldn't be needed
        }
        var iter = this.FindCreatablesOf(created).iterator();
        if (!iter.hasNext()) {
            var subclasses = this.FindSubClassFor(created).iterator();
            if (!subclasses.hasNext()) throw new Forbidden("Cannot create this type of resource");
            while (subclasses.hasNext()) {
                var subclass = subclasses.next();
                created = created.objectConnection.addDesignation(created, subclass.toString());
                subclass.touchRevision(); // FIXME this shouldn't be needed
            }
            iter = this.FindCreatablesOf(created).iterator();
            if (!iter.hasNext()) throw new Forbidden("No creatable subclasses exit for this resource");
        }
        if (this.calliHasComponent.contains(created))
            throw new Conflict("Resource " + created + " already exists");
        if (!(created instanceof Serviceable))
            throw new BadRequest("Resource is not Serviceable: " + created);
        if (!(created instanceof Composite) && link && link.match(/<http:..www.w3.org.ns.ldp#[a-zA-Z]*Container>[^<]*; *rel="type"/))
            throw new BadRequest("Resource is not a Container: " + created);
        if (created.resource.stringValue().indexOf(creatorUri) !== 0)
            throw new BadRequest("Resource identifier must start with " + this + " was " + created);
        if (needSlash && created.resource.stringValue().charAt(creatorUri.length) != '/')
            throw new BadRequest("A Slash must separate the container and it's member, was " + created.resource.stringValue().substring(creatorUri.length));
        var localPart = created.resource.stringValue().substring(needSlash ? creatorUri.length+1 : creatorUri.length);
        if (localPart.indexOf('/') >= 0 && localPart.indexOf('/') != localPart.length-1)
            throw new BadRequest("Resource " + localPart + " must not include a slash");
        if (localPart.search(/[\\s\\#\\?]/) >= 0)
            throw new BadRequest("Fragement or name resources are not supported as primary topic: '" + localPart + "'");
        if (localPart.search(/[a-zA-Z0-9\\-_%!\\$\\&'\\(\\)\\*\\+,;=]/) < 0)
            throw new BadRequest("A path segment is required for members");

        var creators = this.FindCreator(created);
        var templates = new java.util.ArrayList();
        while (iter.hasNext()) {
            var cls = iter.next();
            var jter = creators.iterator();
            while (jter.hasNext()) {
                var user = jter.next();
                if (!this.isAuthorized(user.toString(), cls, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                    throw new Forbidden(user + " is not permitted to create " + cls + " resources");
            }
            if (verify) {
                var kter = cls.calliCreate.iterator();
                while (kter.hasNext()) {
                    templates.add(kter.next().getTemplateFor(createdUri));
                }
            }
        }

        try {
            created.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }

        if (verify) {
            this.calliVerifyCreatedResource(created, templates, statements.getStatements(), createdUri);
            //# Add permissions and component membership
            created.calliReader.addAll(this.calliReader);
            created.calliSubscriber.addAll(this.calliSubscriber);
            created.calliEditor.addAll(this.calliEditor);
            created.calliAdministrator.addAll(this.calliAdministrator);
            created.calliEditor.addAll(this.FindContributor(created));
        } else {
            created.calliAdministrator.addAll(this.FindAdministrator(created));
        }
        if (intermediate) {
            var revision = this.provWasGeneratedBy;
            this.calliHasComponent.add(created);
            this.provWasGeneratedBy = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(created);
        }

        var partners = statements.getStatements().iterator();
        while (partners.hasNext()) {
            var partner = partners.next().object;
            if (partner instanceof org.openrdf.model.URI &&
                    partner.stringValue() != created.toString() &&
                    partner.stringValue().indexOf(created.toString()+'#') < 0) {
                of.createObject(partner).touchRevision(); // FIXME this shouldn't be needed
            }
        }
        return {
            status: 201,
            message: 'Created',
            headers:{
                link: '<' + created.toString() + '?describe>;rel="describedby";anchor="' + created.toString() + '"',
                location: created.toString(),
                'content-type': 'text/uri-list'
            },
            body: [created.toString()]
        };
    """.

:rdfData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostRDFSource;
    rdfs:range <java:java.io.InputStream>;
    calli:type "text/turtle", "application/ld+json;q=0.4", "application/rdf+xml;q=0.2".

:verify a owl:FunctionalProperty, owl:DatatypeProperty;
    rdfs:domain :PostRDFSource;
    rdfs:range xsd:boolean.

################################
# POST INSERT DATA
################################

:PostDeleteInsert rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "describe";
    calli:requires calli:administrator;
    calli:expect "201-created";
    calli:type "text/uri-list";
    calli:imports <java:org.callimachusproject.form.helpers.EntityUpdater>;
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <Composite>;
    calli:imports <Serviceable>;
    calli:script """
        if (link && link.match(/<http:..www.w3.org.ns.ldp#BasicContainer>[^<]*; *rel="type"/))
            throw new BadRequest("ldp:BasicContainer interaction model is not supported");
        if (link && link.match(/<http:..www.w3.org.ns.ldp#DirectContainer>[^<]*; *rel="type"/))
            throw new BadRequest("ldp:DirectContainer interaction model is not supported");
        if (link && link.match(/<http:..www.w3.org.ns.ldp#NonRDFSource>[^<]*; *rel="type"/))
            return this.PostNonRDFSource(create, fileClass, intermediate, link, rdfData, slug, type);

        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        var creatorUri = this.getResource().stringValue();
        var needSlash = creatorUri.charAt(this.resource.stringValue().length-1) != '/';

        //# Parse INSERT DATA
        var updater = new EntityUpdater(this.resource, "?describe", true);
        var string = updater.parseUpdate(insertData);
        
        //# Verify input
        if (updater.subject.stringValue() == this.resource.stringValue()) {
            //# PATCH itself
            updater.executeUpdate(string, con);

            try {
                this.Validate();
            } catch (e if e.javaException instanceof ServiceUnavailable) {
                java.lang.System.err.println("Storing " + this);
            }

            this.touchRevision();
            //# FIXME we shouldn't need to touch anything
            var parent = this.SelectParentComposite();
            if (parent) {
                parent.touchRevision();
            }
            return null;
        }

        //# Execute input
        updater.executeUpdate(string, con);
        var created = of.createObject(updater.subject, updater.getTypes(updater.subject));
        if (create) {
            created = created.objectConnection.addDesignation(created, create.toString());
            create.touchRevision(); // FIXME this shouldn't be needed
        }
        if (this.calliHasComponent.contains(created))
            throw new Conflict("Resource " + created + " already exists");
        if (!(created instanceof Serviceable))
            throw new BadRequest("Resource is not Serviceable: " + created);
        if (!(created instanceof Composite) && link && link.match(/<http:..www.w3.org.ns.ldp#[a-zA-Z]*Container>[^<]*; *rel="type"/))
            throw new BadRequest("Resource is not a Container: " + created);
        if (created.resource.stringValue().indexOf(creatorUri) !== 0)
            throw new BadRequest("Resource identifier must start with " + this + " was " + created);
        if (needSlash && created.resource.stringValue().charAt(creatorUri.length) != '/')
            throw new BadRequest("A Slash must separate the container and it's member, was " + created.resource.stringValue().substring(creatorUri.length));
        var localPart = created.resource.stringValue().substring(needSlash ? creatorUri.length+1 : creatorUri.length);
        if (localPart.indexOf('/') >= 0 && localPart.indexOf('/') != localPart.length-1)
            throw new BadRequest("Resource " + localPart + " must not include a slash");
        if (localPart.search(/[\\s\\#\\?]/) >= 0)
            throw new BadRequest("Fragement or name resources are not supported as primary topic: '" + localPart + "'");
        if (localPart.search(/[a-zA-Z0-9\\-_%!\\$\\&'\\(\\)\\*\\+,;=]/) < 0)
            throw new BadRequest("A path segment is required for members");

        try {
            created.Validate();
        } catch (e if e.javaException instanceof ServiceUnavailable) {
            java.lang.System.err.println("Storing " + this);
        }

        var creators = this.FindCreator(created);
        var iter = this.FindCreatablesOf(created).iterator();
        if (!iter.hasNext())
            throw new Forbidden("Cannot create this type of resource");
        while (iter.hasNext()) {
            var cls = iter.next();
            var jter = creators.iterator();
            while (jter.hasNext()) {
                var user = jter.next();
                if (!this.isAuthorized(user.toString(), cls, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                    throw new Forbidden(user + " is not permitted to create " + cls + " resources");
            }
        }

        //# Add permissions and component membership
        created.calliReader.addAll(this.calliReader);
        created.calliSubscriber.addAll(this.calliSubscriber);
        created.calliEditor.addAll(this.calliEditor);
        created.calliAdministrator.addAll(this.calliAdministrator);
        created.calliEditor.addAll(this.FindContributor(created));
        if (intermediate) {
            var revision = this.provWasGeneratedBy;
            this.calliHasComponent.add(created);
            this.provWasGeneratedBy = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(created);
        }

        var iter = updater.partners.iterator();
        while (iter.hasNext()) {
            var partner = iter.next();
            if (!partner.toString().equals(this.toString())) {
                con.getObject(partner).touchRevision(); // FIXME this shouldn't be needed
            }
        }
        return created.toString();
    """.

:insertData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostDeleteInsert;
    rdfs:range <java:java.io.InputStream>;
    calli:type "application/sparql-update;q=1.1". # higher than serviceable.ttl#PatchDeleteInsert

################################
# POST Non-RDF
################################

:PostText rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "create", "describe", "edit", "contents";
    calli:requires calli:contributor;
    calli:type "message/x-response";
    calli:imports <java:org.apache.commons.io.input.ReaderInputStream>;
    calli:imports <java:java.nio.charset.Charset>;
    calli:script """
        var stream = new ReaderInputStream(textData, Charset.defaultCharset());
        return this.PostNonRDFSource(create, fileClass, intermediate, link, stream, slug, type);
    """.

:textData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostText;
    rdfs:range <java:java.io.Reader>;
    calli:type "text/*;q=0.2".

:PostImage rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "create", "describe", "edit", "contents";
    calli:requires calli:contributor;
    calli:type "message/x-response";
    calli:imports <Photo>;
    calli:imports foaf:Image;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var resp = this.PostNonRDFSource(create, fileClass, intermediate, link, imageData, slug, type);
        var createdUri = resp.headers.location;
        var obj = con.addDesignation(con.getObject(createdUri), Image);
        var depiction = vf.createURI("http://xmlns.com/foaf/0.1/depiction");
        if (obj instanceof Photo) {
            var small = vf.createURI(obj.resource.stringValue() + '?small');
            con.add(obj.resource, depiction, small, []);
        } else {
            con.add(obj.resource, depiction, obj.resource, []);
        }
        return resp;
    """.

:imageData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostImage;
    rdfs:range <java:java.io.InputStream>;
    calli:type "image/*;q=0.2".

:PostNonRDFSource rdfs:subClassOf :PostLDPCreate;
    calli:method "POST";
    calli:query "create", "describe", "edit", "contents";
    calli:requires calli:contributor;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.BadRequest>;
    calli:imports <java:org.callimachusproject.server.exceptions.Forbidden>;
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:imports <java:org.callimachusproject.server.exceptions.InternalServerError>;
    calli:imports <java:org.callimachusproject.server.exceptions.UnsupportedMediaType>;
    calli:imports <java:org.callimachusproject.xml.XMLEventReaderFactory>;
    calli:imports <java:org.openrdf.model.vocabulary.RDFS>;
    calli:imports <java:org.openrdf.model.vocabulary.DCTERMS>;
    calli:imports <java:javax.xml.datatype.DatatypeFactory>;
    calli:imports <java:java.util.GregorianCalendar>;
    calli:imports <java:java.util.TimeZone>;
    calli:imports foaf:Document;
    calli:imports foaf:Image;
    calli:imports <Creatable>;
    calli:imports <Composite>;
    calli:imports <Serviceable>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.valueFactory;
        var of = con.objectFactory;

        var nfd = slug && java.text.Normalizer.normalize(decodeURIComponent(slug), java.text.Normalizer.Form.NFD);
        var local = nfd && encodeURI(nfd.replace(/[-\\s]+/g, '-')).replace(/%25(\\w\\w)/g, '%$1');
        if (local == null || local.length === 0) {
            local = java.util.UUID.randomUUID().toString();
        }
        var createdUri;
        var creatorUri = this.getResource().stringValue();
        if (creatorUri.charAt(creatorUri.length-1) != '/') {
            createdUri = creatorUri + "/" + local;
        } else {
            createdUri = creatorUri + local;
        }

        var created = of.createObject(createdUri);
        if (this.calliHasComponent.contains(created))
            throw new Conflict("Resource " + created + " already exists");
        if (local.indexOf('/') >= 0)
            throw new BadRequest("Resource " + local + " must not include a slash");
        if (local.search(/[\\s\\#\\?]/) >= 0)
            throw new BadRequest("Fragement or name resources are not supported as primary topic: '" + local + "'");
        if (link && link.match(/<http:..www.w3.org.ns.ldp#[a-zA-Z]Container>[^<]*; *rel="type"/))
            throw new BadRequest("Unknown RDFSource media type: " + nrType);
        if (link && link.match(/<http:..www.w3.org.ns.ldp#RDFSource>[^<]*; *rel="type"/))
            throw new BadRequest("Unknown RDFSource media type: " + nrType);

        //# rdfs:label
        var filename = local.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
        var label = vf.createLiteral(decodeURIComponent(filename).replace(/[_\\-\\+\\s]+/g, " "));
        con.add(created.resource, RDFS.LABEL, label, []);

        //# dcterms:created
        var now = DatatypeFactory.newInstance().newXMLGregorianCalendar(new GregorianCalendar(TimeZone.getTimeZone("UTC")));
        con.add(created.resource, DCTERMS.CREATED, vf.createLiteral(now), []);

        if (!type || type == "application/octet-stream") {
            var mimetypes = new javax.activation.MimetypesFileTypeMap();
            type = mimetypes.getContentType(local);
        }
        var documentTag = null;
        var bio = new org.callimachusproject.io.LatencyInputStream(nrData);
        try {
            if (type.indexOf("text/xml") == 0 || type.indexOf("application/xml") == 0 ||
                    type.indexOf("+xml") > 0) {
                bio.mark(65536);
                var xmlFactory = XMLEventReaderFactory.newInstance();
                var xml = xmlFactory.createXMLEventReader(createdUri, bio);
                if (!xml)
                    throw new BadRequest("Document cannot be empty");
                while (!xml.peek().isStartElement()) {
                    xml.next();
                }
                var qname = xml.nextTag().name;
                if (qname.namespaceURI) {
                    var ns = qname.namespaceURI;
                    if (ns.indexOf('#') < 0 && ns.lastIndexOf('/') < ns.length - 1 && ns.lastIndexOf(':') < ns.length - 1) {
                        ns = ns + '#';
                    }
                    var of = this.objectConnection.objectFactory;
                    documentTag = of.createObject(ns + qname.localPart);
                }
                bio.reset();
            }
        } catch (e if e.javaException) {
            throw new BadRequest(e.javaException);
        }
        var construct = this.LookupConstructor(create || fileClass, documentTag, type.replace(/\\s*;.*/,''));
        if (fileClass.equals(construct))
            throw new UnsupportedMediaType("File format is not recognized: " + type + " for " + createdUri);
        var iter = this.FindCreator(created).iterator();
        while (iter.hasNext()) {
            var user = iter.next();
            if (!this.isAuthorized(user.toString(), construct, ["http://callimachusproject.org/rdf/2009/framework#author"]))
                throw new Forbidden(user + " is not permitted to create " + construct + " resources");
        }
        created = con.addDesignation(created, Document);
        created = con.addDesignation(created, construct.toString());
        created.ReplaceFileContent(bio, type, false);

        created.calliReader.addAll(this.calliReader);
        created.calliSubscriber.addAll(this.calliSubscriber);
        created.calliEditor.addAll(this.calliEditor);
        created.calliAdministrator.addAll(this.calliAdministrator);
        created.calliEditor.addAll(this.FindContributor(created));
        if (intermediate) {
            var revision = this.provWasGeneratedBy;
            this.calliHasComponent.add(created);
            this.provWasGeneratedBy = revision; // restore the previous revision
        } else {
            this.calliHasComponent.add(created);
        }
        return {
            status: 201,
            message: 'Created',
            headers:{
                link: [
                    '<' + created.toString() + '>;rev="edit-media";anchor="' + created.toString() + '"',
                    '<' + created.toString() + '?describe>;rel="describedby";anchor="' + created.toString() + '"',
                    '<http://www.w3.org/ns/ldp#NonRDFSource>;rel="type";anchor="' + created.toString() + '"'
                ].join(','),
                location: created.toString(),
                'content-type': 'text/uri-list'
            },
            body:[created.toString()]
        };
    """.

:nrData a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :PostNonRDFSource;
    rdfs:range <java:java.io.InputStream>;
    calli:type "*/*;q=0.1".

:LookupConstructor rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom rdfs:Resource];
    msg:sparql """
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT REDUCED ?class {
            {
                ?class rdfs:subClassOf*/owl:equivalentClass* $create .
                ?class rdfs:subClassOf* <File> .
                FILTER (
                    bound($documentTag) && EXISTS { ?class calli:documentTag $documentTag } ||
                    bound($mediaType) && NOT EXISTS { ?class calli:documentTag ?tag } && EXISTS { ?class calli:mediaType $mediaType } ||
                    bound($mediaType) && NOT EXISTS { ?class calli:documentTag ?tag } && EXISTS {
                        ?class calli:mediaType ?typ2
                        FILTER (
                            (
                                (sameTerm($mediaType,"application/javascript") || sameTerm($mediaType,"text/javascript"))
                                && (sameTerm(?typ2,"application/javascript") || sameTerm(?typ2,"text/javascript"))
                            ) || (
                                (sameTerm($mediaType,"application/xslt+xml") || sameTerm($mediaType,"text/xsl"))
                                && (sameTerm(?typ2,"application/xslt+xml") || sameTerm(?typ2,"text/xsl"))
                            ) || (
                                (sameTerm($mediaType,"application/xml") || sameTerm($mediaType,"text/xml"))
                                && (sameTerm(?typ2,"application/xml") || sameTerm(?typ2,"text/xml"))
                            ) || (
                                (sameTerm($mediaType,"application/java-archive") || sameTerm($mediaType,"application/zip"))
                                && (sameTerm(?typ2,"application/java-archive") || sameTerm(?typ2,"application/zip"))
                            ) || (
                                (sameTerm($mediaType,"image/x-png") || sameTerm($mediaType,"image/png"))
                                && (sameTerm(?typ2,"image/x-png") || sameTerm(?typ2,"image/png"))
                            ) || (
                                (sameTerm($mediaType,"image/pjpeg") || sameTerm($mediaType,"image/jpeg"))
                                && (sameTerm(?typ2,"image/pjpeg") || sameTerm(?typ2,"image/jpeg"))
                            )
                        )
                    }
                )
                BIND (1 AS ?preference)
            } UNION {
                # boot strap graphs before calli:mediaType triples are loaded
                BIND (<RdfTurtle> AS ?class)
                FILTER sameTerm($mediaType,"text/turtle")
                FILTER sameTerm($create, <File>)
                BIND (3 AS ?preference)
            } UNION {
                BIND ($create AS ?class)
                BIND (4 AS ?preference)
            }
        } ORDER BY ?preference LIMIT 1
    """.

:documentTag a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :LookupConstructor;
    calli:type "text/uri-list".

:mediaType a owl:FunctionalProperty, owl:ObjectProperty;
    rdfs:domain :LookupConstructor;
    rdfs:range xsd:string.

################################
# Delete
################################

:DeleteComponents rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
    calli:imports <java:org.openrdf.model.BNode>;
    calli:imports <java:org.openrdf.model.URI>;
    calli:imports <java:javax.tools.FileObject>;
    calli:script """
        var con = this.objectConnection;
        var vf = con.getValueFactory();
        function removeTriples(subject, hash) {
            var stmts = con.getStatements(subject, null, null, []);
            try {
                while (stmts.hasNext()) {
                    var st = stmts.next();
                    con.remove(st.subject, st.predicate, st.object, []);
                    if (st.object instanceof BNode && !st.object.equals(subject)) {
                        removeTriples(st.object, hash);
                    } else if (st.object instanceof URI && !st.object.equals(subject)) {
                        if (st.object.stringValue().indexOf(hash) == 0) {
                            removeTriples(st.object, hash);
                        } else {
                            con.getObjectFactory().createObject(st.object).touchRevision();
                        }
                    }
                }
            } finally {
                stmts.close();
            }
        }
        //# delete subfolder contents first incase subfolders are in an index.ttl graph
        var components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component.DeleteComponents) {
                component.DeleteComponents();
            }
        }
        components = this.calliHasComponent.iterator();
        while (components.hasNext()) {
            var component = components.next();
            if (component.Delete) {
                component.Delete();
            } else {
                con.clear([component.resource]); //# clear graph
                removeTriples(component.resource, component.resource.stringValue() + '#'); //# follow blank and hash references
                if (component instanceof FileObject) {
                    component['delete'](); //# remove document
                }
            }
            components.remove();
        }
    """.

:DeleteComposite owl:intersectionOf ( <serviceable.ttl#DeleteIfNotUsed>
        [owl:onProperty msg:target; owl:allValuesFrom [owl:intersectionOf (<Editable> <Composite>)]]);
    calli:method "DELETE";
    calli:query "edit", "describe";
    calli:requires calli:editor;
    calli:type "message/x-response";
    calli:imports <java:org.callimachusproject.server.exceptions.Conflict>;
    calli:script """
        var size = this.calliHasComponent.size();
        if (size == 1)
            throw new Conflict(this.calliHasComponent.iterator().next() + " must be deleted first");
        if (size)
            throw new Conflict("The " + size + " child resources must be deleted first");
        return proceed();
    """.

################################
# Helper Messages
################################

:FindCreatablesOf rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        SELECT REDUCED ?creatable {
            $of a [rdfs:subClassOf*/^owl:equivalentClass* ?creatable] .
            ?creatable a [^owl:equivalentClass*/rdfs:subClassOf* <Creatable>] .
        }
    """.

:of a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreatablesOf.

:FindSubClassFor rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:objectSet; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        SELECT REDUCED ?creatable {
            $for a ?type .
            ?creatable rdfs:subClassOf+ ?type .
            ?creatable a [rdfs:subClassOf* <Creatable>] .
            FILTER NOT EXISTS {
                ?creatable rdfs:subClassOf+ ?superClass .
                ?superClass rdfs:subClassOf+ ?type .
                ?superClass a [rdfs:subClassOf* <Creatable>] .
                FILTER (?superClass != ?creatable)
            }
        }
    """.

:for a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindSubClassFor.

:FindCreatableVersion rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom <Creatable>];
    msg:sparql """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX owl:<http://www.w3.org/2002/07/owl#>
        SELECT ?creatable {
            ?creatable owl:equivalentClass* $create .
            ?creatable a [rdfs:subClassOf* <Creatable>]
        } LIMIT 1
    """.

# find the user that will create $thing
:FindCreator rdfs:subClassOf msg:Message;
    rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Composite>];
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
        }
    """.

:thing a owl:ObjectProperty, owl:FunctionalProperty;
    rdfs:domain :FindCreator.

# find the user that created $thing if they are not otherwise editors
:FindContributor rdfs:subClassOf :FindCreator;
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
            FILTER NOT EXISTS {
                {
                    $thing ?editor ?contributor
                } UNION {
                    $thing ?editor [calli:member ?contributor]
                } UNION {
                    $thing rdf:type/rdfs:subClassOf* [?editor ?contributor]
                } UNION {
                    $thing rdf:type/rdfs:subClassOf* [?editor [calli:member ?contributor]]
                }
                FILTER (?editor = calli:editor || ?editor = calli:administrator)
            }
        }
    """.

# find the user that created $thing if they are not otherwise editors
:FindAdministrator rdfs:subClassOf :FindContributor;
    msg:sparql  """
        PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>
        PREFIX prov:<http://www.w3.org/ns/prov#>
        PREFIX calli:<http://callimachusproject.org/rdf/2009/framework#>
        SELECT DISTINCT ?contributor
        WHERE {
            $thing prov:wasGeneratedBy [prov:wasAssociatedWith ?contributor]
            FILTER NOT EXISTS {
                {
                    $thing calli:administrator ?contributor
                } UNION {
                    $thing calli:administrator [calli:member ?contributor]
                } UNION {
                    $thing rdf:type/rdfs:subClassOf* [calli:administrator ?contributor]
                } UNION {
                    $thing rdf:type/rdfs:subClassOf* [calli:administrator [calli:member ?contributor]]
                }
            }
        }
    """.
