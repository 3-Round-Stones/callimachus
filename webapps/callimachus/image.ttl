# 
#    Copyright (c) 2011 Talis Inc., Steve Battle and James Leigh, Some rights reserved
# 
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
# 
#        http://www.apache.org/licenses/LICENSE-2.0
# 
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

@prefix xsd:<http://www.w3.org/2001/XMLSchema#>.
@prefix rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs:<http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl:<http://www.w3.org/2002/07/owl#>.
@prefix msg:<http://www.openrdf.org/rdf/2011/messaging#>.
@prefix calli:<http://callimachusproject.org/rdf/2009/framework#>.
@prefix skos:<http://www.w3.org/2004/02/skos/core#>.
@prefix foaf:<http://xmlns.com/foaf/0.1/>.
@prefix callimachus:<.>.
@prefix :<#>.

<Image> a calli:Creatable, owl:Class;
	rdfs:subClassOf calli:Viewable, calli:Editable, foaf:Image ;
	rdfs:label "Image" ;
	calli:icon <image.png>;
	calli:view <image.xhtml> ;
	calli:edit <image-edit.xhtml> ;
	calli:create <image-create.xhtml>;
	calli:uriSpace </>.

:PostImageCreate owl:intersectionOf (</callimachus/toolbox/create.ttl#PostCreate>
		[owl:onProperty msg:target; owl:hasValue <Image> ]);
	msg:imports <java:java.net.URLEncoder>;
	msg:imports <java:javax.mail.util.ByteArrayDataSource>;
	msg:imports <java:javax.mail.internet.MimeMultipart>;
	msg:imports <java:org.openrdf.http.object.exceptions.BadRequest>;
	msg:imports <java:org.openrdf.http.object.exceptions.Conflict>;
	msg:imports <java:org.openrdf.model.vocabulary.RDFS>;
	msg:imports <Image> ;
	msg:script """
		var con = this.objectConnection;
		var vf = con.getValueFactory();
		//# image and caption input (see below)
		var ds = new ByteArrayDataSource(body, "multipart/form-data") ;
		var multipart = new MimeMultipart(ds);
		var img = multipart.getBodyPart(0) ;
		var fileName = img.fileName.replace(/.*[\\\\\\/]/, '');
		var caption = null;
		if (multipart.getCount() > 1) {
			caption = multipart.getBodyPart(1).content;
		}

		//# image resource
		var obj = location;
		if (!obj) { //# TODO require location
			var local = ("" + URLEncoder.encode(fileName, "UTF-8")).replace(/%20/g, "+") ;
			var uri = this.toUri().resolve("/image/") + local ;
			obj = con.getObject(uri) ;
		}
		if (obj instanceof Image)
			throw new Conflict("An image with that file named has already been uploaded: " + obj) ;

		//# designate as <Image> and the relevant mimetype
		obj = con.addDesignation(obj, Image) ;
		obj = con.addDesignation(obj, "http://xmlns.com/foaf/0.1/Image") ;
		var type = img.contentType;
		if (type == "image/pjpeg") { //# IE
			type = "image/jpeg";
		}
		if (type == "image/x-png") { //# IE
			type = "image/png";
		}
		if (type != "image/png" && type != "image/jpeg" && type != "image/gif" && type != "image/vnd.microsoft.icon") {
			throw new BadRequest("Unsupported format: " + type);
		}
		obj = con.addDesignation(obj, "urn:mimetype:" + type) ;
		this.PropagatePermissions(obj);

		//# add the image label
		var label = fileName.replace(/([a-zA-Z_0-9])\\.[a-zA-Z]+$/, "$1");
		con.add(obj.resource, RDFS.LABEL, vf.createLiteral(label), []);

		//# add the image caption
		if (caption) con.add(obj.resource, RDFS.COMMENT, vf.createLiteral(caption), []);

		this.objectConnection.commit();

		//# load image data
		var file = img.getInputStream();
		var out = obj.PutImage(file) ;

		return obj;
	""".

:local a calli:LocalRealm;
	calli:domain </>.

:PutImage rdfs:subClassOf msg:Message;
	rdfs:subClassOf [owl:onProperty msg:target; owl:allValuesFrom <Image> ];
	rdfs:subClassOf [owl:onProperty msg:object; owl:allValuesFrom owl:Nothing];
	msg:method "PUT" ;
	msg:realm :local ;
	msg:script """
		var out = this.openOutputStream() ;
		var buf = java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, 1024);
		var read;
		try {
			while ((read = imageStream.read(buf)) >= 0) {
				out.write(buf, 0, read);
			}
		} finally {
			out.close();
		}
	""".

:imageStream a owl:DatatypeProperty, owl:FunctionalProperty ;
	rdfs:domain :PutImage ;
	rdfs:range <java:java.io.InputStream> ;
	msg:type "application/octet-stream" .

